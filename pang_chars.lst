mads 2.1.6 build 71 (9 Aug 23)
Source: pang_chars.asm
     1
     2 				; !!! UWAGA NA DYREKTYWE .PUT i .GET !!!
     3 				; !!! u¿ywane jest pierwszych 19 bajtów do zapamiêtania adresów zestawów znakowych !!!
     4 				; !!! zmiana tych adresów poprzez niew³aœciwe u¿ycie .GET lub .PUT doprowadzi od zwisu !!!
     5
     6 				; !!! kod przerwania NMI nie mo¿e odwo³ywaæ siê do obszaru $4000..$7FFF, jedynym wyj¹tkiem jest player RMT !!!
     7
     8 				; !!! program musi konczyc siê przed adresem TXTURE-40 !!!
     9 				; !!! procedury RamkaL, RamkaL korzystaj¹ z pamiêci od adresu TXTURE-40 !!!
    10
    11
    12 				* dla dwóch harpunów widoczne s¹ zbyt czêste spowolnienia gry, dlatego zdecydowa³em siê tylko na 1 harpun
    13
    14 				// PANG (02.07.2007 - 15.12.2016) - chars mode
    15
    16 				// 25-08-2019	usuniety blad gdy po TIME OUT nastepowal GAME OVER
    17
    18 				* ---------------------------
    19 				* ---	CONSTANS
    20 				* ---------------------------
    21
    22 					icl 'atari.hea'
Source: atari.hea
     1
     2 				.enum	@dmactl
     3 = 0000				blank	= %00
     4 = 0001				narrow	= %01
     5 = 0002				normal	= %10
     6 = 0003				wide	= %11
     7 = 0004				missiles= %100
     8 = 0008				players	= %1000
     9 = 0010				oneline	= %10000
    10 = 0020				dma	= %100000
    11 				.ende
    12
    13 = 003F			scr48	= @dmactl(wide|dma|players|missiles|oneline)		;screen 48b
    14 = 003E			scr40	= @dmactl(normal|dma|players|missiles|oneline)		;screen 40b
    15 = 003D			scr32	= @dmactl(narrow|dma|players|missiles|oneline)		;screen 32b
    16
    17 				.enum	@pmcntl
    18 = 0001				missiles= %1
    19 = 0002				players	= %10
    20 = 0004				trigs	= %100
    21 				.ende
    22
    23 				.enum	@gtictl
    24 = 0000				prior0	= %0
    25 = 0001				prior1	= %1
    26 = 0002				prior2	= %10
    27 = 0004				prior4	= %100
    28 = 0008				prior8	= %1000
    29 = 0010				ply5	= %10000	; Fifth Player Enable
    30 = 0020				mlc	= %100000	; Multiple Color Player Enable
    31 = 0040				mode9	= %01000000
    32 = 0080				mode10	= %10000000
    33 = 00C0				mode11	= %11000000
    34 				.ende
    35
    36
    37 				.enum	@antic
    38 = 0080				dli = $80
    39 = 0040				lms = $40
    40 = 0010				hsc = $10
    41 = 0020				vsc = $20
    42 				.ende
    43
    44 				* ---------------------------------------------------------------------------------------------
    45 				* ---	OS
    46 				* ---------------------------------------------------------------------------------------------
    47
    48 = 0004			ramlo	=	$04	; (2) wektor RAM dla testu wielkosci pamieci
    49
    50 = 0008			warmst	=	$08	; znacznik goracego startu
    51 = 0009			boot?	=	$09	; znacznik odczytu wstepnego
    52 = 000A			dosvec	=	$0A	; (2) wektor startowy programu dyskowego
    53 = 000C			dosini	=	$0C	; (2) wektor inicjacji po odczycie z dyskietki
    54
    55 = 0011			brkkey	=	$11
    56
    57 = 0012			rtclok	=	$12	; (3) zegar czasu rzeczywistego
    58
    59 = 004D			atract	=	$4D
    60 = 0052			lmargn	=	$52
    61 = 0053			rmargn	=	$53
    62 = 0054			rowcrs	=	$54	; wiersz  kursora
    63 = 0055			colcrs	=	$55	; (2) Kolumna kursora
    64 = 0057			dindex	=	$57
    65 = 0058			savmsc	=	$58	; (2) Adres pamieci obrazu
    66 = 005A			oldrow	=	$5A
    67 = 005B			oldcol	=	$5B
    68 = 005D			oldchr	=	$5D
    69 = 005E			oldadr	=	$5E
    70 = 0062			palnts	=	$62
    71 = 0063			logcol	=	$63
    72
    73 = 0068			savadr	=	$68	; (2) pomocniczy rejestr adresowy
    74
    75 = 0079			keydef	=	$79	; (2) tablica konwersji kodow klawiatury na ATASCII
    76
    77 = 0200			vdslst	=	$0200	; (2) wektor przerwan NMI listy displejowej
    78 = 0210			vtimr1	=	$0210	; (2) wektor przerwania IRQ TIMER1
    79 = 0212			vtimr2	=	$0212	; (2) wektor przerwania IRQ TIMER2
    80 = 0214			vtimr4	=	$0214	; (2) wektor przerwania IRQ TIMER4
    81 = 021C			timcnt3	=	$021C	; trzeci licznik systemu
    82 = 0222			vvblki	=	$0222	; (2) wektor NMI natychmiastowego VBI
    83 = 0224			vvblkd	=	$0224	; (2) wektor NMI op??nionego VBI
    84 = 022A			timflg3	=	$022A	; znacznik wyzerowania licznika TIMCNT3
    85 = 022F			sdmctl	=	$022F	; cieñ DMACTL
    86 = 0230			sdlstl	=	$0230	; cieñ DLISTL
    87 = 0231			sdlsth	=	$0231	; cieñ DLISTH
    88
    89 = 026F			gtictls = 	$026F
    90
    91 = 02A2			escflg	=	$02A2
    92 = 02BF			botscr	=	$02BF	; liczba linii ekranu (24)
    93
    94 = 02C4			colpf0s	=	$02C4	; rejestr-cien COLPF0
    95 = 02C5			colpf1s	=	$02C5	; rejestr-cien COLPF1
    96 = 02C6			colpf2s	=	$02C6	; rejestr-cien COLPF2
    97 = 02C7			colpf3s	=	$02C7	; rejestr-cien COLPF3
    98 = 02C8			colbaks	=	$02C8	; rejestr-cien COLBAK
    99
   100 = 02D5			dsctln	=	$02D5	; (2) Disk sector size register; default of 128 ($80) bytes
   101 = 02E0			runad	=	$02E0	; Used by DOS for the run address read from the disk sector one or from a binary file.
   102 = 02E2			initad	= 	$02E2	; Initialization address read from the disk. An autoboot file must load an address value into either RUNAD above or INITAD.
   103 = 02E7			memlo	=	$02E7
   104 = 02EA			dvstat	=	$02EA	; (4) device status
   105 = 02F0			crsinh	=	$02F0	; znacznik widoczno?ci kursora
   106 = 02F3			chact	=	$02F3	; rejestr cien CHRCTL
   107 = 02F3			chart	=	$02F3	; cien rejestru kontroli wyswietlania znak?w (CHRCTL)
   108 = 02F4			chbas	=	$02F4	; rejestr cien CHBASE
   109 = 02FB			atachr	=	$02FB	; numer koloru dla PLOT, DRAW (kod ATASCII znaku)
   110 = 02FC			kbcodes	=	$02FC	; kod ostatnio nacisnietego klawisza, $ff jesli zaden nie zostal nacisniety (KBCODE)
   111 = 02FD			fildat	=	$02FD	; numer koloru dla FILL
   112 = 02FF			ssflag	=	$02FF
   113
   114 = 0300			ddevic	=	$0300	; Device Control Block, identyfikator urzadzenia
   115 = 0301			dunit	=	$0301	; Numer urz?dzenia; w przypadku stacji dyskow numer nap?du
   116 = 0302			dcmnd	=	$0302	; Komenda dla urzadzenia.
   117 = 0303			dstats	=	$0303	; Przed wywo?aniem SIO nalezy ustawic tu rodzaj operacji ($40 odczyt, $80 zapis, $C0 zapis i odczyt, $00 brak transferu danych). Po powrocie z systemu znajduje si? tu status operacji (kod b??du).
   118 = 0304			dbufa	=	$0304	; (2) Adres bufora. Przy operacji zapisu i odczytu jednocze?nie (DSTATS = $C0) bufor na odczytywane dane znajduje sie w tym samym miejscu, co bufor danch przeznaczonych do zapisu.
   119 = 0306			dtimlo	=	$0306	; Czas oczekiwania na pozytywn? odpowied? urz?dzenia, tzw. timeout, najczesciej = 7
   120 = 0307			dunuse	=	$0307	; Bajt nieuzywany, zarezerwowany do przysz?ych zastosowa?.
   121 = 0308			dbyt	=	$0308	; (2) Wielkosc bufora; musi byc zgodna z wielkoscia transmitowanego bloku danych. Zero oznacza 64 kilobajty.
   122 = 030A			daux1	=	$030A	; Pierwszy bajt pomocniczy. W operacjach dyskowych m?odszy bajt numeru sektora.
   123 = 030B			daux2	=	$030B	; Drugi bajt pomocniczy. W operacjach dyskowych starszy bajt numeru sektora.
   124 = 030F			casflg	=	$030F	; When set to zero, the current operation is a standard SIO operation; when non-zero, it is a cassette operation.
   125
   126 = 031A			hatabs	=	$031A	; tabela wektorow procedur obslugi
   127
   128 = 0340			iocb	=	$0340	; IOCB 0..7 ($340, $350, $360 ...)
   129
   130 = 0340			icchid	=	$0340
   131 = 0341			icdno	=	$0341
   132 = 0342			iccmd	=	$0342	; kod rozkazu operacji I/O
   133 = 0343			icstat	=	$0343	; status operacji I/O
   134 = 0344			icbufa	=	$0344	; (2) adres bufora danych dla operacji I/O
   135 = 0346			icputb	=	$0346	; (2) adres procedury przesylania danych
   136 = 0348			icbufl	=	$0348	; (2) dlugosc bufora danych dla operacji I/O
   137 = 0349			icbufh	=	$0349
   138 = 034A			icax1	=	$034A	; rejestr pomocniczy dla operacji I/O
   139 = 034B			icax2	=	$034B	; rejestr pomocniczy dla operacji I/O
   140 = 034C			icax3	=	$034C	; rejestr pomocniczy dla operacji I/O
   141 = 034D			icax4	=	$034D	; rejestr pomocniczy dla operacji I/O
   142 = 034E			icax5	=	$034E	; rejestr pomocniczy dla operacji I/O
   143 = 034F			icax6	=	$034F	; rejestr pomocniczy dla operacji I/O
   144
   145 = 0400			casbuf	=	$0400	; bufor magnetofonu
   146 = 047F			casben	=	$047F	; koniec bufora magnetofonu
   147
   148 = E45C			setvbv	=	$E45C
   149 = E462			xitvbv	=	$E462
   150 = E456			ciov	=	$E456	; Wektor do CIOMAIN
   151 = E459			jsioint	=	$E459	; Wektor do SIO
   152 = E453			jdskint	=	$E453	; Wektor do sterownika dyskowego
   153
   154 = E474			warmsv	=	$E474	; Punkt wejœcia do ciep³ego startu (RESET SYSTEMU)
   155 = E477			coldsv	=	$E477	; Punkt wejœcia do zimnego startu (w³¹czanie zasilania)
   156 						
   157 				* ---------------------------------------------------------------------------------------------
   158 				* ---	KEY ($d209)
   159 				* ---------------------------------------------------------------------------------------------
   160
   161 = 001C			key_esc		= 28
   162 = 0021			key_space	= 33
   163
   164 = 003F			key_a		= 63
   165 = 0015			key_b		= 21
   166 = 003A			key_d		= 58
   167 = 0025			key_m		= 37
   168 = 0023			key_n		= 35
   169 = 0010			key_v		= 16
   170 = 0008			key_o		= 8
   171 = 000A			key_p		= 10
   172 = 003E			key_s		= 62
   173 = 002E			key_w		= 46
   174
   175 				* ---------------------------------------------------------------------------------------------
   176 				* ---	GTIA
   177 				* ---------------------------------------------------------------------------------------------
   178
   179 = D000			hposp0	=	$D000	; pozioma pozycja gracza 0 (Z)
   180 = D001			hposp1	=	$D001	; pozioma pozycja gracza 1 (Z)
   181 = D002			hposp2	=	$D002	; pozioma pozycja gracza 2 (Z)
   182 = D003			hposp3	=	$D003	; pozioma pozycja gracza 3 (Z)
   183 = D004			hposm0	=	$D004	; pozioma pozycja pocisku 0 (Z)
   184 = D005			hposm1	=	$D005	; pozioma pozycja pocisku 1 (Z)
   185 = D006			hposm2	=	$D006	; pozioma pozycja pocisku 2 (Z)
   186 = D007			hposm3	=	$D007	; pozioma pozycja pocisku 3 (Z)
   187 = D008			sizep0	=	$D008	; poziomy rozmiar gracza 0 (Z)
   188 = D009			sizep1	=	$D009	; poziomy rozmiar gracza 1 (Z)
   189 = D00A			sizep2	=	$D00A	; poziomy rozmiar gracza 2 (Z)
   190 = D00B			sizep3	=	$D00B	; poziomy rozmiar gracza 3 (Z)
   191 = D00C			sizem	=	$D00C	; poziomy rozmiar pocisk?w (Z)
   192 = D00D			grafp0	=	$D00D	; rejestr grafiki gracza 0 (Z)
   193 = D00E			grafp1	=	$D00E	; rejestr grafiki gracza 1 (Z)
   194 = D00F			grafp2	=	$D00F	; rejestr grafiki gracza 2 (Z)
   195 = D010			grafp3	=	$D010	; rejestr grafiki gracza 3 (Z)
   196 = D011			grafm	=	$D011	; rejestr grafiki pocisk?w (Z)
   197 = D012			colpm0	=	$D012	; rejestr koloru gracza i pocisku 0 (Z)
   198 = D013			colpm1	=	$D013	; rejestr koloru gracza i pocisku 1 (Z)
   199 = D014			colpm2	=	$D014	; rejestr koloru gracza i pocisku 2 (Z)
   200 = D015			colpm3	=	$D015	; rejestr koloru gracza i pocisku 3 (Z)
   201 = D016			colpf0	=	$D016	; rejestr koloru pola gry 0 (Z)
   202 = D017			colpf1	=	$D017	; rejestr koloru pola gry 1 (Z)
   203 = D018			colpf2	=	$D018	; rejestr koloru pola gry 2 (Z)
   204 = D019			colpf3	=	$D019	; rejestr koloru pola gry 3 (Z)
   205 = D01A			colpf4	=	$D01A
   206 = D01A			colbak	=	$D01A	; rejestr koloru t?a (Z)
   207
   208 = D016			color0	=	colpf0
   209 = D017			color1	=	colpf1
   210 = D018			color2	=	colpf2
   211 = D019			color3	=	colpf3
   212
   213 = D000			kolm0pf	=	$D000	; kolizja pocisku 0 z polem gry (O)
   214 = D001			kolm1pf	=	$D001	; kolizja pocisku 1 z polem gry (O)
   215 = D002			kolm2pf	=	$D002	; kolizja pocisku 2 z polem gry (O)
   216 = D003			kolm3pf	=	$D003	; kolizja pocisku 3 z polem gry (O)
   217 = D004			kolp0pf	=	$D004	; kolizja gracza 0 z polem gry (O)
   218 = D005			kolp1pf	=	$D005	; kolizja gracza 1 z polem gry (O)
   219 = D006			kolp2pf	=	$D006	; kolizja gracza 2 z polem gry (O)
   220 = D007			kolp3pf	=	$D007	; kolizja gracza 3 z polem gry (O)
   221 = D008			kolm0p	=	$D008	; kolizja pocisku 0 z graczem (O)
   222 = D009			kolm1p	=	$D009	; kolizja pocisku 1 z graczem (O)
   223 = D00A			kolm2p	=	$D00A	; kolizja pocisku 2 z graczem (O)
   224 = D00B			kolm3p	=	$D00B	; kolizja pocisku 3 z graczem (O)
   225 = D00C			kolp0p	=	$D00C	; kolizja gracza 0 z innym graczem (O)
   226 = D00D			kolp1p	=	$D00D	; kolizja gracza 1 z innym graczem (O)
   227 = D00E			kolp2p	=	$D00E	; kolizja gracza 2 z innym graczem (O)
   228 = D00F			kolp3p	=	$D00F	; kolizja gracza 3 z innym graczem (O)
   229 = D010			trig0	=	$D010	; stan przycisku joysticka 0 (O)
   230 = D011			trig1	=	$D011	; stan przycisku joysticka 1 (O)
   231 = D013			trig3	=	$D013	; znacznik do??czenia cartridge-a (O)
   232 = D014			pal	=	$D014	; znacznik systemu TV (O) PAL = 1, NTSC = 15
   233
   234 = D01B			gtictl	=	$D01B	; rejestr kontroli uk?adu GTIA
   235 = D01B			gtiactl	=	gtictl
   236
   237 = D01C			vdelay	=	$D01C	; licznik op??nienia pionowego P/MG
   238 = D01D			pmcntl	=	$D01D	; rejestr kontroli graczy i pocisk?w
   239 = D01D			gractl	=	PMCNTL
   240 = D01E			hitclr	=	$D01E	; rejestr kasowania rejestr?w kolizji
   241 = D01F			consol	=	$D01F	; rejestr stanu klawiszy konsoli
   242
   243 				* ---------------------------------------------------------------------------------------------
   244 				* ---	POKEY
   245 				* ---------------------------------------------------------------------------------------------
   246
   247 = 0010			irqens	=	$0010	; rejestr-cie? IRQEN
   248 = 0011			irqstat	=	$0011	; rejestr-cie? IRQST
   249
   250 = D200			audf1	=	$d200	; cz?stotliwo?? pracy generatora 1 (Z)
   251 = D201			audc1	=	$d201	; rejestr kontroli d?wi?ku generatora 1 (Z)
   252 = D202			audf2	=	$d202	; cz?stotliwo?? pracy generatora 2 (Z)
   253 = D203			audc2	=	$d203	; rejestr kontroli d?wi?ku generatora 2 (Z)
   254 = D204			audf3	=	$d204	; cz?stotliwo?? pracy generatora 3 (Z)
   255 = D205			audc3	=	$d205	; rejestr kontroli d?wi?ku generatora 3 (Z)
   256 = D206			audf4	=	$d206	; cz?stotliwo?? pracy generatora 4 (Z)
   257 = D207			audc4	=	$d207	; rejestr kontroli d?wi?ku generatora 4 (Z)
   258
   259 = D208			audctl	=	$D208	; rejestr kontroli generator?w d?wi?ku (Z)
   260 = D209			stimer	=	$D209	; rejestr zerowania licznik?w (Z)
   261 = D209			kbcode	=	$D209	; kod ostatnio naci?ni?tego klawisza (O)
   262 = D20A			skstres	=	$D20A	; rejestr statusu z??cza szeregowego (Z)
   263 = D20A			random	=	$D20A	; rejestr liczby losowej (O)
   264 = D20D			serout	=	$D20D	; szeregowy rejestr wyj?ciowy (Z)
   265 = D20D			serin	=	$D20D	; szeregowy rejestr wej?ciowy (O)
   266 = D20E			irqen	=	$D20E	; zezwolenie przerwa? IRQ (Z)
   267 = D20E			irqst	=	$D20E	; status przerwa? IRQ (O)
   268 = D20F			skctl	=	$D20F	; rejestr kontroli z??cza szeregowego (Z)
   269 = D20F			skstat	=	$D20F	; rejestr statusu z??cza szeregowego (O)
   270
   271 = D200			pot0	=	$d200	; (O)
   272 = D208			allpot	=	$d208	; (O)
   273
   274 = D20B			potgo	=	$d20b	; (Z)
   275
   276 				* ---------------------------------------------------------------------------------------------
   277 				* ---	PIA
   278 				* ---------------------------------------------------------------------------------------------
   279
   280 = D300			porta	=	$D300	; port A uk?adu PIA
   281 = D301			portb	=	$D301	; port B uk?adu PIA
   282 = D302			pactl	=	$D302	; rejestr kontroli portu A
   283 = D303			pbctl	=	$D303	; rejestr kontroli portu B
   284
   285 				* ---------------------------------------------------------------------------------------------
   286 				* ---	ANTIC
   287 				* ---------------------------------------------------------------------------------------------
   288
   289 = D400			dmactl	=	$D400	; rejestr kontroli dost?pu do pami?ci
   290 = D401			chrctl	=	$D401	; rejestr kontroli wy?wietlania znak?w
   291 = D402			dlptr	=	$D402	; adres programu ANTIC-a
   292 = D402			dlistl	=	$D402
   293 = D403			dlisth	=	$D403
   294 = D404			hscrol	=	$D404	; znacznik poziomego przesuwu obrazu
   295 = D405			vscrol	=	$D405	; znacznik pionowego przesuwu obrazu
   296 = D407			pmbase	=	$D407	; adres pami?ci graczy i pocisk?w
   297 = D409			chbase	=	$D409	; adres zestawu znak?w
   298 = D40A			wsync	=	$D40A	; znacznik oczekiwania na synchronizacj? poziom?
   299 = D40B			vcount	=	$D40B	; licznik linii obrazu
   300 = D40C			lpenh	=	$D40C	; poziome po?o?enie pi?ra ?wietlengo
   301 = D40D			lpenv	=	$D40D	; pionowe po?o?enie pi?ra ?wietlnego
   302 = D40E			nmien	=	$D40E	; rejestr zezwole? na przerwania NMI
   303 = D40F			nmist	=	$D40F	; rejestr statusu przerwa? NMI (O)
   304 = D40F			nmires	=	$D40F	; (Z)
   305
   306 				* ---------------------------------------------------------------------------------------------
   307 				* ---	HARDWARE
   308 				* ---------------------------------------------------------------------------------------------
   309
   310 = FFFA			nmivec	=	$FFFA	; wektor przerwania NMI (6502)
   311 = FFFC			resetvec=	$FFFC	; wektor przerwania RESET
   312 = FFFE			irqvec	=	$FFFE	; wektor przerwania IRQ
   313
   314 = FFEA			nmivec16 =	$FFEA	; wektor przerwania NMI (nativ 65816)
   315 = FFEE			irqvec16 =	$FFEE	; wektor przerwania IRQ
   316
    23 					icl 'pang.hea'
Source: pang.hea
     1
     2 				// tablica ze starszymi bajtami adresów zestawów znakowych (19 zestawów)
     3
     4  [0000] 10 14 18 1C C0 + .put = $10,$14,$18,$1c,$c0,$c4,$c8,$cc,$e0,$e4,$e8,$ec,$f0,$f4,$f8,$fc,$28,$2c,$30, $30
     5
     6 				//---------------------------------------------------------------------------------------------------------------------
     7
     8 = 000C			banks	= 12
     9
    10 = 0020			defaultPrior	= $20		; domyœlny piorytet duchów "Multicolor PMG + PRIOR $00"
    11
    12 = 0000			pmgB1	= $0000
    13 = 2000			pmgB2	= $2000			; $2300..$27FF
    14
    15 = 0700			pmStar	= $700			; duch dla harpunu i gwiazdki
    16
    17 = 0400			pmHero0	= $400			; !!! pmHero0, pmHero1 !!! para - 4 kolorowy duch
    18 = 0500			pmHero1	= $500
    19 = 0600			pmHero2	= $600			; ten duch nie ma pary
    20
    21 = 0700			pmHero3 = pmStar
    22
    23 = 00C0			missile_mask = [3<<[(pmHero0-$400)/$75]+3<<[(pmHero1-$400)/$75]+3<<[(pmHero2-$400)/$75]]^$ff
    24
    25 = 000F			starsBright = $0f
    26
    27 = 00F0			sfx_default_volume	= $f0
    28 = 00F0			msx_default_volume	= $f0
    29
    30
    31 = 2000			inflate_data	= pmgB2		; 3 strony dla dekompresora
    32
    33 = 0800			clrWallIDX	= $0800		; tablica clrWallIDX[wallIDX]=$8x z indeksami do killWall
    34 = 0880			clrWallPOS	= $0880
    35 = 0900			killWall	= $0900
    36
    37 = 0A00			volume_slide	= $0a00		; tablica g³oœnoœci dla RMT
    38
    39 = 0B00			min52div4	= $0b00
    40
    41 = 0C00			drabin		= $0c00		; $0c00..$0fff, informacja o drabinkach
    42
    43 = 9B40			txture		= $9b40		; $9b40..$b6ff
    44 = B300			invers		= txture+152*40	; mapa kolizji dla harpunu i kul, tymczasowo takze informacja o inversie znaków
    45 = B700			colors		= invers+1024	; informacja o kolorach (5*19)
    46
    47 				// !!! ostatnie 48 bajtów INVERS zawsze wyzerowane !!!
    48
    49 = B800			fntPnl		= $b800		; $B800..$BFFF - dwa zestawy znaków dla panelu gry
    50
    51 				; znaki zajmuj¹ pamiêæ $1000..$1FFF, $C000..$CFFF i $E000..$FFFF
    52 				; pierwsze 64 znaki to bufor #1, drugie 64 znaki to bufor #2
    53 				; z ka¿dego bufora tylko pierwsze 40 znaków jest modyfikowane, reszta jest do wykorzystania
    54
    55 = FFE0			mainIntro	= $ffe0		; zmienne pomocnicze dla intra i gry
    56 = FFE3			msxPlay		= $ffe3
    57 = FFE6			msxStop		= $ffe6
    58 = FFE9			select		= $ffe9
    59
    60 				//---------------------------------------------------------------------------------------------------------------------
    61
    62 = 00F0			dolnakrawedz	= 240		; dolna krawedz ekranu - wspó³rzedna Y
    63
    64 = 003D			pmg_overlay	= dolnakrawedz-19*8-23-4
    65
    66 = 0030			scrwid	= 48
    67
    68 = 0013			scrhig	= 19
    69
    70 = 000F			spacja		= 15
    71
    72 = 0028			pustak		= 40		; pierwszy wolny znak do wykorzystania '40'
    73 = 00A9			murek0		= 41+$80
    74 = 00E8			murek1		= 104+$80
    75 = 00E9			murek2		= 105+$80
    76
    77 = 00AA			murL0		= 42+$80	; drugi rodzaj murku, w stylu Pang-a C64
    78 = 00AB			murM0		= 43+$80
    79 = 00AC			murR0		= 44+$80
    80 = 00AD			mur0		= 45+$80
    81
    82 = 003A			bonus0		= 58		; znaki wykorzystywane przez bonus-y (wiersz 0)
    83 = 003B			bonus1		= 59
    84 = 003C			bonus2		= 60
    85
    86 = 003D			bonus3		= 61		; znaki wykorzystywane przez bonus-y (wiersz 1)
    87 = 003E			bonus4		= 62
    88 = 003F			bonus5		= 63
    89
    90 = 00A9			okalajacy	= murek0
    91
    92 				//---------------------------------------------------------------------------------------------------------------------
    93 				/*
    94 				dwukropek_u	= $46
    95 				dwukropek_d	= $7e
    96
    97 				prawy_nawias0	= $29aa00
    98 				prawy_nawias1	= $004d4e
    99 				prawy_nawias2	= $00a3a4
   100 				prawy_nawias3	= $626300
   101
   102 				lives_chr_00	= 44		; pierwszy wiersz z licznikiem zyc
   103 				lives_chr_01	= 45
   104 				lives_chr_02	= 46
   105
   106 				lives_chr_10	= 2		; drugi wiersz z licznikiem zyc
   107 				lives_chr_11	= 3
   108 				lives_chr_12	= 4
   109 				*/
   109
   110 				//---------------------------------------------------------------------------------------------------------------------
   111
   112 = 0030			@end_delay	= 48		; czas wybrzmiewania muzyki dla smierci bohatera
   113
   114 = 0008			hook_delay	= 8		; <> [0..1]
   115 = 0080			hook_time_limit = 128		; czas trwania harpunu z hakiem (=128 w celu wykorzystania BPL)
   116
   117 = 0078			shield_time_limit= 120		; czas trwania SHIELD
   118 = 006E			clock_time_limit = 110		; czas trwania CLOCK
   119
   120 = 005C			hero_pmg_offset	= 120-16-8-4	; przesuniecie PMG przykrywaj¹cego bohatera
   121
   122 = 003D			harpun_pmg_offset = 89-16-8-4	; przesuniecie PMG podbarwiajace harpun
   123
   124 				;panel_pmg_offset= 21-4		; przesuniecie PMG podbarwiajacego panel
   125
   126 				//---------------------------------------------------------------------------------------------------------------------
   127
   128 = 0016			balls_limit		= 22	; maksymalna dopuszczalna liczba najmniejszych kul w trybie PANIC MODE
   129
   130 = 0002			max_bonus_counter	= 2	; maksymalna liczba wyst¹pieñ bonusu
   131
   132 				//---------------------------------------------------------------------------------------------------------------------
   133
   134 = 0010			sfxBum	= $10		; wybuch balonu
   135 = 0011			sfxDie	= $11		; œmieræ bohatera
   136 = 0012			sfxHrp	= $12		; wystrzelenie harpunu
   137 = 0013			sfxHrpS = $13		; harpun trafia w twardy murek
   138 = 0014			sfxHrpH = $14		; harpun trafia w miêkki murek
   139 = 0015			sfxHrpX = $15		; harpun zostaje zaczepiony
   140 = 0016			sfxBon	= $16		; zebranie bonusu
   141
   142 = 0024			ton_C4	= 36
   143 = 0030			ton_C5	= 48
   144 = 0011			ton_G2	= 17
   145 = 001F			ton_G3	= 31
   146 = 002B			ton_G4	= 43
   147
   148 				.enum	msxCode
   149 					Title, GameOver, Congratulations ,Game0, Game1, Game2, Game3, jingle0, jingle1, jingle2
   149 = 0000			TITLE
   149 = 0001			GAMEOVER
   149 = 0002			CONGRATULATIONS
   149 = 0003			GAME0
   149 = 0004			GAME1
   149 = 0005			GAME2
   149 = 0006			GAME3
   149 = 0007			JINGLE0
   149 = 0008			JINGLE1
   149 = 0009			JINGLE2
   150 				.ende
   151
   152 				//---------------------------------------------------------------------------------------------------------------------
   153
   154 				.enum	bonusCode
   155 					heart = 1, shield, clock, harpun_h, harpun, tnt
   155 = 0001			HEART
   155 = 0002			SHIELD
   155 = 0003			CLOCK
   155 = 0004			HARPUN_H
   155 = 0005			HARPUN
   155 = 0006			TNT
   156 				.ende
   157
   158 				.enum	deathCode
   159 					no_power = 1, esc_key, no_time, panic_stop
   159 = 0001			NO_POWER
   159 = 0002			ESC_KEY
   159 = 0003			NO_TIME
   159 = 0004			PANIC_STOP
   160 				.ende
    24
    25 = 0001			STEREOMODE	= 1		;0 => compile RMTplayer for mono 4 tracks
    26
    27 = 2000			@proc_add_bank	= $2000
    28 = 0100			@tab_mem_banks	= $100
    29
    30 = 00FF			delay_trig_default_value	= $ff
    31 = 0001			delay_joy_default_value		= 1
    32
    33 = 0006			delay_frame_player_animation	= 6
    34
    35 = 3400			prg		= $3400
    36
    37 = 0020			mobjects	= 32		; maksymalna liczba obs³ugiwanych obiektów
    38
    39 = 000B			_left		= $0b
    40 = 000A			_left_up	= $0a
    41 = 0009			_left_down	= $09
    42 = 0007			_right		= $07
    43 = 0006			_right_up	= $06
    44 = 0005			_right_down	= $05
    45 = 000D			_down		= $0d
    46 = 000E			_up		= $0e
    47
    48 = 0002			colpm0Hero	= $02		; kolory bohatera (tekstury nie powinny korzystaæ z tych kolorów)
    49 = 0078			colpm1Hero	= $78		;
    50 = 0018			colpm2Hero	= $18		;
    51
    52 = 0008			colm3Harpun	= colpm2Hero&$0f	; kolor harpunu uzale¿niony od koloru COLPM2
    53
    54 = 0002			mFrame		= 2		; minimalna liczba ramek opóŸnienia
    55
    56 = 0027				k0h	= 39		; wysokosc kuli #0 (najwiekszej)
    57 = 001F				k1h	= 31		; wysokosc kuli #1
    58 = 0017				k2h	= 23		; wysokosc kuli #2
    59 = 000F				k3h	= 15		; wysokosc kuli #3
    60 = 0007				k4h	= 7		; wysokosc kuli #4 (najmniejszej)
    61
    62 = 0006			score_cnt = 6			; liczba cyfr SCORE
    63 = 000B			score_all = score_cnt+3+2
    64
    65 = 3A89			score	= status+6
    66 = 3AA2			hiscore	= status+31
    67 = 3A92			sstage	= status+15
    68
    69
    70 = 3955			level_bar	= panel+40+25
    71
    72 = 3944			energy_bar	= panel+40+8
    73 = 000C			energy_len	= 12
    74 = 0009			level_len	= 9
    75
    76 = 0054			energy_up	= $54
    77 = 005D			energy_dw	= $5d
    78
    79 = 004D			energy_up_first	= $4d
    80 = 0056			energy_dw_first	= $56
    81
    82
    83 				* --------------------------------------------------------------------------------
    84
    85 = 0350			?idx	= $350		; druga po³ówka znaków nie jest u¿ywana
    86
    87 = 1350			clridx		= .get[0]<<8+?idx	; pierwsze 40 bajty dla BUFOR-a #1, drugie 40 bajty dla BUFOR-a #2
    88 = 1750			tminy		= .get[1]<<8+?idx	; pierwsze 40 bajty dla BUFOR-a #1, drugie 40 bajty dla BUFOR-a #2
    89 = 1B50			tmaxy		= .get[2]<<8+?idx	; pierwsze 40 bajty dla BUFOR-a #1, drugie 40 bajty dla BUFOR-a #2
    90
    91 = 1F50			lfillb1		= .get[3]<<8+?idx
    92 = C350			hfillb1		= .get[4]<<8+?idx
    93
    94 = C750			_lfillb1	= .get[5]<<8+?idx
    95 = CB50			_hfillb1	= .get[6]<<8+?idx
    96
    97 = CF50			lfillb2		= .get[7]<<8+?idx
    98 = E350			hfillb2		= .get[8]<<8+?idx
    99
   100 = E750			_lfillb2	= .get[9]<<8+?idx
   101 = EB50			_hfillb2	= .get[10]<<8+?idx
   102
   103 = EF50			hadr1		= .get[11]<<8+?idx
   104 = F350			hadr2		= .get[12]<<8+?idx
   105
   106 = F750			linv		= .get[13]<<8+?idx
   107 = F770			hinv		= linv+32
   108 = F790			ldrabin		= hinv+32
   109 = F7B0			hdrabin		= ldrabin+32
   110
   111 = FB50			ypath		= .get[14]<<8+?idx	; tablica z wartoœciami przyrostu pozycji pionowej Y kul
   112
   113 = FF50			ypath_4		= .get[15]<<8+?idx	; tablica z wartoœciami przyrostu pozycji pionowej Y kuli #4
   114
   115 				* --------------------------------------------------------------------------------
   116
   117 					org $0200
   118
   119 				ScoreBoard
   120
   121 = 0200			ttype	.ds mobjects	; aktualny typ kuli (0..4)
   122 = 0220			switch	.ds mobjects	; jesli wartoœæ <> 0 to pomijaj detekcjê, detekcja bêdzie mo¿liwa w nastêpnym przebiegu
   123 = 0240			posx	.ds mobjects	; pozycja pozioma kuli
   124 = 0260			addx	.ds mobjects	; wartoœæ zwiêkszaj¹ca pozycje poziom¹ X
   125 = 0280			posy	.ds mobjects	; pozycja pionowa kuli
   126 = 02A0			addy	.ds mobjects	; wartoœæ zwiêkszaj¹ca pozycjê pionow¹ Y
   127 = 02C0			maxy	.ds mobjects	; maksymalna pionowa pozycja kuli
   128
   129
   130 					org inflate_data	; $2000
   131
   132 				; Data for building trees
   133
   134 = 2000			literalSymbolCodeLength		.ds	256
   135 = 2100			controlSymbolCodeLength		.ds	CONTROL_SYMBOLS
   136
   137 				; Huffman trees
   138
   139 				nBitCode_clearFrom
   140 = 213E			nBitCode_totalCount		.ds	2*TREE_SIZE
   141 = 215E			nBitCode_literalCount		.ds	TREE_SIZE
   142 = 216E			nBitCode_controlCount		.ds	2*TREE_SIZE
   143 = 218E			nBitCode_literalOffset		.ds	TREE_SIZE
   144 = 219E			nBitCode_controlOffset		.ds	2*TREE_SIZE
   145
   146 = 21BE			codeToLiteralSymbol		.ds	256
   147 = 22BE			codeToControlSymbol		.ds	CONTROL_SYMBOLS
   148
   149
   150 					org $d800
   151
   152 = D800			scr1	.ds $400
   153 = DC00			scr2	.ds $400
   154
   155
   156 					org $00
   157
   158 = 0000			rw0	.ds 2		; zmienne RW i CH dla bohatera na znakach z PMG
   159 = 0002			rw1	.ds 2
   160 = 0004			rw2	.ds 2
   161 = 0006			rw3	.ds 2
   162 = 0008			rw4	.ds 2
   163 = 000A			rw5	.ds 2
   164 = 000C			rw6	.ds 2
   165 = 000E			rw7	.ds 2
   166 = 0010			rw8	.ds 2
   167 = 0012			rw9	.ds 2
   168 = 0014			rw10	.ds 2
   169 = 0016			rw11	.ds 2
   170 = 0018			rw12	.ds 2
   171 = 001A			rw13	.ds 2
   172 = 001C			rw14	.ds 2
   173 = 001E			rw15	.ds 2
   174 = 0020			rw16	.ds 2
   175 = 0022			rw17	.ds 2
   176 = 0024			rw18	.ds 2
   177 = 0026			rw19	.ds 2
   178 = 0028			rw20	.ds 2
   179 = 002A			rw21	.ds 2
   180 = 002C			rw22	.ds 2
   181 = 002E			rw23	.ds 2
   182 = 0030			rw24	.ds 2
   183 = 0032			rw25	.ds 2
   184 = 0034			rw26	.ds 2
   185 = 0036			rw27	.ds 2
   186 = 0038			rw28	.ds 2
   187 = 003A			rw29	.ds 2
   188 = 003C			rw30	.ds 2
   189 = 003E			rw31	.ds 2
   190
   191
   192 					org $00
   193
   194 = 0000			ln0	.ds 2
   195 = 0002			ln1	.ds 2
   196 = 0004			ln2	.ds 2
   197 = 0006			ln3	.ds 2
   198 = 0008			ln4	.ds 2
   199 = 000A			ln5	.ds 2
   200 = 000C			ln6	.ds 2
   201 = 000E			ln7	.ds 2
   202 = 0010			ln8	.ds 2
   203 = 0012			ln9	.ds 2
   204 = 0014			ln10	.ds 2
   205 = 0016			ln11	.ds 2
   206 = 0018			ln12	.ds 2
   207 = 001A			ln13	.ds 2
   208 = 001C			ln14	.ds 2
   209 = 001E			ln15	.ds 2
   210 = 0020			ln16	.ds 2
   211 = 0022			ln17	.ds 2
   212 = 0024			ln18	.ds 2
   213 = 0026			ln19	.ds 2
   214 = 0028			ln20	.ds 2
   215 = 002A			ln21	.ds 2
   216 = 002C			ln22	.ds 2
   217 = 002E			ln23	.ds 2
   218 = 0030			ln24	.ds 2
   219 = 0032			ln25	.ds 2
   220 = 0034			ln26	.ds 2
   221 = 0036			ln27	.ds 2
   222 = 0038			ln28	.ds 2
   223 = 003A			ln29	.ds 2
   224 = 003C			ln30	.ds 2
   225 = 003E			ln31	.ds 2
   226 = 0040			ln32	.ds 2
   227 = 0042			ln33	.ds 2
   228 = 0044			ln34	.ds 2
   229 = 0046			ln35	.ds 2
   230 = 0048			ln36	.ds 2
   231 = 004A			ln37	.ds 2
   232 = 004C			ln38	.ds 2
   233 = 004E			ln39	.ds 2
   234
   235 = 0050			bs0	.ds 2		; zmienne dla znaków spod BONUS-u (source)
   236 = 0052			bs1	.ds 2
   237 = 0054			bs2	.ds 2
   238 = 0056			bs3	.ds 2
   239 = 0058			bs4	.ds 2
   240 = 005A			bs5	.ds 2
   241
   242 = 005C			bd0	.ds 2		; zmienne dla znaków BONUS-u (destination)
   243 = 005E			bd1	.ds 2
   244 = 0060			bd2	.ds 2
   245 = 0062			bd3	.ds 2
   246 = 0064			bd4	.ds 2
   247 = 0066			bd5	.ds 2
   248
   249 = 0068			hr0	.ds 2
   250
   251 = 006A			hlp	.ds 2
   252 = 006C			harpun	.ds 2
   253 = 006E			dlstl	.ds 2
   254
   255 = 0070			clrHrp.min	.ds 1
   256 = 0071			clrHrp.max	.ds 1
   257
   258 = 0072			bonus.x		.ds 1
   259 = 0073			bonus.y		.ds 1
   260 = 0074			bonus.tim	.ds 1	; licznik czasu pokazywania bonus-u
   261 = 0075			bonus.typ	.ds 1	; typ bonusu 1..6
   262
   263 = 0076			height	.ds 1		; zmienne przechowuj¹ce parametry kul
   264 = 0077			idx	.ds 1
   265 = 0078			type	.ds 1
   266
   267 = 0079			frame	.ds 1
   268 = 007A			explose	.ds 1		; znacznik eksplozji = indeks do tablic obiektów
   269 = 007B			hposx	.ds 1		; pozycja pozioma bohatera
   270 = 007C			hposy	.ds 1		; pozycja pionowa bohatera
   271 = 007D			yB1old	.ds 1
   272 = 007E			yB2old	.ds 1
   273 = 007F			objects	.ds 1		; aktualna liczba przetwarzanych obiektów (wartoœæ modyfikowana dynamicznie)
   274 = 0080			wallIDX	.ds 1
   275 = 0081			wallTMP .ds 1
   276 = 0082			wallHIT	.ds 1
   277 = 0083			ymin	.ds 1
   278 = 0084			ymax	.ds 1
   279 = 0085			pmgB	.ds 1
   280 = 0086			bufor	.ds 1
   281 = 0087			joyTMP	.ds 1
   282
   283 = 0088			_posx	.ds 1		; zmienne u¿ywane podczas detekcji kolizji kul BALL_COLLISION
   284 = 0089			_posy	.ds 1
   285 = 008A			_addx	.ds 1
   286 = 008B			_addy	.ds 1
   287 = 008C			_newMAX	.ds 1
   288
   289 = 008D			rA	.ds 1
   290 = 008E			rX	.ds 1
   291 = 008F			rY	.ds 1
   292
   293 = 0090			ledder	.ds 1
   294
   295 = 0091			lbcount	.ds 1		; level balls counter	(licznik kul PANIC MODE)
   296 = 0092			lblimit	.ds 1		; level balls limit	(limit kul PANIC MODE)
   297
   298 				@harp	.struct
   299 = 0000				x	.byte
   300 = 0001				y	.byte
   301 = 0002				y_old	.byte
   302 = 0003				start	.byte
   303 = 0004				startDIV8 .byte
   304 = 0005				cnt	.byte
   305 = 0006				hook	.byte
   306 					.ends
   307
   308 				harp0	@harp
   309 				;harp1	@harp
   310
   311 = 009A			inflate_zp	.ds 10
   312
   313 = 00A4			rmt_zp	.ds 19
   314
   315 = 00B7			active	.ds mobjects	; znaczniki istnienia obiektu
   316
   317 					.print 'vzp_end: ',*
   317 				vzp_end: $00D7
   318
   319
   320 				* --------------------------------------------------------------------------------
   321
   322 					icl 'mem_detect.asm'
Source: mem_detect.asm
     1
     2 				/*--------------------------------------------------------------------------------*/
     3 				/*	MEM DETECT
     4 				/*--------------------------------------------------------------------------------*/
     4
     5
     6 				.macro	@print
     7 					jsr printf
     8 				
     9 					.rept 40
    10 					ift .get[$100+#]<>"*"
    11 				
    12 					?a=.get[$100+#] & $7f
    13 					?i=.get[$100+#] & $80
    14 				
    15 					ift ?a<=63
    16 					?a=?a+32
    17 					eli ?a<=95
    18 					?a=?a-64
    19 					eif
    20 				
    21 					ift ?i<>0
    22 					?a=?a | $80
    23 					eif
    24 				
    25 					dta ?a
    26 				
    27 					eif
    28 					.endr
    29 				
    30 					dta ?end
    31 					ift ?end=$9b
    32 					dta 0
    33 					eif
    34 				.endm
    35
    36 				.local	___loader
    37
    38 					org $0480
    39
    40 FFFF> 0480-0537> 18 68 + 	.link '\stdio\printf.obx'
    41
    42 0538				org $0600		; nowa Display List-a
    43
    44 0600-0669> 70 70 70	dl_load	dta d'ppp'
    45 0603 42 40 BC			dta $42,a($bc40)
    46 0606 02 02 02 02 02 02 + 	:23 dta 2
    47 061D 41 00 06			dta $41,a(dl_load)
    48
    49
    50 0620 20 80 04		initDe	jsr printf
    51 0623 9B 23 9B 00			dta $9b,c'#',$9b,0
    52 0627 3D 06			dta a(build+1)
    53
    54 0629 A9 2D			lda #'-'
    55 062B A2 24			ldx #36
    56 062D 9D 3C 06 CA 10 FA		sta:rpl build,x-
    57
    58 0633 20 80 04			jsr printf
    59 0636 23 9B 00			dta c'#',$9b,0
    60 0639 3D 06			dta a(build+1)
    61
    62 063B 60				rts
    63 				/*
    64 				clrMem	ldx #$a0
    65 					ldy #0
    66 					tya
    67 				clr	sta $2000,y
    68 					iny
    69 					bne clr
    70 					inc clr+2
    71 					dex
    72 					bne clr
    73
    74 					rts
    75 				*/
    75
    76 063C 2A 50 41 4E 47 20	build	dta c'*PANG '
    77 0642 9B 9B 9B 9B 9B 9B + 	:40 dta $9b
    78
    79 				;	.print *
    80
    81 02E2-02E3> 20 06			ini initDe
    82
    83 					opt h-
    84 066A FF FF 00 20 53 23 + 	ins 'detect_pang.obx'
    85
    86 					opt h+
    87 1321				org $2000
    88
    89 2000-2588> A0 00			ldy #0
    90 2002 98				tya
    91 2003 99 00 D0 C8 D0 FA		sta:rne $d000,y+
    92
    93 				;	sta lmargn
    94 2009 8D 6F 02			sta 623
    95
    96 				;	sta colcrs
    97 				;	sta rowcrs		; kursor na górze ekranu
    98
    99 200C A9 00 8D 30 02 A9 + 	mwa #dl_load 560
   100
   101 2016 A9 3E 8D 2F 02		mva #scr40 559
   102 201B 8D 00 D4			sta dmactl
   103
   104 201E 20 E6 24			jsr @mem_detect
   105
   106 2021 C9 0C			cmp #banks
   107 2023 B0 03			scs
   108 2025 4C 78 24			jmp no_mem
   109
   110 2028 20 CF 24			jsr presKey
   111
   112 202B A9 00 85 52			mva #0 lmargn
   113 202F 85 55			sta colcrs
   114 2031 85 56			sta colcrs+1
   115
   116 					.rept 24
   117 					?END=0
   119 					IFT #<>23
   120 					?END=$9B
   121 					EIF
   122 					.GET [$100] 'loading.scr',4*40+#*40,40
   123 					@PRINT
   124 					.endr
Source: REPT
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 2033				.GET [$100] 'loading.scr',4*40+#*40,40
   117 2033				@PRINT
     1 2033 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2036 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2037 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2038 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2039 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 203A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 203B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 203C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 203D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 203E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 203F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2040 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2041 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2042 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2043 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2044 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2045 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2046 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2047 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2048 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2049 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 204A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 204B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 204C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 204D 20				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 204E 09				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 204F 95				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 2050 95				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 2051 95				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 2052 19				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2053 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2054 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2055 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2056 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2057 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2058 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2059 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 205A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 205B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 205C 20				DTA ?A
    24 205D 9B				dta ?end
    26 205E 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 205F				.GET [$100] 'loading.scr',4*40+#*40,40
   117 205F				@PRINT
     1 205F 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2062 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2063 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2064 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2065 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2066 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2067 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2068 20				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 2069 09				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 206A 15				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 206B 95				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 206C 95				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 206D 95				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 206E 15				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 206F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2070 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2071 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2072 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2073 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2074 20				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2075 15				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2076 15				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2077 15				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 2078 0F				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2079 20				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 207A 0F				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 207B 8C				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 207C 89				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 207D 19				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 207E 0C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 207F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2080 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2081 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2082 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2083 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2084 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2085 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2086 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2087 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2088 20				DTA ?A
    24 2089 9B				dta ?end
    26 208A 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 208B				.GET [$100] 'loading.scr',4*40+#*40,40
   117 208B				@PRINT
     1 208B 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 208E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 208F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2090 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2091 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2092 20				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 2093 09				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 2094 0B				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 2095 09				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2096 15				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 2097 89				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 2098 89				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 = 008F				?A=?A | $80
     4 2099 8F				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 209A 15				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 209B 09				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 209C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 209D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 209E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 209F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20A0 20				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 20A1 0C				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 20A2 15				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 20A3 15				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 20A4 99				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 20A5 09				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 20A6 0C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20A7 A0				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 20A8 8C				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 20A9 09				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 20AA 0C				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 20AB 09				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20AC 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20AD 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20AE 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20AF 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20B0 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20B1 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20B2 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20B3 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20B4 20				DTA ?A
    24 20B5 9B				dta ?end
    26 20B6 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 20B7				.GET [$100] 'loading.scr',4*40+#*40,40
   117 20B7				@PRINT
     1 20B7 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20BA 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20BB 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20BC 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20BD 20				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 20BE 09				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 20BF 09				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 20C0 8C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20C1 A0				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 20C2 8C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20C3 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20C4 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20C5 A0				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 20C6 8C				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 20C7 8B				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 20C8 0C				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 20C9 0C				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 20CA 95				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 20CB 09				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20CC 20				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 20CD 19				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 20CE 8B				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 20CF 8C				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 20D0 19				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 20D1 89				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 20D2 99				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20D3 A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 20D4 19				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 20D5 95				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 20D6 0C				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 20D7 0C				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 20D8 8B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20D9 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20DA 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20DB 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20DC 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20DD 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20DE 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20DF 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20E0 20				DTA ?A
    24 20E1 9B				dta ?end
    26 20E2 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 20E3				.GET [$100] 'loading.scr',4*40+#*40,40
   117 20E3				@PRINT
     1 20E3 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20E6 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20E7 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20E8 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 20E9 20				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 20EA 19				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20EB A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20EC A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20ED A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20EE A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20EF A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20F0 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20F1 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20F2 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20F3 A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 20F4 09				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 20F5 89				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 = 008F				?A=?A | $80
     4 20F6 8F				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 20F7 0F				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 20F8 0F				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 20F9 0F				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20FA A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20FB A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20FC A0				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 20FD 0B				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 20FE 8C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 20FF A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 2100 09				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2101 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2102 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2103 A0				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2104 15				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 2105 0B				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2106 15				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 2107 0C				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 2108 0C				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 = 008F				?A=?A | $80
     4 2109 8F				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 210A 0C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 210B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 210C 20				DTA ?A
    24 210D 9B				dta ?end
    26 210E 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 210F				.GET [$100] 'loading.scr',4*40+#*40,40
   117 210F				@PRINT
     1 210F 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2112 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2113 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2114 20				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 2115 19				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 2116 99				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2117 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2118 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2119 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 211A A0				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 211B 95				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 = 008F				?A=?A | $80
     4 211C 8F				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 211D A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 211E A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 211F A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 2120 99				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2121 A0				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 2122 8B				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 2123 19				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 2124 8C				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 2125 09				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2126 A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 2127 19				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 = 008F				?A=?A | $80
     4 2128 8F				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 2129 8B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 212A A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 212B 89				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 212C 8C				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 212D 0C				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 212E 0B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 212F A0				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 2130 8B				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 2131 19				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2132 15				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2133 A0				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 2134 0C				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 2135 0C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2136 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2137 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2138 20				DTA ?A
    24 2139 9B				dta ?end
    26 213A 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 213B				.GET [$100] 'loading.scr',4*40+#*40,40
   117 213B				@PRINT
     1 213B 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 213E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 213F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2140 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2141 20				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 2142 0C				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 2143 0F				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2144 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2145 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2146 A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 2147 19				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 2148 8C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2149 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 214A A0				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 214B 0C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 214C A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 214D 89				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 = 008F				?A=?A | $80
     4 214E 8F				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 214F A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 2150 09				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 2151 99				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2152 A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 2153 19				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2154 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2155 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2156 A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 2157 19				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 2158 09				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2159 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 215A A0				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 215B 15				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 215C 15				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 215D 15				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 215E A0				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 215F 0C				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 2160 8B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2161 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2162 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2163 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2164 20				DTA ?A
    24 2165 9B				dta ?end
    26 2166 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 2167				.GET [$100] 'loading.scr',4*40+#*40,40
   117 2167				@PRINT
     1 2167 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 216A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 216B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 216C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 216D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 216E 20				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 216F 0B				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 2170 99				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2171 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2172 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2173 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2174 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2175 A0				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 2176 0C				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 2177 8C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2178 A0				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 2179 8B				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 217A 8C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 217B A0				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 217C 0F				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 217D 99				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 217E A0				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 217F 0C				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 2180 0C				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 2181 0B				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 2182 95				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 2183 8C				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 2184 99				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 2185 09				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2186 15				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2187 15				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2188 15				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 2189 0F				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 218A A0				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 218B 8B				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 218C 0F				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 218D 95				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 218E 0F				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 218F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2190 20				DTA ?A
    24 2191 9B				dta ?end
    26 2192 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 2193				.GET [$100] 'loading.scr',4*40+#*40,40
   117 2193				@PRINT
     1 2193 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2196 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2197 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2198 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2199 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 219A 20				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 219B 0B				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 219C 99				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 219D A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 219E A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 219F A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 21A0 89				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 21A1 0C				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 21A2 09				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21A3 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21A4 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21A5 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21A6 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21A7 A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 21A8 19				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 21A9 99				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 21AA 89				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21AB 20				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 = 008F				?A=?A | $80
     4 21AC 8F				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 21AD 0F				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 21AE 99				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21AF A0				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 21B0 0F				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 21B1 0B				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 21B2 95				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 21B3 8B				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 21B4 99				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 21B5 0C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21B6 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21B7 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21B8 A0				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 21B9 8B				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 21BA 0F				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 21BB 0C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21BC 20				DTA ?A
    24 21BD 9B				dta ?end
    26 21BE 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 21BF				.GET [$100] 'loading.scr',4*40+#*40,40
   117 21BF				@PRINT
     1 21BF 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21C2 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21C3 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21C4 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21C5 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21C6 20				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 21C7 0B				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 21C8 0B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21C9 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21CA A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21CB A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 21CC 99				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 21CD 09				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 21CE 99				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21CF A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 21D0 89				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21D1 20				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 21D2 99				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 21D3 89				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 21D4 0C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21D5 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21D6 20				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 21D7 0B				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 21D8 0B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21D9 A0				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 21DA 0B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21DB A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21DC A0				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 = 008B				?A=?A | $80
     4 21DD 8B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21DE A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21DF A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 21E0 89				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 21E1 8C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21E2 A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 21E3 89				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 21E4 95				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 21E5 15				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21E6 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21E7 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21E8 20				DTA ?A
    24 21E9 9B				dta ?end
    26 21EA 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 21EB				.GET [$100] 'loading.scr',4*40+#*40,40
   117 21EB				@PRINT
     1 21EB 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21EE 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21EF 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21F0 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21F1 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21F2 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21F3 20				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 21F4 0C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21F5 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21F6 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21F7 A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 21F8 19				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 21F9 0F				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21FA A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 21FB A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 21FC 19				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21FD 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21FE 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 21FF 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2200 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2201 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2202 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2203 20				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 2204 0C				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 = 008F				?A=?A | $80
     4 2205 8F				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2206 A0				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2207 15				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 2208 95				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 2209 95				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 220A 95				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 220B 0C				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 220C 8C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 220D A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 220E A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 220F A0				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 2210 0B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2211 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2212 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2213 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2214 20				DTA ?A
    24 2215 9B				dta ?end
    26 2216 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 2217				.GET [$100] 'loading.scr',4*40+#*40,40
   117 2217				@PRINT
     1 2217 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 221A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 221B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 221C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 221D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 221E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 221F 20				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 2220 0C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2221 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2222 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2223 A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 2224 19				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2225 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2226 A0				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 2227 95				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2228 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2229 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 222A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 222B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 222C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 222D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 222E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 222F 20				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 2230 0F				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 = 008C				?A=?A | $80
     4 2231 8C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2232 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2233 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2234 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2235 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2236 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2237 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2238 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2239 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 223A A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 223B A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 223C 19				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 223D 19				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 223E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 223F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2240 20				DTA ?A
    24 2241 9B				dta ?end
    26 2242 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 2243				.GET [$100] 'loading.scr',4*40+#*40,40
   117 2243				@PRINT
     1 2243 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2246 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2247 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2248 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2249 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 224A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 224B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 224C 20				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 224D 99				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 224E 95				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 224F 0C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2250 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2251 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2252 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2253 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2254 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2255 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2256 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2257 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2258 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2259 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 225A 20				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 225B 09				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 225C 09				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 225D A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 225E A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 225F 89				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2260 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2261 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2262 A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 2263 89				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 2264 0B				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 2265 95				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2266 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2267 A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 2268 A0				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 2269 0B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 226A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 226B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 226C 20				DTA ?A
    24 226D 9B				dta ?end
    26 226E 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 226F				.GET [$100] 'loading.scr',4*40+#*40,40
   117 226F				@PRINT
     1 226F 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2272 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2273 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2274 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2275 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2276 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2277 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2278 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2279 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 227A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 227B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 227C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 227D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 227E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 227F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2280 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2281 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2282 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2283 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2284 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2285 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2286 20				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 2287 0B				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 = 0099				?A=?A | $80
     4 2288 99				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 2289 89				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 228A 0C				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 228B 15				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 228C 0B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 228D A0				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 228E A0				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 228F 19				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 = 0089				?A=?A | $80
     4 2290 89				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 2291 0B				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 2292 0F				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 2293 15				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 2294 95				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 2295 0C				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 2296 19				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2297 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2298 20				DTA ?A
    24 2299 9B				dta ?end
    26 229A 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 229B				.GET [$100] 'loading.scr',4*40+#*40,40
   117 229B				@PRINT
     1 229B 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 229E 20				DTA ?A
     4 = 002A				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004A				?A=?A+32
     4 229F 4A				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 22A0 4F				DTA ?A
     4 = 0039				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0059				?A=?A+32
     4 22A1 59				DTA ?A
     4 = 0033				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0053				?A=?A+32
     4 22A2 53				DTA ?A
     4 = 0034				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0054				?A=?A+32
     4 22A3 54				DTA ?A
     4 = 0029				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0049				?A=?A+32
     4 22A4 49				DTA ?A
     4 = 0023				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0043				?A=?A+32
     4 22A5 43				DTA ?A
     4 = 002B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004B				?A=?A+32
     4 22A6 4B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22A7 20				DTA ?A
     4 = 005B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 001B				?A=?A-64
     4 22A8 1B				DTA ?A
     4 = 005C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 001C				?A=?A-64
     4 22A9 1C				DTA ?A
     4 = 005B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 001B				?A=?A-64
     4 22AA 1B				DTA ?A
     4 = 005D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 001D				?A=?A-64
     4 22AB 1D				DTA ?A
     4 = 005B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 001B				?A=?A-64
     4 22AC 1B				DTA ?A
     4 = 005E				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 001E				?A=?A-64
     4 22AD 1E				DTA ?A
     4 = 005B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 001B				?A=?A-64
     4 22AE 1B				DTA ?A
     4 = 005F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 001F				?A=?A-64
     4 22AF 1F				DTA ?A
     4 = 000C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002C				?A=?A+32
     4 22B0 2C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22B1 20				DTA ?A
     4 = 0026				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0046				?A=?A+32
     4 22B2 46				DTA ?A
     4 = 0029				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0049				?A=?A+32
     4 22B3 49				DTA ?A
     4 = 0032				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0052				?A=?A+32
     4 22B4 52				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 22B5 45				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22B6 20				DTA ?A
     4 = 0059				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0019				?A=?A-64
     4 22B7 19				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 22B8 0C				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 22B9 0F				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 22BA 95				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22BB 20				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 22BC 0C				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 22BD 0B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 = 00A0				?A=?A | $80
     4 22BE A0				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 22BF 09				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22C0 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22C1 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22C2 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22C3 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22C4 20				DTA ?A
    24 22C5 9B				dta ?end
    26 22C6 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 22C7				.GET [$100] 'loading.scr',4*40+#*40,40
   117 22C7				@PRINT
     1 22C7 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22CA 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22CB 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22CC 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22CD 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22CE 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22CF 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22D0 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22D1 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22D2 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22D3 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22D4 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22D5 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22D6 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22D7 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22D8 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22D9 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22DA 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22DB 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22DC 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22DD 20				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 22DE 09				DTA ?A
     4 = 0055				?A=.GET[$100+#] & $7F
     4 = 0080				?I=.GET[$100+#] & $80
     4 = 0015				?A=?A-64
     4 = 0095				?A=?A | $80
     4 22DF 95				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22E0 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22E1 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22E2 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22E3 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22E4 20				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 22E5 0C				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 22E6 0B				DTA ?A
     4 = 0049				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0009				?A=?A-64
     4 22E7 09				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22E8 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22E9 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22EA 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22EB 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22EC 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22ED 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22EE 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22EF 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22F0 20				DTA ?A
    24 22F1 9B				dta ?end
    26 22F2 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 22F3				.GET [$100] 'loading.scr',4*40+#*40,40
   117 22F3				@PRINT
     1 22F3 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22F6 20				DTA ?A
     4 = 002B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004B				?A=?A+32
     4 22F7 4B				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 22F8 45				DTA ?A
     4 = 0039				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0059				?A=?A+32
     4 22F9 59				DTA ?A
     4 = 0022				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0042				?A=?A+32
     4 22FA 42				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 22FB 4F				DTA ?A
     4 = 0021				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0041				?A=?A+32
     4 22FC 41				DTA ?A
     4 = 0032				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0052				?A=?A+32
     4 22FD 52				DTA ?A
     4 = 0024				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0044				?A=?A+32
     4 22FE 44				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 22FF 20				DTA ?A
     4 = 0021				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0041				?A=?A+32
     4 2300 41				DTA ?A
     4 = 000F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002F				?A=?A+32
     4 2301 2F				DTA ?A
     4 = 0024				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0044				?A=?A+32
     4 2302 44				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2303 20				DTA ?A
     4 = 000D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002D				?A=?A+32
     4 2304 2D				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2305 20				DTA ?A
     4 = 002C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004C				?A=?A+32
     4 2306 4C				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 2307 45				DTA ?A
     4 = 0026				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0046				?A=?A+32
     4 2308 46				DTA ?A
     4 = 0034				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0054				?A=?A+32
     4 2309 54				DTA ?A
     4 = 000F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002F				?A=?A+32
     4 230A 2F				DTA ?A
     4 = 0032				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0052				?A=?A+32
     4 230B 52				DTA ?A
     4 = 0029				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0049				?A=?A+32
     4 230C 49				DTA ?A
     4 = 0027				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0047				?A=?A+32
     4 230D 47				DTA ?A
     4 = 0028				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0048				?A=?A+32
     4 230E 48				DTA ?A
     4 = 0034				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0054				?A=?A+32
     4 230F 54				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2310 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2311 20				DTA ?A
     4 = 004C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000C				?A=?A-64
     4 2312 0C				DTA ?A
     4 = 004F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000F				?A=?A-64
     4 2313 0F				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2314 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2315 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2316 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2317 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2318 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2319 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 231A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 231B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 231C 20				DTA ?A
    24 231D 9B				dta ?end
    26 231E 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 231F				.GET [$100] 'loading.scr',4*40+#*40,40
   117 231F				@PRINT
     1 231F 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2322 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2323 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2324 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2325 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2326 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2327 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2328 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2329 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 232A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 232B 20				DTA ?A
     4 = 0037				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0057				?A=?A+32
     4 232C 57				DTA ?A
     4 = 000F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002F				?A=?A+32
     4 232D 2F				DTA ?A
     4 = 0033				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0053				?A=?A+32
     4 232E 53				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 232F 20				DTA ?A
     4 = 000D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002D				?A=?A+32
     4 2330 2D				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2331 20				DTA ?A
     4 = 0035				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0055				?A=?A+32
     4 2332 55				DTA ?A
     4 = 0030				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0050				?A=?A+32
     4 2333 50				DTA ?A
     4 = 000F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002F				?A=?A+32
     4 2334 2F				DTA ?A
     4 = 0024				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0044				?A=?A+32
     4 2335 44				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 2336 4F				DTA ?A
     4 = 0037				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0057				?A=?A+32
     4 2337 57				DTA ?A
     4 = 002E				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004E				?A=?A+32
     4 2338 4E				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2339 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 233A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 233B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 233C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 233D 20				DTA ?A
     4 = 004B				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 000B				?A=?A-64
     4 233E 0B				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 233F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2340 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2341 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2342 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2343 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2344 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2345 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2346 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2347 20				DTA ?A
    24 2348 9B				dta ?end
    26 2349 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 234A				.GET [$100] 'loading.scr',4*40+#*40,40
   117 234A				@PRINT
     1 234A 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 234D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 234E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 234F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2350 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2351 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2352 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2353 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2354 20				DTA ?A
     4 = 0033				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0053				?A=?A+32
     4 2355 53				DTA ?A
     4 = 0028				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0048				?A=?A+32
     4 2356 48				DTA ?A
     4 = 0029				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0049				?A=?A+32
     4 2357 49				DTA ?A
     4 = 0026				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0046				?A=?A+32
     4 2358 46				DTA ?A
     4 = 0034				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0054				?A=?A+32
     4 2359 54				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 235A 20				DTA ?A
     4 = 000D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002D				?A=?A+32
     4 235B 2D				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 235C 20				DTA ?A
     4 = 0026				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0046				?A=?A+32
     4 235D 46				DTA ?A
     4 = 0029				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0049				?A=?A+32
     4 235E 49				DTA ?A
     4 = 0032				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0052				?A=?A+32
     4 235F 52				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 2360 45				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2361 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2362 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2363 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2364 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2365 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2366 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2367 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2368 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2369 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 236A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 236B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 236C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 236D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 236E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 236F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2370 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2371 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2372 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2373 20				DTA ?A
    24 2374 9B				dta ?end
    26 2375 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 2376				.GET [$100] 'loading.scr',4*40+#*40,40
   117 2376				@PRINT
     1 2376 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2379 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 237A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 237B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 237C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 237D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 237E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 237F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2380 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2381 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2382 20				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 2383 45				DTA ?A
     4 = 0033				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0053				?A=?A+32
     4 2384 53				DTA ?A
     4 = 0023				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0043				?A=?A+32
     4 2385 43				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2386 20				DTA ?A
     4 = 000D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002D				?A=?A+32
     4 2387 2D				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2388 20				DTA ?A
     4 = 0032				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0052				?A=?A+32
     4 2389 52				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 238A 45				DTA ?A
     4 = 0033				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0053				?A=?A+32
     4 238B 53				DTA ?A
     4 = 0034				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0054				?A=?A+32
     4 238C 54				DTA ?A
     4 = 0021				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0041				?A=?A+32
     4 238D 41				DTA ?A
     4 = 0032				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0052				?A=?A+32
     4 238E 52				DTA ?A
     4 = 0034				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0054				?A=?A+32
     4 238F 54				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2390 20				DTA ?A
     4 = 002C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004C				?A=?A+32
     4 2391 4C				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 2392 45				DTA ?A
     4 = 0036				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0056				?A=?A+32
     4 2393 56				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 2394 45				DTA ?A
     4 = 002C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004C				?A=?A+32
     4 2395 4C				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2396 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2397 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2398 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2399 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 239A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 239B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 239C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 239D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 239E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 239F 20				DTA ?A
    24 23A0 9B				dta ?end
    26 23A1 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 23A2				.GET [$100] 'loading.scr',4*40+#*40,40
   117 23A2				@PRINT
     1 23A2 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23A5 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23A6 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23A7 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23A8 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23A9 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23AA 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23AB 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23AC 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23AD 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23AE 20				DTA ?A
     4 = 0036				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0056				?A=?A+32
     4 23AF 56				DTA ?A
     4 = 000F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002F				?A=?A+32
     4 23B0 2F				DTA ?A
     4 = 0022				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0042				?A=?A+32
     4 23B1 42				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23B2 20				DTA ?A
     4 = 000D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002D				?A=?A+32
     4 23B3 2D				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23B4 20				DTA ?A
     4 = 0033				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0053				?A=?A+32
     4 23B5 53				DTA ?A
     4 = 0026				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0046				?A=?A+32
     4 23B6 46				DTA ?A
     4 = 0038				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0058				?A=?A+32
     4 23B7 58				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23B8 20				DTA ?A
     4 = 0036				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0056				?A=?A+32
     4 23B9 56				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 23BA 4F				DTA ?A
     4 = 002C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004C				?A=?A+32
     4 23BB 4C				DTA ?A
     4 = 0035				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0055				?A=?A+32
     4 23BC 55				DTA ?A
     4 = 002D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004D				?A=?A+32
     4 23BD 4D				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 23BE 45				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23BF 20				DTA ?A
     4 = 0035				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0055				?A=?A+32
     4 23C0 55				DTA ?A
     4 = 0030				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0050				?A=?A+32
     4 23C1 50				DTA ?A
     4 = 000F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002F				?A=?A+32
     4 23C2 2F				DTA ?A
     4 = 0024				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0044				?A=?A+32
     4 23C3 44				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 23C4 4F				DTA ?A
     4 = 0037				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0057				?A=?A+32
     4 23C5 57				DTA ?A
     4 = 002E				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004E				?A=?A+32
     4 23C6 4E				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23C7 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23C8 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23C9 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23CA 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23CB 20				DTA ?A
    24 23CC 9B				dta ?end
    26 23CD 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 23CE				.GET [$100] 'loading.scr',4*40+#*40,40
   117 23CE				@PRINT
     1 23CE 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23D1 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23D2 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23D3 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23D4 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23D5 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23D6 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23D7 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23D8 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23D9 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23DA 20				DTA ?A
     4 = 002E				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004E				?A=?A+32
     4 23DB 4E				DTA ?A
     4 = 000F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002F				?A=?A+32
     4 23DC 2F				DTA ?A
     4 = 002D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004D				?A=?A+32
     4 23DD 4D				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23DE 20				DTA ?A
     4 = 000D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002D				?A=?A+32
     4 23DF 2D				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23E0 20				DTA ?A
     4 = 002D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004D				?A=?A+32
     4 23E1 4D				DTA ?A
     4 = 0033				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0053				?A=?A+32
     4 23E2 53				DTA ?A
     4 = 0038				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0058				?A=?A+32
     4 23E3 58				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23E4 20				DTA ?A
     4 = 0036				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0056				?A=?A+32
     4 23E5 56				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 23E6 4F				DTA ?A
     4 = 002C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004C				?A=?A+32
     4 23E7 4C				DTA ?A
     4 = 0035				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0055				?A=?A+32
     4 23E8 55				DTA ?A
     4 = 002D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004D				?A=?A+32
     4 23E9 4D				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 23EA 45				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23EB 20				DTA ?A
     4 = 0035				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0055				?A=?A+32
     4 23EC 55				DTA ?A
     4 = 0030				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0050				?A=?A+32
     4 23ED 50				DTA ?A
     4 = 000F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002F				?A=?A+32
     4 23EE 2F				DTA ?A
     4 = 0024				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0044				?A=?A+32
     4 23EF 44				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 23F0 4F				DTA ?A
     4 = 0037				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0057				?A=?A+32
     4 23F1 57				DTA ?A
     4 = 002E				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004E				?A=?A+32
     4 23F2 4E				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23F3 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23F4 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23F5 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23F6 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23F7 20				DTA ?A
    24 23F8 9B				dta ?end
    26 23F9 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 = 009B				?END=$9B
   117 					EIF
   117 23FA				.GET [$100] 'loading.scr',4*40+#*40,40
   117 23FA				@PRINT
     1 23FA 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23FD 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23FE 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 23FF 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2400 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2401 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2402 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2403 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2404 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2405 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2406 20				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 2407 4F				DTA ?A
     4 = 000F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002F				?A=?A+32
     4 2408 2F				DTA ?A
     4 = 0030				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0050				?A=?A+32
     4 2409 50				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 240A 20				DTA ?A
     4 = 000D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002D				?A=?A+32
     4 240B 2D				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 240C 20				DTA ?A
     4 = 0033				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0053				?A=?A+32
     4 240D 53				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 240E 4F				DTA ?A
     4 = 0035				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0055				?A=?A+32
     4 240F 55				DTA ?A
     4 = 002E				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004E				?A=?A+32
     4 2410 4E				DTA ?A
     4 = 0024				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0044				?A=?A+32
     4 2411 44				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2412 20				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 2413 4F				DTA ?A
     4 = 002E				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004E				?A=?A+32
     4 2414 4E				DTA ?A
     4 = 000F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002F				?A=?A+32
     4 2415 2F				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 2416 4F				DTA ?A
     4 = 0026				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0046				?A=?A+32
     4 2417 46				DTA ?A
     4 = 0026				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0046				?A=?A+32
     4 2418 46				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2419 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 241A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 241B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 241C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 241D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 241E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 241F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2420 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2421 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2422 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2423 20				DTA ?A
    24 2424 9B				dta ?end
    26 2425 00				dta 0
   117 = 0000				?END=0
   117 					IFT #<>23
   117 					?END=$9B
   117 					EIF
   117 2426				.GET [$100] 'loading.scr',4*40+#*40,40
   117 2426				@PRINT
     1 2426 20 80 04			jsr printf
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2429 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 242A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 242B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 242C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 242D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 242E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 242F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2430 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2431 20				DTA ?A
     4 = 0028				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0048				?A=?A+32
     4 2432 48				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 2433 45				DTA ?A
     4 = 002C				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004C				?A=?A+32
     4 2434 4C				DTA ?A
     4 = 0030				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0050				?A=?A+32
     4 2435 50				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2436 20				DTA ?A
     4 = 000D				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 002D				?A=?A+32
     4 2437 2D				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2438 20				DTA ?A
     4 = 0028				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0048				?A=?A+32
     4 2439 48				DTA ?A
     4 = 0029				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0049				?A=?A+32
     4 243A 49				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 243B 20				DTA ?A
     4 = 0033				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0053				?A=?A+32
     4 243C 53				DTA ?A
     4 = 0023				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0043				?A=?A+32
     4 243D 43				DTA ?A
     4 = 002F				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 004F				?A=?A+32
     4 243E 4F				DTA ?A
     4 = 0032				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0052				?A=?A+32
     4 243F 52				DTA ?A
     4 = 0025				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0045				?A=?A+32
     4 2440 45				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2441 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2442 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2443 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2444 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2445 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2446 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2447 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2448 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2449 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 244A 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 244B 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 244C 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 244D 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 244E 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 244F 20				DTA ?A
     4 = 0000				?A=.GET[$100+#] & $7F
     4 = 0000				?I=.GET[$100+#] & $80
     4 = 0020				?A=?A+32
     4 2450 20				DTA ?A
    24 2451 00				dta ?end
Source: mem_detect.asm
   125
   126 2452 A9 FF 8D 01 D3		mva #$ff portb
   127
   128 2457 60				rts
   129
   130 2458			kwait
   131 2458 AD 1F D0			lda consol		; START
   132 245B 29 01			and #1
   133 245D F0 13			beq i_stop
   134 245F AD 10 D0			lda trig0		; FIRE
   135 2462 F0 0E			beq i_stop
   136
   137 2464 AD 0F D2			lda $d20f
   138 2467 29 08			and #8
   139 2469 F0 07			beq i_stop
   140
   141 246B AD 0F D2			lda $d20f
   142 246E 29 04			and #4
   143 2470 D0 E6			bne kwait
   144
   145 2472 A9 FF 8D FC 02	i_stop	mva #$ff 764
   146
   147 2477 60				rts
   148
   149 2478			no_mem
   150 				;	mva #23 rowcrs
   151 				;
   152 				;	jsr printf
   153 				;	dta $9b,$9b,0
   154
   155 2478 20 80 04			jsr printf
   156 247B 9B 9B 50 41 4E 47 + 	dta $9b,$9b,c'PANG required 192 kB extended memory',$9b
   157 24A2 2D 2D 2D 2D 2D 2D + 	:36 dta c'-'
   158 24C6 00				dta 0
   159
   160 				;	mva #2 colcrs
   161
   162 24C7 20 CF 24			jsr presKey
   163
   164 24CA 68				pla
   165 24CB 68				pla
   166
   167 24CC 6C 0A 00			jmp ($a)
   168
   169 24CF 20 80 04		presKey	jsr printf
   170 24D2 9B 9B 50 72 65 73 + 	dta $9b,$9b,c'Press any key',$9b,0
   171
   172 24E3 4C 58 24			jmp kwait
   173
   174 24E6				icl 'proc\@mem_detect.asm'
Source: @mem_detect.asm
     1
     2 				/*
     3 				  Detekcja pamiêci dodatkowej
     4
     5 				  Program na podstawie dopuszczalnych kodów banków dBANK sprawdza obecnoœæ rozszerzenia pamiêci
     6 				  i zapisuje od adresu @TAB_MEM_BANKS+1 znalezione banki. Sposób testowania wyklucza mo¿liwoœæ zdublowania
     7 				  któregokolwiek banku pamiêci dodatkowej.
     8
     9 				  Pierwszym wpisem w tablicy @TAB_MEM_BANKS jest wartoœæ $FF, jest to kod banku numer 0 w pamiêci podstawowej.
    10 				  Maksymalnie tablica z odnalezionymi bankami pamiêci mo¿e zawieraæ 65 wpisów !!! (dla 1MB dodatkowej pamiêci).
    11
    12 				  Liczba odnalezionych banków zwracana jest w rejestrze akumulatora A.
    13
    14 				  ostatnie zmiany: 14.03.2007
    15 				*/
    15
    16
    17
    18 24E6			.proc   @MEM_DETECT
    19
    20 = 0040			MAX_BANKS = 64		; maksymalna liczba banków pamiêci
    21
    22 = D301			PORTB	  = $D301
    23
    24
    25 				* zapamiêtamy bajty spod adresu $7FFF w tablicy dSAFE
    26
    27 24E6 AD FF 7F			LDA $7FFF	; bajt z pamiêci podstawowej
    28 24E9 8D 43 25			STA TEMP
    29
    30
    31 24EC A2 3F		        LDX #MAX_BANKS-1
    32
    33 24EE BD 49 25		_s1     LDA dBANK,X
    34 24F1 8D 01 D3		        STA PORTB
    35
    36 24F4 AD FF 7F		        LDA $7FFF
    37 24F7 9D 89 25		        STA dSAFE,X
    38
    39 24FA CA			        DEX
    40 24FB 10 F1		        BPL _s1
    41
    42 				* w ka¿dym z banków pod adresem $7FFF zapisujemy kod banku
    43
    44 24FD A2 3F		        LDX #MAX_BANKS-1
    45
    46 24FF BD 49 25		_s2     LDA dBANK,X
    47 2502 8D 01 D3		        STA PORTB
    48
    49 2505 8D FF 7F		        STA $7FFF
    50
    51 2508 CA			        DEX
    52 2509 10 F4		        BPL _s2
    53
    54 				* wracamy do pamiêci podstawowej, tutaj pod $7FFF zapisujemy wartoœæ $FF
    55
    56 250B A9 FF			LDA #$FF
    57 250D 8D 01 D3			STA PORTB
    58
    59 2510 8D FF 7F			STA $7FFF
    60
    61 2513 8D 00 01			STA @TAB_MEM_BANKS		; pierwszy wpis w @TAB_MEM_BANKS = $FF
    62
    63 				* sprawdzamy obecnoœæ banków dodatkowej pamiêci
    64 				* wykryte banki zapisujemy od adresu @TAB_MEM_BANKS+1
    65 				* rejestr Y zlicza znalezione banki pamiêci
    66
    67 2516 A0 00			LDY #0
    68
    69 2518 A2 3F		        LDX #MAX_BANKS-1
    70
    71 251A BD 49 25		LOP	LDA dBANK,X
    72 251D 8D 01 D3		        STA PORTB
    73
    74 2520 CD FF 7F		        CMP $7FFF
    75 2523 D0 04		        BNE SKP
    76
    77 2525 99 01 01			STA @TAB_MEM_BANKS+1,Y
    78 2528 C8			        INY
    79 2529			SKP
    80 2529 CA			        DEX
    81 252A 10 EE		        BPL LOP
    82
    83 				* przywracamy bajty z tablicy dSAFE pod adres $7FFF
    84
    85 252C A2 3F		        LDX #MAX_BANKS-1
    86
    87 252E BD 49 25		_r3     LDA dBANK,X
    88 2531 8D 01 D3		        STA PORTB
    89
    90 2534 BD 89 25		        LDA dSAFE,X
    91 2537 8D FF 7F		        STA $7FFF
    92
    93 253A CA			        DEX
    94 253B 10 F1		        BPL _r3
    95
    96 				* koñczymy, przywracaj¹c pamiêæ podstawow¹
    97
    98 253D A9 FF		        LDA #$FF
    99 253F 8D 01 D3		        STA PORTB
   100
   101 2542 A9 00			LDA #0		; przywracamy star¹ zawartoœæ komórki pamiêci spod adresu $7FFF w pamiêci podstawowej
   102 = 2543			TEMP	EQU *-1
   103 2544 8D FF 7F			STA $7FFF
   104
   105 2547 98				TYA		; w regA liczba odnalezionych banków dodatkowej pamiêci
   106
   107 2548 60			        RTS
   108
   109 				* tablica dBANK zawiera dopuszczalne kody dla PORTB w³¹czaj¹ce banki
   110
   111 2549 E3 C3 A3 83 63 43 + dBANK   DTA B($E3),B($C3),B($A3),B($83),B($63),B($43),B($23),B($03)
   112 2551 E7 C7 A7 87 67 47 +         DTA B($E7),B($C7),B($A7),B($87),B($67),B($47),B($27),B($07)
   113 2559 EB CB AB 8B 6B 4B +         DTA B($EB),B($CB),B($AB),B($8B),B($6B),B($4B),B($2B),B($0B)
   114 2561 EF CF AF 8F 6F 4F +         DTA B($EF),B($CF),B($AF),B($8F),B($6F),B($4F),B($2F),B($0F)
   115
   116 2569 ED CD AD 8D 6D 4D +         DTA B($ED),B($CD),B($AD),B($8D),B($6D),B($4D),B($2D),B($0D)
   117 2571 E9 C9 A9 89 69 49 +         DTA B($E9),B($C9),B($A9),B($89),B($69),B($49),B($29),B($09)
   118 2579 E5 C5 A5 85 65 45 +         DTA B($E5),B($C5),B($A5),B($85),B($65),B($45),B($25),B($05)
   119 2581 E1 C1 A1 81 61 41 +         DTA B($E1),B($C1),B($A1),B($81),B($61),B($41),B($21),B($01)
   120
   121 = 2589			dSAFE	.ds MAX_BANKS
   122
   123 				.endp
   175
   176 				;	org $bc40
   177 				;	ins 'loading.scr',4*40,24*40
   178
   179 02E2-02E3> 00 20			ini $2000
   180 				.endl
   323
   324
   325 				; ---	BANK SENSITIVE
   326
   327 					opt b+
   328
   329 				/***************************  BANK #1  ***************************/
   330
   331 					LMB #1
   331 01,25C9			@BANK_ADD 'L'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 01,25C9			 org @PROC_ADD_BANK
    28 01,2000-2006> AD 01 01	 lda @TAB_MEM_BANKS+(=*)
    29 01,2003 8D 01 D3		 sta $d301
    30 01,2006 60		 rts
    32 01,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 01,2007			   org $4000
Source: pang_chars.asm
   332
   333 01,4000-7D86> CC 60 DC + 	.link 'frm_left.obx'	// !!! KONIECZNIE OD POCZ¥TKU STRONY PAMIÊCI !!!
   334
   335 01,7421 ED 57 4D 6F E3 + intro_kulki	ins 'title_2/kulki.df7'
   336
   337 01,7D7C 00 00 03 01 01 + lvl0		ins 'panic.lev'
   338
   339 					.print 'BANK #1 (FRM_LEFT, INTRO_KULKI): $4000..',*,', free: ',$8000-*
   339 				BANK #1 (FRM_LEFT, INTRO_KULKI): $4000..$7D87, free: $0279
   340
   341
   342 				/***************************  BANK #2  ***************************/
   343
   344 					NMB
   344 02,7D87			@BANK_ADD 'N'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 02,7D87			 org @PROC_ADD_BANK
    28 02,2000-2006> AD 02 01	 lda @TAB_MEM_BANKS+(=*)
    29 02,2003 8D 01 D3		 sta $d301
    30 02,2006 60		 rts
    32 02,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 02,2007			   org $4000
Source: pang_chars.asm
   345
   346 02,4000-7FD2> CC 60 DE + 	.link 'frm_right.obx'	// !!! KONIECZNIE OD POCZ¥TKU STRONY PAMIÊCI !!!
   347
   348 02,7427 E5 96 7B 6C 14 + texture3	ins '_PC/texture/g2f/PangJapanVers2.df7'
   349
   350 					.print 'BANK #2 (FRM_RIGHT): $4000..',*,', free: ',$8000-*
   350 				BANK #2 (FRM_RIGHT): $4000..$7FD3, free: $002D
   351
   352
   353 				/***************************  BANK #3  ***************************/
   354
   355 					NMB
   355 03,7FD3			@BANK_ADD 'N'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 03,7FD3			 org @PROC_ADD_BANK
    28 03,2000-2006> AD 03 01	 lda @TAB_MEM_BANKS+(=*)
    29 03,2003 8D 01 D3		 sta $d301
    30 03,2006 60		 rts
    32 03,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 03,2007			   org $4000
Source: pang_chars.asm
   356
   357 03,4000				lhinv48
Macro: LHINV48 [Source: pang_chars.asm]
     3 = 03,4000			.def linv48
     5 03,4000-4E93> 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4001 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4002 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4003 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4004 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4005 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4006 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4007 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4008 34			DTA L(INVERS+4+[#/8]*48)
     5 03,4009 34			DTA L(INVERS+4+[#/8]*48)
     5 03,400A 34			DTA L(INVERS+4+[#/8]*48)
     5 03,400B 34			DTA L(INVERS+4+[#/8]*48)
     5 03,400C 34			DTA L(INVERS+4+[#/8]*48)
     5 03,400D 34			DTA L(INVERS+4+[#/8]*48)
     5 03,400E 34			DTA L(INVERS+4+[#/8]*48)
     5 03,400F 34			DTA L(INVERS+4+[#/8]*48)
     5 03,4010 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4011 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4012 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4013 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4014 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4015 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4016 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4017 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4018 94			DTA L(INVERS+4+[#/8]*48)
     5 03,4019 94			DTA L(INVERS+4+[#/8]*48)
     5 03,401A 94			DTA L(INVERS+4+[#/8]*48)
     5 03,401B 94			DTA L(INVERS+4+[#/8]*48)
     5 03,401C 94			DTA L(INVERS+4+[#/8]*48)
     5 03,401D 94			DTA L(INVERS+4+[#/8]*48)
     5 03,401E 94			DTA L(INVERS+4+[#/8]*48)
     5 03,401F 94			DTA L(INVERS+4+[#/8]*48)
     5 03,4020 C4			DTA L(INVERS+4+[#/8]*48)
     5 03,4021 C4			DTA L(INVERS+4+[#/8]*48)
     5 03,4022 C4			DTA L(INVERS+4+[#/8]*48)
     5 03,4023 C4			DTA L(INVERS+4+[#/8]*48)
     5 03,4024 C4			DTA L(INVERS+4+[#/8]*48)
     5 03,4025 C4			DTA L(INVERS+4+[#/8]*48)
     5 03,4026 C4			DTA L(INVERS+4+[#/8]*48)
     5 03,4027 C4			DTA L(INVERS+4+[#/8]*48)
     5 03,4028 F4			DTA L(INVERS+4+[#/8]*48)
     5 03,4029 F4			DTA L(INVERS+4+[#/8]*48)
     5 03,402A F4			DTA L(INVERS+4+[#/8]*48)
     5 03,402B F4			DTA L(INVERS+4+[#/8]*48)
     5 03,402C F4			DTA L(INVERS+4+[#/8]*48)
     5 03,402D F4			DTA L(INVERS+4+[#/8]*48)
     5 03,402E F4			DTA L(INVERS+4+[#/8]*48)
     5 03,402F F4			DTA L(INVERS+4+[#/8]*48)
     5 03,4030 24			DTA L(INVERS+4+[#/8]*48)
     5 03,4031 24			DTA L(INVERS+4+[#/8]*48)
     5 03,4032 24			DTA L(INVERS+4+[#/8]*48)
     5 03,4033 24			DTA L(INVERS+4+[#/8]*48)
     5 03,4034 24			DTA L(INVERS+4+[#/8]*48)
     5 03,4035 24			DTA L(INVERS+4+[#/8]*48)
     5 03,4036 24			DTA L(INVERS+4+[#/8]*48)
     5 03,4037 24			DTA L(INVERS+4+[#/8]*48)
     5 03,4038 54			DTA L(INVERS+4+[#/8]*48)
     5 03,4039 54			DTA L(INVERS+4+[#/8]*48)
     5 03,403A 54			DTA L(INVERS+4+[#/8]*48)
     5 03,403B 54			DTA L(INVERS+4+[#/8]*48)
     5 03,403C 54			DTA L(INVERS+4+[#/8]*48)
     5 03,403D 54			DTA L(INVERS+4+[#/8]*48)
     5 03,403E 54			DTA L(INVERS+4+[#/8]*48)
     5 03,403F 54			DTA L(INVERS+4+[#/8]*48)
     5 03,4040 84			DTA L(INVERS+4+[#/8]*48)
     5 03,4041 84			DTA L(INVERS+4+[#/8]*48)
     5 03,4042 84			DTA L(INVERS+4+[#/8]*48)
     5 03,4043 84			DTA L(INVERS+4+[#/8]*48)
     5 03,4044 84			DTA L(INVERS+4+[#/8]*48)
     5 03,4045 84			DTA L(INVERS+4+[#/8]*48)
     5 03,4046 84			DTA L(INVERS+4+[#/8]*48)
     5 03,4047 84			DTA L(INVERS+4+[#/8]*48)
     5 03,4048 B4			DTA L(INVERS+4+[#/8]*48)
     5 03,4049 B4			DTA L(INVERS+4+[#/8]*48)
     5 03,404A B4			DTA L(INVERS+4+[#/8]*48)
     5 03,404B B4			DTA L(INVERS+4+[#/8]*48)
     5 03,404C B4			DTA L(INVERS+4+[#/8]*48)
     5 03,404D B4			DTA L(INVERS+4+[#/8]*48)
     5 03,404E B4			DTA L(INVERS+4+[#/8]*48)
     5 03,404F B4			DTA L(INVERS+4+[#/8]*48)
     5 03,4050 E4			DTA L(INVERS+4+[#/8]*48)
     5 03,4051 E4			DTA L(INVERS+4+[#/8]*48)
     5 03,4052 E4			DTA L(INVERS+4+[#/8]*48)
     5 03,4053 E4			DTA L(INVERS+4+[#/8]*48)
     5 03,4054 E4			DTA L(INVERS+4+[#/8]*48)
     5 03,4055 E4			DTA L(INVERS+4+[#/8]*48)
     5 03,4056 E4			DTA L(INVERS+4+[#/8]*48)
     5 03,4057 E4			DTA L(INVERS+4+[#/8]*48)
     5 03,4058 14			DTA L(INVERS+4+[#/8]*48)
     5 03,4059 14			DTA L(INVERS+4+[#/8]*48)
     5 03,405A 14			DTA L(INVERS+4+[#/8]*48)
     5 03,405B 14			DTA L(INVERS+4+[#/8]*48)
     5 03,405C 14			DTA L(INVERS+4+[#/8]*48)
     5 03,405D 14			DTA L(INVERS+4+[#/8]*48)
     5 03,405E 14			DTA L(INVERS+4+[#/8]*48)
     5 03,405F 14			DTA L(INVERS+4+[#/8]*48)
     5 03,4060 44			DTA L(INVERS+4+[#/8]*48)
     5 03,4061 44			DTA L(INVERS+4+[#/8]*48)
     5 03,4062 44			DTA L(INVERS+4+[#/8]*48)
     5 03,4063 44			DTA L(INVERS+4+[#/8]*48)
     5 03,4064 44			DTA L(INVERS+4+[#/8]*48)
     5 03,4065 44			DTA L(INVERS+4+[#/8]*48)
     5 03,4066 44			DTA L(INVERS+4+[#/8]*48)
     5 03,4067 44			DTA L(INVERS+4+[#/8]*48)
     5 03,4068 74			DTA L(INVERS+4+[#/8]*48)
     5 03,4069 74			DTA L(INVERS+4+[#/8]*48)
     5 03,406A 74			DTA L(INVERS+4+[#/8]*48)
     5 03,406B 74			DTA L(INVERS+4+[#/8]*48)
     5 03,406C 74			DTA L(INVERS+4+[#/8]*48)
     5 03,406D 74			DTA L(INVERS+4+[#/8]*48)
     5 03,406E 74			DTA L(INVERS+4+[#/8]*48)
     5 03,406F 74			DTA L(INVERS+4+[#/8]*48)
     5 03,4070 A4			DTA L(INVERS+4+[#/8]*48)
     5 03,4071 A4			DTA L(INVERS+4+[#/8]*48)
     5 03,4072 A4			DTA L(INVERS+4+[#/8]*48)
     5 03,4073 A4			DTA L(INVERS+4+[#/8]*48)
     5 03,4074 A4			DTA L(INVERS+4+[#/8]*48)
     5 03,4075 A4			DTA L(INVERS+4+[#/8]*48)
     5 03,4076 A4			DTA L(INVERS+4+[#/8]*48)
     5 03,4077 A4			DTA L(INVERS+4+[#/8]*48)
     5 03,4078 D4			DTA L(INVERS+4+[#/8]*48)
     5 03,4079 D4			DTA L(INVERS+4+[#/8]*48)
     5 03,407A D4			DTA L(INVERS+4+[#/8]*48)
     5 03,407B D4			DTA L(INVERS+4+[#/8]*48)
     5 03,407C D4			DTA L(INVERS+4+[#/8]*48)
     5 03,407D D4			DTA L(INVERS+4+[#/8]*48)
     5 03,407E D4			DTA L(INVERS+4+[#/8]*48)
     5 03,407F D4			DTA L(INVERS+4+[#/8]*48)
     5 03,4080 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4081 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4082 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4083 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4084 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4085 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4086 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4087 04			DTA L(INVERS+4+[#/8]*48)
     5 03,4088 34			DTA L(INVERS+4+[#/8]*48)
     5 03,4089 34			DTA L(INVERS+4+[#/8]*48)
     5 03,408A 34			DTA L(INVERS+4+[#/8]*48)
     5 03,408B 34			DTA L(INVERS+4+[#/8]*48)
     5 03,408C 34			DTA L(INVERS+4+[#/8]*48)
     5 03,408D 34			DTA L(INVERS+4+[#/8]*48)
     5 03,408E 34			DTA L(INVERS+4+[#/8]*48)
     5 03,408F 34			DTA L(INVERS+4+[#/8]*48)
     5 03,4090 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4091 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4092 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4093 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4094 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4095 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4096 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4097 64			DTA L(INVERS+4+[#/8]*48)
     5 03,4098 94			DTA L(INVERS+4+[#/8]*48)
     5 03,4099 04			DTA L(INVERS+4)
     5 03,409A 04			DTA L(INVERS+4)
     5 03,409B 04			DTA L(INVERS+4)
     5 03,409C 04			DTA L(INVERS+4)
     5 03,409D 04			DTA L(INVERS+4)
     5 03,409E 04			DTA L(INVERS+4)
     5 03,409F 04			DTA L(INVERS+4)
     5 03,40A0 04			DTA L(INVERS+4)
     5 03,40A1 04			DTA L(INVERS+4)
     5 03,40A2 04			DTA L(INVERS+4)
     5 03,40A3 04			DTA L(INVERS+4)
     5 03,40A4 04			DTA L(INVERS+4)
     5 03,40A5 04			DTA L(INVERS+4)
     5 03,40A6 04			DTA L(INVERS+4)
     5 03,40A7 04			DTA L(INVERS+4)
     5 03,40A8 04			DTA L(INVERS+4)
     5 03,40A9 04			DTA L(INVERS+4)
     5 03,40AA 04			DTA L(INVERS+4)
     5 03,40AB 04			DTA L(INVERS+4)
     5 03,40AC 04			DTA L(INVERS+4)
     5 03,40AD 04			DTA L(INVERS+4)
     5 03,40AE 04			DTA L(INVERS+4)
     5 03,40AF 04			DTA L(INVERS+4)
     5 03,40B0 04			DTA L(INVERS+4)
     5 03,40B1 04			DTA L(INVERS+4)
     5 03,40B2 04			DTA L(INVERS+4)
     5 03,40B3 04			DTA L(INVERS+4)
     5 03,40B4 04			DTA L(INVERS+4)
     5 03,40B5 04			DTA L(INVERS+4)
     5 03,40B6 04			DTA L(INVERS+4)
     5 03,40B7 04			DTA L(INVERS+4)
     5 03,40B8 04			DTA L(INVERS+4)
     5 03,40B9 04			DTA L(INVERS+4)
     5 03,40BA 04			DTA L(INVERS+4)
     5 03,40BB 04			DTA L(INVERS+4)
     5 03,40BC 04			DTA L(INVERS+4)
     5 03,40BD 04			DTA L(INVERS+4)
     5 03,40BE 04			DTA L(INVERS+4)
     5 03,40BF 04			DTA L(INVERS+4)
     5 03,40C0 04			DTA L(INVERS+4)
     5 03,40C1 04			DTA L(INVERS+4)
     5 03,40C2 04			DTA L(INVERS+4)
     5 03,40C3 04			DTA L(INVERS+4)
     5 03,40C4 04			DTA L(INVERS+4)
     5 03,40C5 04			DTA L(INVERS+4)
     5 03,40C6 04			DTA L(INVERS+4)
     5 03,40C7 04			DTA L(INVERS+4)
     5 03,40C8 04			DTA L(INVERS+4)
     5 03,40C9 04			DTA L(INVERS+4)
     5 03,40CA 04			DTA L(INVERS+4)
     5 03,40CB 04			DTA L(INVERS+4)
     5 03,40CC 04			DTA L(INVERS+4)
     5 03,40CD 04			DTA L(INVERS+4)
     5 03,40CE 04			DTA L(INVERS+4)
     5 03,40CF 04			DTA L(INVERS+4)
     5 03,40D0 04			DTA L(INVERS+4)
     5 03,40D1 04			DTA L(INVERS+4)
     5 03,40D2 04			DTA L(INVERS+4)
     5 03,40D3 04			DTA L(INVERS+4)
     5 03,40D4 04			DTA L(INVERS+4)
     5 03,40D5 04			DTA L(INVERS+4)
     5 03,40D6 04			DTA L(INVERS+4)
     5 03,40D7 04			DTA L(INVERS+4)
     5 03,40D8 04			DTA L(INVERS+4)
     5 03,40D9 04			DTA L(INVERS+4)
     5 03,40DA 04			DTA L(INVERS+4)
     5 03,40DB 04			DTA L(INVERS+4)
     5 03,40DC 04			DTA L(INVERS+4)
     5 03,40DD 04			DTA L(INVERS+4)
     5 03,40DE 04			DTA L(INVERS+4)
     5 03,40DF 04			DTA L(INVERS+4)
     5 03,40E0 04			DTA L(INVERS+4)
     5 03,40E1 04			DTA L(INVERS+4)
     5 03,40E2 04			DTA L(INVERS+4)
     5 03,40E3 04			DTA L(INVERS+4)
     5 03,40E4 04			DTA L(INVERS+4)
     5 03,40E5 04			DTA L(INVERS+4)
     5 03,40E6 04			DTA L(INVERS+4)
     5 03,40E7 04			DTA L(INVERS+4)
     5 03,40E8 04			DTA L(INVERS+4)
     5 03,40E9 04			DTA L(INVERS+4)
     5 03,40EA 04			DTA L(INVERS+4)
     5 03,40EB 04			DTA L(INVERS+4)
     5 03,40EC 04			DTA L(INVERS+4)
     5 03,40ED 04			DTA L(INVERS+4)
     5 03,40EE 04			DTA L(INVERS+4)
     5 03,40EF 04			DTA L(INVERS+4)
     5 03,40F0 04			DTA L(INVERS+4)
     5 03,40F1 04			DTA L(INVERS+4)
     5 03,40F2 04			DTA L(INVERS+4)
     5 03,40F3 04			DTA L(INVERS+4)
     5 03,40F4 04			DTA L(INVERS+4)
     5 03,40F5 04			DTA L(INVERS+4)
     5 03,40F6 04			DTA L(INVERS+4)
     5 03,40F7 04			DTA L(INVERS+4)
     5 03,40F8 04			DTA L(INVERS+4)
     5 03,40F9 04			DTA L(INVERS+4)
     5 03,40FA 04			DTA L(INVERS+4)
     5 03,40FB 04			DTA L(INVERS+4)
     5 03,40FC 04			DTA L(INVERS+4)
     5 03,40FD 04			DTA L(INVERS+4)
     5 03,40FE 04			DTA L(INVERS+4)
     5 03,40FF 04			DTA L(INVERS+4)
    12 = 03,4100			.def hinv48
    14 03,4100 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4101 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4102 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4103 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4104 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4105 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4106 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4107 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4108 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4109 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,410A B3			DTA H(INVERS+4+[#/8]*48)
    14 03,410B B3			DTA H(INVERS+4+[#/8]*48)
    14 03,410C B3			DTA H(INVERS+4+[#/8]*48)
    14 03,410D B3			DTA H(INVERS+4+[#/8]*48)
    14 03,410E B3			DTA H(INVERS+4+[#/8]*48)
    14 03,410F B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4110 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4111 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4112 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4113 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4114 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4115 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4116 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4117 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4118 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4119 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,411A B3			DTA H(INVERS+4+[#/8]*48)
    14 03,411B B3			DTA H(INVERS+4+[#/8]*48)
    14 03,411C B3			DTA H(INVERS+4+[#/8]*48)
    14 03,411D B3			DTA H(INVERS+4+[#/8]*48)
    14 03,411E B3			DTA H(INVERS+4+[#/8]*48)
    14 03,411F B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4120 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4121 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4122 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4123 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4124 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4125 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4126 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4127 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4128 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4129 B3			DTA H(INVERS+4+[#/8]*48)
    14 03,412A B3			DTA H(INVERS+4+[#/8]*48)
    14 03,412B B3			DTA H(INVERS+4+[#/8]*48)
    14 03,412C B3			DTA H(INVERS+4+[#/8]*48)
    14 03,412D B3			DTA H(INVERS+4+[#/8]*48)
    14 03,412E B3			DTA H(INVERS+4+[#/8]*48)
    14 03,412F B3			DTA H(INVERS+4+[#/8]*48)
    14 03,4130 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4131 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4132 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4133 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4134 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4135 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4136 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4137 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4138 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4139 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,413A B4			DTA H(INVERS+4+[#/8]*48)
    14 03,413B B4			DTA H(INVERS+4+[#/8]*48)
    14 03,413C B4			DTA H(INVERS+4+[#/8]*48)
    14 03,413D B4			DTA H(INVERS+4+[#/8]*48)
    14 03,413E B4			DTA H(INVERS+4+[#/8]*48)
    14 03,413F B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4140 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4141 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4142 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4143 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4144 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4145 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4146 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4147 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4148 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4149 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,414A B4			DTA H(INVERS+4+[#/8]*48)
    14 03,414B B4			DTA H(INVERS+4+[#/8]*48)
    14 03,414C B4			DTA H(INVERS+4+[#/8]*48)
    14 03,414D B4			DTA H(INVERS+4+[#/8]*48)
    14 03,414E B4			DTA H(INVERS+4+[#/8]*48)
    14 03,414F B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4150 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4151 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4152 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4153 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4154 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4155 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4156 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4157 B4			DTA H(INVERS+4+[#/8]*48)
    14 03,4158 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4159 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,415A B5			DTA H(INVERS+4+[#/8]*48)
    14 03,415B B5			DTA H(INVERS+4+[#/8]*48)
    14 03,415C B5			DTA H(INVERS+4+[#/8]*48)
    14 03,415D B5			DTA H(INVERS+4+[#/8]*48)
    14 03,415E B5			DTA H(INVERS+4+[#/8]*48)
    14 03,415F B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4160 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4161 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4162 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4163 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4164 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4165 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4166 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4167 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4168 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4169 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,416A B5			DTA H(INVERS+4+[#/8]*48)
    14 03,416B B5			DTA H(INVERS+4+[#/8]*48)
    14 03,416C B5			DTA H(INVERS+4+[#/8]*48)
    14 03,416D B5			DTA H(INVERS+4+[#/8]*48)
    14 03,416E B5			DTA H(INVERS+4+[#/8]*48)
    14 03,416F B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4170 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4171 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4172 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4173 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4174 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4175 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4176 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4177 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4178 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4179 B5			DTA H(INVERS+4+[#/8]*48)
    14 03,417A B5			DTA H(INVERS+4+[#/8]*48)
    14 03,417B B5			DTA H(INVERS+4+[#/8]*48)
    14 03,417C B5			DTA H(INVERS+4+[#/8]*48)
    14 03,417D B5			DTA H(INVERS+4+[#/8]*48)
    14 03,417E B5			DTA H(INVERS+4+[#/8]*48)
    14 03,417F B5			DTA H(INVERS+4+[#/8]*48)
    14 03,4180 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4181 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4182 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4183 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4184 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4185 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4186 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4187 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4188 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4189 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,418A B6			DTA H(INVERS+4+[#/8]*48)
    14 03,418B B6			DTA H(INVERS+4+[#/8]*48)
    14 03,418C B6			DTA H(INVERS+4+[#/8]*48)
    14 03,418D B6			DTA H(INVERS+4+[#/8]*48)
    14 03,418E B6			DTA H(INVERS+4+[#/8]*48)
    14 03,418F B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4190 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4191 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4192 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4193 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4194 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4195 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4196 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4197 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4198 B6			DTA H(INVERS+4+[#/8]*48)
    14 03,4199 B3			DTA H(INVERS+4)
    14 03,419A B3			DTA H(INVERS+4)
    14 03,419B B3			DTA H(INVERS+4)
    14 03,419C B3			DTA H(INVERS+4)
    14 03,419D B3			DTA H(INVERS+4)
    14 03,419E B3			DTA H(INVERS+4)
    14 03,419F B3			DTA H(INVERS+4)
    14 03,41A0 B3			DTA H(INVERS+4)
    14 03,41A1 B3			DTA H(INVERS+4)
    14 03,41A2 B3			DTA H(INVERS+4)
    14 03,41A3 B3			DTA H(INVERS+4)
    14 03,41A4 B3			DTA H(INVERS+4)
    14 03,41A5 B3			DTA H(INVERS+4)
    14 03,41A6 B3			DTA H(INVERS+4)
    14 03,41A7 B3			DTA H(INVERS+4)
    14 03,41A8 B3			DTA H(INVERS+4)
    14 03,41A9 B3			DTA H(INVERS+4)
    14 03,41AA B3			DTA H(INVERS+4)
    14 03,41AB B3			DTA H(INVERS+4)
    14 03,41AC B3			DTA H(INVERS+4)
    14 03,41AD B3			DTA H(INVERS+4)
    14 03,41AE B3			DTA H(INVERS+4)
    14 03,41AF B3			DTA H(INVERS+4)
    14 03,41B0 B3			DTA H(INVERS+4)
    14 03,41B1 B3			DTA H(INVERS+4)
    14 03,41B2 B3			DTA H(INVERS+4)
    14 03,41B3 B3			DTA H(INVERS+4)
    14 03,41B4 B3			DTA H(INVERS+4)
    14 03,41B5 B3			DTA H(INVERS+4)
    14 03,41B6 B3			DTA H(INVERS+4)
    14 03,41B7 B3			DTA H(INVERS+4)
    14 03,41B8 B3			DTA H(INVERS+4)
    14 03,41B9 B3			DTA H(INVERS+4)
    14 03,41BA B3			DTA H(INVERS+4)
    14 03,41BB B3			DTA H(INVERS+4)
    14 03,41BC B3			DTA H(INVERS+4)
    14 03,41BD B3			DTA H(INVERS+4)
    14 03,41BE B3			DTA H(INVERS+4)
    14 03,41BF B3			DTA H(INVERS+4)
    14 03,41C0 B3			DTA H(INVERS+4)
    14 03,41C1 B3			DTA H(INVERS+4)
    14 03,41C2 B3			DTA H(INVERS+4)
    14 03,41C3 B3			DTA H(INVERS+4)
    14 03,41C4 B3			DTA H(INVERS+4)
    14 03,41C5 B3			DTA H(INVERS+4)
    14 03,41C6 B3			DTA H(INVERS+4)
    14 03,41C7 B3			DTA H(INVERS+4)
    14 03,41C8 B3			DTA H(INVERS+4)
    14 03,41C9 B3			DTA H(INVERS+4)
    14 03,41CA B3			DTA H(INVERS+4)
    14 03,41CB B3			DTA H(INVERS+4)
    14 03,41CC B3			DTA H(INVERS+4)
    14 03,41CD B3			DTA H(INVERS+4)
    14 03,41CE B3			DTA H(INVERS+4)
    14 03,41CF B3			DTA H(INVERS+4)
    14 03,41D0 B3			DTA H(INVERS+4)
    14 03,41D1 B3			DTA H(INVERS+4)
    14 03,41D2 B3			DTA H(INVERS+4)
    14 03,41D3 B3			DTA H(INVERS+4)
    14 03,41D4 B3			DTA H(INVERS+4)
    14 03,41D5 B3			DTA H(INVERS+4)
    14 03,41D6 B3			DTA H(INVERS+4)
    14 03,41D7 B3			DTA H(INVERS+4)
    14 03,41D8 B3			DTA H(INVERS+4)
    14 03,41D9 B3			DTA H(INVERS+4)
    14 03,41DA B3			DTA H(INVERS+4)
    14 03,41DB B3			DTA H(INVERS+4)
    14 03,41DC B3			DTA H(INVERS+4)
    14 03,41DD B3			DTA H(INVERS+4)
    14 03,41DE B3			DTA H(INVERS+4)
    14 03,41DF B3			DTA H(INVERS+4)
    14 03,41E0 B3			DTA H(INVERS+4)
    14 03,41E1 B3			DTA H(INVERS+4)
    14 03,41E2 B3			DTA H(INVERS+4)
    14 03,41E3 B3			DTA H(INVERS+4)
    14 03,41E4 B3			DTA H(INVERS+4)
    14 03,41E5 B3			DTA H(INVERS+4)
    14 03,41E6 B3			DTA H(INVERS+4)
    14 03,41E7 B3			DTA H(INVERS+4)
    14 03,41E8 B3			DTA H(INVERS+4)
    14 03,41E9 B3			DTA H(INVERS+4)
    14 03,41EA B3			DTA H(INVERS+4)
    14 03,41EB B3			DTA H(INVERS+4)
    14 03,41EC B3			DTA H(INVERS+4)
    14 03,41ED B3			DTA H(INVERS+4)
    14 03,41EE B3			DTA H(INVERS+4)
    14 03,41EF B3			DTA H(INVERS+4)
    14 03,41F0 B3			DTA H(INVERS+4)
    14 03,41F1 B3			DTA H(INVERS+4)
    14 03,41F2 B3			DTA H(INVERS+4)
    14 03,41F3 B3			DTA H(INVERS+4)
    14 03,41F4 B3			DTA H(INVERS+4)
    14 03,41F5 B3			DTA H(INVERS+4)
    14 03,41F6 B3			DTA H(INVERS+4)
    14 03,41F7 B3			DTA H(INVERS+4)
    14 03,41F8 B3			DTA H(INVERS+4)
    14 03,41F9 B3			DTA H(INVERS+4)
    14 03,41FA B3			DTA H(INVERS+4)
    14 03,41FB B3			DTA H(INVERS+4)
    14 03,41FC B3			DTA H(INVERS+4)
    14 03,41FD B3			DTA H(INVERS+4)
    14 03,41FE B3			DTA H(INVERS+4)
    14 03,41FF B3			DTA H(INVERS+4)
Source: pang_chars.asm
   358
   359 03,4200 F5 F6 F6 F6 F6 + 	.link 'harpuns.obx'	// !!! KONIECZNIE OD POCZ¥TKU STRONY PAMIÊCI !!!
   360
   361 03,4E94				.align
   362 03,4F00-5D7E> 79 4F D5 + 	.link '_PC\asm-kule_HP\ckula2.obx'	; korzysta z LHINV48
   363
   364 03,5D7F				.align
   365 03,5E00-7EB3> 00 08 10 + 	.link 'bonus.obx'	// !!! KONIECZNIE OD POCZ¥TKU STRONY PAMIÊCI !!!
   366
   367
   368 					.print 'BANK #3 (HARPUNS, BONUS, CKULA 2): $4000..',*,', free: ',$8000-*
   368 				BANK #3 (HARPUNS, BONUS, CKULA 2): $4000..$7EB4, free: $014C
   369
   370
   371 				/***************************  BANK #4  ***************************/
   372
   373 					NMB
   373 04,7EB4			@BANK_ADD 'N'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 04,7EB4			 org @PROC_ADD_BANK
    28 04,2000-2006> AD 04 01	 lda @TAB_MEM_BANKS+(=*)
    29 04,2003 8D 01 D3		 sta $d301
    30 04,2006 60		 rts
    32 04,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 04,2007			   org $4000
Source: pang_chars.asm
   374
   375 				; modul RMT zostaje rozpakowany od adresu $4000
   376
   377 04,4000				org $5200
   378
   379 04,5200-7384> BD 54 4F + rmt_title	ins 'msx-5\pang tytulowa stripped.df7'
   380 04,55C5 A5 91 31 6C D3 + rmt_gover	ins 'msx-5\pang koniec gry - przegrana stripped.df7'
   381 04,5810 A5 53 3D 6F D3 + rmt_win		ins 'msx-5\pang gra wygrana stripped.df7'
   382
   383 04,5AE0 BD 57 57 C8 D3 + rmt_game_1	ins 'msx-5\song0_strip.df7'
   384 04,61EA B5 56 5B 8C 0B + rmt_game_2	ins 'msx-5\song1_strip.df7'
   385 04,67B3 A5 53 4B 88 D3 + rmt_game_3	ins 'msx-5\song2_strip.df7'
   386 04,6C3E B5 51 5D 88 12 + rmt_game_4	ins 'msx-5\song3_strip.df7'
   387
   388 04,7037 0B F2 0D B1 70 + jingle_1	ins 'msx-5\song4_strip.df7'
   389 04,70FD BD 8F BF 4A C3 + jingle_2	ins 'msx-5\song5_strip.df7'
   390 04,723F BD 8F 3D 4B C3 + jingle_3	ins 'msx-5\song6_strip_OK.df7'
   391
   392
   393 04,7385				.align			; RMT PLAYER with SFX
   394
   395 04,7400			.local	RMT2
   396 = 04,7800		rmt_PLAYER	= *+$400
   397 = 04,00F0		GLOBAL_VOLUME	= $f0
   398
   399 04,7400-740E> 0E 0E 74	play	asl ntsc		; =0 PAL, =4 NTSC
   400 04,7403 90 06			bcc @+
   401 04,7405 A9 04			lda #%00000100
   402 04,7407 8D 0E 74			sta ntsc
   403 04,740A 60			rts
   404 04,740B 4C 03 78		@	jmp RASTERMUSICTRACKER+3
   405
   406 04,740E 00		ntsc	brk
   407
   408 04,740F				icl 'msx-5/feat.hea'
Source: feat.hea
     1 = 04,0001		FEAT_SFX			equ	1
     2 = 04,0000		FEAT_GLOBALVOLUMEFADE		equ	0
     3 = 04,0000		FEAT_NOSTARTINGSONGLINE		equ	0
     4 = 04,0000		FEAT_INSTRSPEED			equ	0
     5 = 04,0000		FEAT_CONSTANTSPEED		equ	0
     6 = 04,0001		FEAT_COMMAND1			equ	1
     7 = 04,0000		FEAT_COMMAND2			equ	0
     8 = 04,0001		FEAT_COMMAND3			equ	1
     9 = 04,0001		FEAT_COMMAND4			equ	1
    10 = 04,0001		FEAT_COMMAND5			equ	1
    11 = 04,0001		FEAT_COMMAND6			equ	1
    12 = 04,0000		FEAT_COMMAND7SETNOTE		equ	0
    13 = 04,0000		FEAT_COMMAND7VOLUMEONLY		equ	0
    14 = 04,0000		FEAT_PORTAMENTO			equ	0
    15 = 04,0001		FEAT_FILTER			equ	1
    16 = 04,0001		FEAT_FILTERG0L			equ	1
    17 = 04,0001		FEAT_FILTERG1L			equ	1
    18 = 04,0001		FEAT_FILTERG0R			equ	1
    19 = 04,0001		FEAT_FILTERG1R			equ	1
    20 = 04,0000		FEAT_BASS16			equ	0
    21 = 04,0000		FEAT_BASS16G1L			equ	0
    22 = 04,0000		FEAT_BASS16G3L			equ	0
    23 = 04,0000		FEAT_BASS16G1R			equ	0
    24 = 04,0000		FEAT_BASS16G3R			equ	0
    25 = 04,0000		FEAT_VOLUMEONLYG0L		equ	0
    26 = 04,0000		FEAT_VOLUMEONLYG2L		equ	0
    27 = 04,0000		FEAT_VOLUMEONLYG3L		equ	0
    28 = 04,0000		FEAT_VOLUMEONLYG0R		equ	0
    29 = 04,0000		FEAT_VOLUMEONLYG2R		equ	0
    30 = 04,0000		FEAT_VOLUMEONLYG3R		equ	0
    31 = 04,0001		FEAT_TABLETYPE			equ	1
    32 = 04,0001		FEAT_TABLEMODE			equ	1
    33 = 04,0001		FEAT_TABLEGO			equ	1
    34 = 04,0000		FEAT_AUDCTLMANUALSET		equ	0
    35 = 04,0001		FEAT_VOLUMEMIN			equ	1
    36 = 04,0001		FEAT_EFFECTVIBRATO		equ	1
    37 = 04,0001		FEAT_EFFECTFSHIFT		equ	1
   409
   410 04,740F				icl 'rmtplayr.a65'
Source: rmtplayr.a65
     1 				;*
     2 				;* Raster Music Tracker, RMT Atari routine version 1.20060416
     3 				;* (c) Radek Sterba, Raster/C.P.U., 2002 - 2006
     4 				;* http://raster.atari.org
     5 				;*
     6 				;* Warnings:
     7 				;*
     8 				;* 1. RMT player routine needs 19 itself reserved bytes in zero page (no accessed
     9 				;*    from any other routines) as well as cca 1KB of memory before the "PLAYER"
    10 				;*    address for frequency tables and functionary variables. It's:
    11 				;*	  a) from PLAYER-$03c0 to PLAYER for stereo RMTplayer
    12 				;*    b) from PLAYER-$0320 to PLAYER for mono RMTplayer
    13 				;*
    14 				;* 2. RMT player routine MUST (!!!) be compiled from the begin of the memory page.
    15 				;*    i.e. "PLAYER" address can be $..00 only!
    16 				;*
    17 				;* 3. Because of RMTplayer provides a lot of effects, it spent a lot of CPU time.
    18 				;*
    19 				;* STEREOMODE	equ 0..3			;0 => compile RMTplayer for 4 tracks mono
    20 				;*									;1 => compile RMTplayer for 8 tracks stereo
    21 				;*									;2 => compile RMTplayer for 4 tracks stereo L1 R2 R3 L4
    22 				;*									;3 => compile RMTplayer for 4 tracks stereo L1 L2 R3 R4
    23 				;*
    24 					IFT STEREOMODE==1
    25 = 04,0008		TRACKS		equ 8
    26 					ELS
    27 				TRACKS		equ 4
    28 					EIF
    29 				;*
    30 				;PLAYER		equ $5400
    31 				;*
    32 				;* RMT FEATures definitions file
    33 				;* For optimizations of RMT player routine to concrete RMT modul only!
    34
    35 				;*
    36 				;* RMT ZeroPage addresses
    37 04,740F				org rmt_zp
    38 04,00A4			p_tis
    39 04,00A4			p_instrstable	org *+2
    40 04,00A6			p_trackslbstable	org *+2
    41 04,00A8			p_trackshbstable	org *+2
    42 04,00AA			p_song			org *+2
    43 04,00AC			ns				org *+2
    44 04,00AE			nr				org *+2
    45 04,00B0			nt				org *+2
    46 04,00B2			reg1			org *+1
    47 04,00B3			reg2			org *+1
    48 04,00B4			reg3			org *+1
    49 04,00B5			tmp				org *+1
    50 					IFT FEAT_COMMAND2
    51 				frqaddcmd2		org *+1
    52 					EIF
    53 					IFT TRACKS>4
    54 04,00B6				org rmt_PLAYER-$400+$40
    55 					ELS
    56 					org rmt_PLAYER-$400+$e0
    57 					EIF
    58 04,7440			track_variables
    59 04,7440			trackn_db	org *+TRACKS
    60 04,7448			trackn_hb	org *+TRACKS
    61 04,7450			trackn_idx	org *+TRACKS
    62 04,7458			trackn_pause	org *+TRACKS
    63 04,7460			trackn_note	org *+TRACKS
    64 04,7468			trackn_volume	org *+TRACKS
    65 04,7470			trackn_distor 	org *+TRACKS
    66 04,7478			trackn_shiftfrq	org *+TRACKS
    67 					IFT FEAT_PORTAMENTO
    68 				trackn_portafrqc org *+TRACKS
    69 				trackn_portafrqa org *+TRACKS
    70 				trackn_portaspeed org *+TRACKS
    71 				trackn_portaspeeda org *+TRACKS
    72 				trackn_portadepth org *+TRACKS
    73 					EIF
    74 04,7480			trackn_instrx2	org *+TRACKS
    75 04,7488			trackn_instrdb	org *+TRACKS
    76 04,7490			trackn_instrhb	org *+TRACKS
    77 04,7498			trackn_instridx	org *+TRACKS
    78 04,74A0			trackn_instrlen	org *+TRACKS
    79 04,74A8			trackn_instrlop	org *+TRACKS
    80 04,74B0			trackn_instrreachend	org *+TRACKS
    81 04,74B8			trackn_volumeslidedepth org *+TRACKS
    82 04,74C0			trackn_volumeslidevalue org *+TRACKS
    83 					IFT FEAT_VOLUMEMIN
    84 04,74C8			trackn_volumemin		org *+TRACKS
    85 					EIF
    86 = 04,0001		FEAT_EFFECTS equ FEAT_EFFECTVIBRATO||FEAT_EFFECTFSHIFT
    87 					IFT FEAT_EFFECTS
    88 04,74D0			trackn_effdelay			org *+TRACKS
    89 					EIF
    90 					IFT FEAT_EFFECTVIBRATO
    91 04,74D8			trackn_effvibratoa		org *+TRACKS
    92 					EIF
    93 					IFT FEAT_EFFECTFSHIFT
    94 04,74E0			trackn_effshift		org *+TRACKS
    95 					EIF
    96 04,74E8			trackn_tabletypespeed org *+TRACKS
    97 					IFT FEAT_TABLEMODE
    98 04,74F0			trackn_tablemode	org *+TRACKS
    99 					EIF
   100 04,74F8			trackn_tablenote	org *+TRACKS
   101 04,7500			trackn_tablea		org *+TRACKS
   102 04,7508			trackn_tableend		org *+TRACKS
   103 					IFT FEAT_TABLEGO
   104 04,7510			trackn_tablelop		org *+TRACKS
   105 					EIF
   106 04,7518			trackn_tablespeeda	org *+TRACKS
   107 04,7520			trackn_command		org *+TRACKS
   108 					IFT FEAT_BASS16
   109 				trackn_outnote		org *+TRACKS
   110 					EIF
   111 					IFT FEAT_FILTER
   112 04,7528			trackn_filter		org *+TRACKS
   113 					EIF
   114 04,7530			trackn_audf	org *+TRACKS
   115 04,7538			trackn_audc	org *+TRACKS
   116 					IFT FEAT_AUDCTLMANUALSET
   117 				trackn_audctl	org *+TRACKS
   118 					EIF
   119 04,7540			v_aspeed		org *+1
   120 04,7541			track_endvariables
   121 04,7541					org rmt_PLAYER-$100-$140-$40+2
   122 = 04,000C		INSTRPAR	equ 12
   123 04,7582			tabbeganddistor
   124 04,7582-75BF> 80 00	 dta frqtabpure-frqtab,$00
   125 04,7584 80 20		 dta frqtabpure-frqtab,$20
   126 04,7586 80 40		 dta frqtabpure-frqtab,$40
   127 04,7588 00 C0		 dta frqtabbass1-frqtab,$c0
   128 04,758A 80 80		 dta frqtabpure-frqtab,$80
   129 04,758C 80 A0		 dta frqtabpure-frqtab,$a0
   130 04,758E 00 C0		 dta frqtabbass1-frqtab,$c0
   131 04,7590 40 C0		 dta frqtabbass2-frqtab,$c0
   132 						IFT FEAT_EFFECTVIBRATO
   133 04,7592 00 01 05 0B	vibtabbeg dta 0,vib1-vib0,vib2-vib0,vib3-vib0
   134 04,7596 00		vib0	dta 0
   135 04,7597 01 FF FF 01	vib1	dta 1,-1,-1,1
   136 04,759B 01 00 FF FF 00 + vib2	dta 1,0,-1,-1,0,1
   137 04,75A1 01 01 00 FF FF + vib3	dta 1,1,0,-1,-1,-1,-1,0,1,1
   138 04,75AB			vibtabnext
   139 04,75AB 00				dta vib0-vib0+0
   140 04,75AC 02 03 04 01			dta vib1-vib0+1,vib1-vib0+2,vib1-vib0+3,vib1-vib0+0
   141 04,75B0 06 07 08 09 0A + 		dta vib2-vib0+1,vib2-vib0+2,vib2-vib0+3,vib2-vib0+4,vib2-vib0+5,vib2-vib0+0
   142 04,75B6 0C 0D 0E 0F 10 + 		dta vib3-vib0+1,vib3-vib0+2,vib3-vib0+3,vib3-vib0+4,vib3-vib0+5,vib3-vib0+6,vib3-vib0+7,vib3-vib0+8,vib3-vib0+9,vib3-vib0+0
   143 						EIF
   144 04,75C0					org rmt_PLAYER-$100-$140
   145 					IFT FEAT_BASS16
   146 				frqtabbasslo
   147 					dta $F2,$33,$96,$E2,$38,$8C,$00,$6A,$E8,$6A,$EF,$80,$08,$AE,$46,$E6
   148 					dta $95,$41,$F6,$B0,$6E,$30,$F6,$BB,$84,$52,$22,$F4,$C8,$A0,$7A,$55
   149 					dta $34,$14,$F5,$D8,$BD,$A4,$8D,$77,$60,$4E,$38,$27,$15,$06,$F7,$E8
   150 					dta $DB,$CF,$C3,$B8,$AC,$A2,$9A,$90,$88,$7F,$78,$70,$6A,$64,$5E,$00
   151 					EIF
   152 04,75C0					org rmt_PLAYER-$100-$100
   153 04,7600			frqtab
   154 					ERT [<frqtab]!=0	;* frqtab must begin at the memory page bound! (i.e. $..00 address)
   155 04,7600			frqtabbass1
   156 04,7600-76BF> BF B6 AA + 	dta $BF,$B6,$AA,$A1,$98,$8F,$89,$80,$F2,$E6,$DA,$CE,$BF,$B6,$AA,$A1
   157 04,7610 98 8F 89 80 7A + 	dta $98,$8F,$89,$80,$7A,$71,$6B,$65,$5F,$5C,$56,$50,$4D,$47,$44,$3E
   158 04,7620 3C 38 35 32 2F + 	dta $3C,$38,$35,$32,$2F,$2D,$2A,$28,$25,$23,$21,$1F,$1D,$1C,$1A,$18
   159 04,7630 17 16 14 13 12 + 	dta $17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07
   160 04,7640			frqtabbass2
   161 04,7640 FF F1 E4 D8 CA + 	dta $FF,$F1,$E4,$D8,$CA,$C0,$B5,$AB,$A2,$99,$8E,$87,$7F,$79,$73,$70
   162 04,7650 66 61 5A 55 52 + 	dta $66,$61,$5A,$55,$52,$4B,$48,$43,$3F,$3C,$39,$37,$33,$30,$2D,$2A
   163 04,7660 28 25 24 21 1F + 	dta $28,$25,$24,$21,$1F,$1E,$1C,$1B,$19,$17,$16,$15,$13,$12,$11,$10
   164 04,7670 0F 0E 0D 0C 0B + 	dta $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00
   165 04,7680			frqtabpure
   166 04,7680 F3 E6 D9 CC C1 + 	dta $F3,$E6,$D9,$CC,$C1,$B5,$AD,$A2,$99,$90,$88,$80,$79,$72,$6C,$66
   167 04,7690 60 5B 55 51 4C + 	dta $60,$5B,$55,$51,$4C,$48,$44,$40,$3C,$39,$35,$32,$2F,$2D,$2A,$28
   168 04,76A0 25 23 21 1F 1D + 	dta $25,$23,$21,$1F,$1D,$1C,$1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F
   169 04,76B0 0E 0D 0C 0B 0A + 	dta $0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00,$00
   170 					IFT FEAT_BASS16
   171 				frqtabbasshi
   172 					dta $0D,$0D,$0C,$0B,$0B,$0A,$0A,$09,$08,$08,$07,$07,$07,$06,$06,$05
   173 					dta $05,$05,$04,$04,$04,$04,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02
   174 					dta $02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
   175 					dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   176 					EIF
   177 04,76C0					org rmt_PLAYER-$0100
   178 04,7700			volumetab
   179 04,7700-7E99> 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   180 04,7710 00 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
   181 04,7720 00 00 00 00 01 + 	dta $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02
   182 04,7730 00 00 00 01 01 + 	dta $00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03
   183 04,7740 00 00 01 01 01 + 	dta $00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04
   184 04,7750 00 00 01 01 01 + 	dta $00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
   185 04,7760 00 00 01 01 02 + 	dta $00,$00,$01,$01,$02,$02,$02,$03,$03,$04,$04,$04,$05,$05,$06,$06
   186 04,7770 00 00 01 01 02 + 	dta $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
   187 04,7780 00 01 01 02 02 + 	dta $00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07,$08
   188 04,7790 00 01 01 02 02 + 	dta $00,$01,$01,$02,$02,$03,$04,$04,$05,$05,$06,$07,$07,$08,$08,$09
   189 04,77A0 00 01 01 02 03 + 	dta $00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$07,$07,$08,$09,$09,$0A
   190 04,77B0 00 01 01 02 03 + 	dta $00,$01,$01,$02,$03,$04,$04,$05,$06,$07,$07,$08,$09,$0A,$0A,$0B
   191 04,77C0 00 01 02 02 03 + 	dta $00,$01,$02,$02,$03,$04,$05,$06,$06,$07,$08,$09,$0A,$0A,$0B,$0C
   192 04,77D0 00 01 02 03 03 + 	dta $00,$01,$02,$03,$03,$04,$05,$06,$07,$08,$09,$0A,$0A,$0B,$0C,$0D
   193 04,77E0 00 01 02 03 04 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
   194 04,77F0 00 01 02 03 04 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
   195
   196 04,7800				org rmt_PLAYER
   197 				;*
   198 				;* Set of RMT main vectors:
   199 				;*
   200 04,7800			RASTERMUSICTRACKER
   201 04,7800 4C 12 78			jmp rmt_init
   202 04,7803 4C 09 7A			jmp rmt_play
   203 04,7806 4C 2D 7A			jmp rmt_p3
   204 04,7809 4C 5F 78			jmp rmt_silence
   205 04,780C 4C 53 7C			jmp SetPokey
   206 					IFT FEAT_SFX
   207 04,780F 4C 84 79			jmp rmt_sfx			;* A=note(0,..,60),X=channel(0,..,3 or 0,..,7),Y=instrument*2(0,2,4,..,126)
   208 					EIF
   209 04,7812			rmt_init
   210 04,7812 86 AC			stx ns
   211 04,7814 84 AD			sty ns+1
   212 04,7816 48			pha
   213 					IFT track_endvariables-track_variables>255
   214 04,7817 A0 00			ldy #0
   215 04,7819 98			tya
   216 04,781A 99 40 74		ri0	sta track_variables,y
   217 04,781D 99 41 74			sta track_endvariables-$100,y
   218 04,7820 C8			iny
   219 04,7821 D0 F7			bne ri0
   220 					ELS
   221 					ldy #track_endvariables-track_variables
   222 					lda #0
   223 				ri0	sta track_variables-1,y
   224 					dey
   225 					bne ri0
   226 					EIF
   227 04,7823 A0 04			ldy #4
   228 04,7825 B1 AC			lda (ns),y
   229 04,7827 8D 21 7A			sta v_maxtracklen
   230 04,782A C8			iny
   231 					IFT FEAT_CONSTANTSPEED==0
   232 04,782B B1 AC			lda (ns),y
   233 04,782D 8D CF 78			sta v_speed
   234 					EIF
   235 					IFT FEAT_INSTRSPEED==0
   236 04,7830 C8			iny
   237 04,7831 B1 AC			lda (ns),y
   238 04,7833 8D 12 7A			sta v_instrspeed
   239 04,7836 8D 51 7C			sta v_ainstrspeed
   240 					ELI FEAT_INSTRSPEED>1
   241 					lda #FEAT_INSTRSPEED
   242 					sta v_ainstrspeed
   243 					EIF
   244 04,7839 A0 08			ldy #8
   245 04,783B B1 AC		ri1	lda (ns),y
   246 04,783D 99 9C 00			sta p_tis-8,y
   247 04,7840 C8			iny
   248 04,7841 C0 10			cpy #8+8
   249 04,7843 D0 F6			bne ri1
   250 04,7845 68			pla
   251 04,7846 48			pha
   252 					IFT TRACKS>4
   253 04,7847 0A			asl @
   254 04,7848 0A			asl @
   255 04,7849 0A			asl @
   256 04,784A 18			clc
   257 04,784B 65 AA			adc p_song
   258 04,784D 85 AA			sta p_song
   259 04,784F 68			pla
   260 04,7850 08			php
   261 04,7851 29 E0			and #$e0
   262 04,7853 0A			asl @
   263 04,7854 2A			rol @
   264 04,7855 2A			rol @
   265 04,7856 2A			rol @
   266 					ELS
   267 					asl @
   268 					asl @
   269 					clc
   270 					adc p_song
   271 					sta p_song
   272 					pla
   273 					php
   274 					and #$c0
   275 					asl @
   276 					rol @
   277 					rol @
   278 					EIF
   279 04,7857 28			plp
   280 04,7858 65 AB			adc p_song+1
   281 04,785A 85 AB			sta p_song+1
   282 04,785C 20 7E 78			jsr GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   283 04,785F			rmt_silence
   284 					IFT STEREOMODE>0
   285 04,785F A9 00			lda #0
   286 04,7861 8D 08 D2			sta $d208
   287 04,7864 8D 18 D2			sta $d218
   288 04,7867 A0 03			ldy #3
   289 04,7869 8C 0F D2			sty $d20f
   290 04,786C 8C 1F D2			sty $d21f
   291 04,786F A0 08			ldy #8
   292 04,7871 99 00 D2		si1	sta $d200,y
   293 04,7874 99 10 D2			sta $d210,y
   294 04,7877 88			dey
   295 04,7878 10 F7			bpl si1
   296 					ELS
   297 					lda #0
   298 					sta $d208
   299 					ldy #3
   300 					sty $d20f
   301 					ldy #8
   302 				si1	sta $d200,y
   303 					dey
   304 					bpl si1
   305 					EIF
   306 					IFT FEAT_INSTRSPEED==0
   307 04,787A AD 12 7A			lda v_instrspeed
   308 					ELS
   309 					lda #FEAT_INSTRSPEED
   310 					EIF
   311 04,787D 60			rts
   312 04,787E			GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   313 04,787E			GetSongLine
   314 04,787E A2 00			ldx #0
   315 04,7880 8E 1F 7A			stx v_abeat
   316 04,7883			nn0
   317 04,7883 8A		nn1	txa
   318 04,7884 A8			tay
   319 04,7885 B1 AA			lda (p_song),y
   320 04,7887 C9 FE			cmp #$fe
   321 04,7889 B0 2D			bcs nn2
   322 04,788B A8			tay
   323 04,788C B1 A6			lda (p_trackslbstable),y
   324 04,788E 9D 40 74			sta trackn_db,x
   325 04,7891 B1 A8			lda (p_trackshbstable),y
   326 04,7893 9D 48 74		nn1a sta trackn_hb,x
   327 04,7896 A9 00			lda #0
   328 04,7898 9D 50 74			sta trackn_idx,x
   329 04,789B A9 01			lda #1
   330 04,789D 9D 58 74		nn1a2 sta trackn_pause,x
   331 04,78A0 A9 80			lda #$80
   332 04,78A2 9D 80 74			sta trackn_instrx2,x
   333 04,78A5 E8			inx
   334 04,78A6 E0 08		xtracks01	cpx #TRACKS
   335 04,78A8 D0 D9			bne nn1
   336 04,78AA A5 AA			lda p_song
   337 04,78AC 18			clc
   338 04,78AD 69 08		xtracks02	adc #TRACKS
   339 04,78AF 85 AA			sta p_song
   340 04,78B1 90 1B			bcc GetTrackLine
   341 04,78B3 E6 AB			inc p_song+1
   342 04,78B5			nn1b
   343 04,78B5 4C CE 78			jmp GetTrackLine
   344 04,78B8			nn2
   345 04,78B8 F0 04			beq nn3
   346 04,78BA			nn2a
   347 04,78BA A9 00			lda #0
   348 04,78BC F0 DF			beq nn1a2
   349 04,78BE			nn3
   350 04,78BE A0 02			ldy #2
   351 04,78C0 B1 AA			lda (p_song),y
   352 04,78C2 AA			tax
   353 04,78C3 C8			iny
   354 04,78C4 B1 AA			lda (p_song),y
   355 04,78C6 85 AB			sta p_song+1
   356 04,78C8 86 AA			stx p_song
   357 04,78CA A2 00			ldx #0
   358 04,78CC F0 B5			beq nn0
   359 04,78CE			GetTrackLine
   360 04,78CE			oo0
   361 04,78CE			oo0a
   362 					IFT FEAT_CONSTANTSPEED==0
   363 04,78CE A9 FF			lda #$ff
   364 = 04,78CF		v_speed equ *-1
   365 04,78D0 8D 2A 79			sta v_bspeed
   366 					EIF
   367 04,78D3 A2 FF			ldx #-1
   368 04,78D5			oo1
   369 04,78D5 E8			inx
   370 04,78D6 DE 58 74			dec trackn_pause,x
   371 04,78D9 D0 4A			bne oo1x
   372 04,78DB			oo1b
   373 04,78DB BD 40 74			lda trackn_db,x
   374 04,78DE 85 AC			sta ns
   375 04,78E0 BD 48 74			lda trackn_hb,x
   376 04,78E3 85 AD			sta ns+1
   377 04,78E5			oo1i
   378 04,78E5 BC 50 74			ldy trackn_idx,x
   379 04,78E8 FE 50 74			inc trackn_idx,x
   380 04,78EB B1 AC			lda (ns),y
   381 04,78ED 85 B2			sta reg1
   382 04,78EF 29 3F			and #$3f
   383 04,78F1 C9 3D			cmp #61
   384 04,78F3 F0 0E			beq oo1a
   385 04,78F5 B0 3D			bcs oo2
   386 04,78F7 9D 60 74			sta trackn_note,x
   387 					IFT FEAT_BASS16
   388 					sta trackn_outnote,x
   389 					EIF
   390 04,78FA C8			iny
   391 04,78FB B1 AC			lda (ns),y
   392 04,78FD 4A			lsr @
   393 04,78FE 29 7E			and #$3f*2
   394 04,7900 9D 80 74			sta trackn_instrx2,x
   395 04,7903			oo1a
   396 04,7903 A9 01			lda #1
   397 04,7905 9D 58 74			sta trackn_pause,x
   398 04,7908 BC 50 74			ldy trackn_idx,x
   399 04,790B FE 50 74			inc trackn_idx,x
   400 04,790E B1 AC			lda (ns),y
   401 04,7910 4A			lsr @
   402 04,7911 66 B2			ror reg1
   403 04,7913 4A			lsr @
   404 04,7914 66 B2			ror reg1
   405 04,7916 A5 B2			lda reg1
   406 04,7918 29 F0			and #$f0
   407
   408 04,791A 4A 4A 4A 4A		:4 lsr @
   409 04,791E A8			tay
   410 04,791F B9 F0 0A		volslid	lda volume_slide+GLOBAL_VOLUME,y
   411
   412 04,7922 9D 68 74			sta trackn_volume,x
   413 04,7925			oo1x
   414 04,7925 E0 07		xtracks03sub1	cpx #TRACKS-1
   415 04,7927 D0 AC			bne oo1
   416 					IFT FEAT_CONSTANTSPEED==0
   417 04,7929 A9 FF			lda #$ff
   418 = 04,792A		v_bspeed equ *-1
   419 04,792B 8D CF 78			sta v_speed
   420 					ELS
   421 					lda #FEAT_CONSTANTSPEED
   422 					EIF
   423 04,792E 8D 40 75			sta v_aspeed
   424 04,7931 4C 79 79			jmp InitOfNewSetInstrumentsOnly
   425 04,7934			oo2
   426 04,7934 C9 3F			cmp #63
   427 04,7936 F0 1B			beq oo63
   428 04,7938 A5 B2			lda reg1
   429 04,793A 29 C0			and #$c0
   430 04,793C F0 09			beq oo62_b
   431 04,793E 0A			asl @
   432 04,793F 2A			rol @
   433 04,7940 2A			rol @
   434 04,7941 9D 58 74			sta trackn_pause,x
   435 04,7944 4C 25 79			jmp oo1x
   436 04,7947			oo62_b
   437 04,7947 C8			iny
   438 04,7948 B1 AC			lda (ns),y
   439 04,794A 9D 58 74			sta trackn_pause,x
   440 04,794D FE 50 74			inc trackn_idx,x
   441 04,7950 4C 25 79			jmp oo1x
   442 04,7953			oo63
   443 04,7953 A5 B2			lda reg1
   444 					IFT FEAT_CONSTANTSPEED==0
   445 04,7955 30 0C			bmi oo63_1X
   446 04,7957 C8			iny
   447 04,7958 B1 AC			lda (ns),y
   448 04,795A 8D 2A 79			sta v_bspeed
   449 04,795D FE 50 74			inc trackn_idx,x
   450 04,7960 4C E5 78			jmp oo1i
   451 04,7963			oo63_1X
   452 					EIF
   453 04,7963 C9 FF			cmp #255
   454 04,7965 F0 09			beq oo63_11
   455 04,7967 C8			iny
   456 04,7968 B1 AC			lda (ns),y
   457 04,796A 9D 50 74			sta trackn_idx,x
   458 04,796D 4C E5 78			jmp oo1i
   459 04,7970			oo63_11
   460 04,7970 4C 7E 78			jmp GetSongLine
   461 04,7973 4C 2D 7A		p2xrmtp3	jmp rmt_p3
   462 04,7976 CA		p2x0 dex
   463 04,7977 30 FA			 bmi p2xrmtp3
   464 04,7979			InitOfNewSetInstrumentsOnly
   465 04,7979 BC 80 74		p2x1 ldy trackn_instrx2,x
   466 04,797C 30 F8			bmi p2x0
   467 					IFT FEAT_SFX
   468 04,797E 20 87 79			jsr SetUpInstrumentY2
   469 04,7981 4C 76 79			jmp p2x0
   470 04,7984			rmt_sfx
   471 04,7984 9D 60 74			sta trackn_note,x
   472 					IFT FEAT_BASS16
   473 					sta trackn_outnote,x
   474 					EIF
   475 				;	lda #$f0				;* sfx note volume*16
   476 				;	sta trackn_volume,x
   477 					EIF
   478 04,7987			SetUpInstrumentY2
   479 04,7987 B1 A4			lda (p_instrstable),y
   480 04,7989 9D 88 74			sta trackn_instrdb,x
   481 04,798C 85 B0			sta nt
   482 04,798E C8			iny
   483 04,798F B1 A4			lda (p_instrstable),y
   484 04,7991 9D 90 74			sta trackn_instrhb,x
   485 04,7994 85 B1			sta nt+1
   486 					IFT FEAT_FILTER
   487 04,7996 A9 01			lda #1
   488 04,7998 9D 28 75			sta trackn_filter,x
   489 					EIF
   490 					IFT FEAT_TABLEGO
   491 					IFT FEAT_FILTER
   492 04,799B A8			tay
   493 					ELS
   494 					ldy #1
   495 					EIF
   496 04,799C B1 B0			lda (nt),y
   497 04,799E 9D 10 75			sta trackn_tablelop,x
   498 04,79A1 C8			iny
   499 					ELS
   500 					ldy #2
   501 					EIF
   502 04,79A2 B1 B0			lda (nt),y
   503 04,79A4 9D A0 74			sta trackn_instrlen,x
   504 04,79A7 C8			iny
   505 04,79A8 B1 B0			lda (nt),y
   506 04,79AA 9D A8 74			sta trackn_instrlop,x
   507 04,79AD C8			iny
   508 04,79AE B1 B0			lda (nt),y
   509 04,79B0 9D E8 74			sta trackn_tabletypespeed,x
   510 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   511 04,79B3 29 3F			and #$3f
   512 					EIF
   513 04,79B5 9D 18 75			sta trackn_tablespeeda,x
   514 					IFT FEAT_TABLEMODE
   515 04,79B8 B1 B0			lda (nt),y
   516 04,79BA 29 40			and #$40
   517 04,79BC 9D F0 74			sta trackn_tablemode,x
   518 					EIF
   519 					IFT FEAT_AUDCTLMANUALSET
   520 					iny
   521 					lda (nt),y
   522 					sta trackn_audctl,x
   523 					iny
   524 					ELS
   525 04,79BF A0 06			ldy #6
   526 					EIF
   527 04,79C1 B1 B0			lda (nt),y
   528 04,79C3 9D B8 74			sta trackn_volumeslidedepth,x
   529 					IFT FEAT_VOLUMEMIN
   530 04,79C6 C8			iny
   531 04,79C7 B1 B0			lda (nt),y
   532 04,79C9 9D C8 74			sta trackn_volumemin,x
   533 					IFT FEAT_EFFECTS
   534 04,79CC C8			iny
   535 					EIF
   536 					ELS
   537 					IFT FEAT_EFFECTS
   538 					ldy #8
   539 					EIF
   540 					EIF
   541 					IFT FEAT_EFFECTS
   542 04,79CD B1 B0			lda (nt),y
   543 04,79CF 9D D0 74			sta trackn_effdelay,x
   544 					IFT FEAT_EFFECTVIBRATO
   545 04,79D2 C8			iny
   546 04,79D3 B1 B0			lda (nt),y
   547 04,79D5 A8			tay
   548 04,79D6 B9 92 75			lda vibtabbeg,y
   549 04,79D9 9D D8 74			sta trackn_effvibratoa,x
   550 					EIF
   551 					IFT FEAT_EFFECTFSHIFT
   552 04,79DC A0 0A			ldy #10
   553 04,79DE B1 B0			lda (nt),y
   554 04,79E0 9D E0 74			sta trackn_effshift,x
   555 					EIF
   556 					EIF
   557 04,79E3 A9 80			lda #128
   558 04,79E5 9D C0 74			sta trackn_volumeslidevalue,x
   559 04,79E8 9D 80 74			sta trackn_instrx2,x
   560 04,79EB 0A			asl @
   561 04,79EC 9D B0 74			sta trackn_instrreachend,x
   562 04,79EF 9D 78 74			sta trackn_shiftfrq,x
   563 04,79F2 A8			tay
   564 04,79F3 B1 B0			lda (nt),y
   565 04,79F5 9D 08 75			sta trackn_tableend,x
   566 04,79F8 69 00			adc #0
   567 04,79FA 9D 98 74			sta trackn_instridx,x
   568 04,79FD A9 0C			lda #INSTRPAR
   569 04,79FF 9D 00 75			sta trackn_tablea,x
   570 04,7A02 A8			tay
   571 04,7A03 B1 B0			lda (nt),y
   572 04,7A05 9D F8 74			sta trackn_tablenote,x
   573 04,7A08			xata_rtshere
   574 					IFT FEAT_SFX
   575 04,7A08 60			rts
   576 					ELS
   577 					jmp p2x0
   578 					EIF
   579 04,7A09			rmt_play
   580 04,7A09			rmt_p0
   581 04,7A09 20 53 7C			jsr SetPokey
   582 04,7A0C			rmt_p1
   583 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
   584 04,7A0C CE 51 7C			dec v_ainstrspeed
   585 04,7A0F D0 1C			bne rmt_p3
   586 					EIF
   587 					IFT FEAT_INSTRSPEED==0
   588 04,7A11 A9 FF			lda #$ff
   589 = 04,7A12		v_instrspeed	equ *-1
   590 04,7A13 8D 51 7C			sta v_ainstrspeed
   591 					ELI FEAT_INSTRSPEED>1
   592 					lda #FEAT_INSTRSPEED
   593 					sta v_ainstrspeed
   594 					EIF
   595 04,7A16			rmt_p2
   596 04,7A16 CE 40 75			dec v_aspeed
   597 04,7A19 D0 12			bne rmt_p3
   598 04,7A1B EE 1F 7A			inc v_abeat
   599 04,7A1E A9 FF			lda #$ff
   600 = 04,7A1F		v_abeat equ *-1
   601 04,7A20 C9 FF			cmp #$ff
   602 = 04,7A21		v_maxtracklen equ *-1
   603 04,7A22 F0 03			beq p2o3
   604 04,7A24 4C CE 78			jmp GetTrackLine
   605 04,7A27			p2o3
   606 04,7A27 4C 7E 78			jmp GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   607 04,7A2A 4C B4 7B		go_ppnext	jmp ppnext
   608 04,7A2D			rmt_p3
   609 04,7A2D A9 76			lda #>frqtab
   610 04,7A2F 85 AF			sta nr+1
   611 04,7A31 A2 07		xtracks05sub1	ldx #TRACKS-1
   612 04,7A33			pp1
   613 04,7A33 BD 90 74			lda trackn_instrhb,x
   614 04,7A36 F0 F2			beq go_ppnext
   615 04,7A38 85 AD			sta ns+1
   616 04,7A3A BD 88 74			lda trackn_instrdb,x
   617 04,7A3D 85 AC			sta ns
   618 04,7A3F BC 98 74			ldy trackn_instridx,x
   619 04,7A42 B1 AC			lda (ns),y
   620 04,7A44 85 B2			sta reg1
   621 04,7A46 C8			iny
   622 04,7A47 B1 AC			lda (ns),y
   623 04,7A49 85 B3			sta reg2
   624 04,7A4B C8			iny
   625 04,7A4C B1 AC			lda (ns),y
   626 04,7A4E 85 B4			sta reg3
   627 04,7A50 C8			iny
   628 04,7A51 98			tya
   629 04,7A52 DD A0 74			cmp trackn_instrlen,x
   630 04,7A55 90 0A			bcc pp2
   631 04,7A57 F0 08			beq pp2
   632 04,7A59 A9 80			lda #$80
   633 04,7A5B 9D B0 74			sta trackn_instrreachend,x
   634 04,7A5E			pp1b
   635 04,7A5E BD A8 74			lda trackn_instrlop,x
   636 04,7A61 9D 98 74		pp2	sta trackn_instridx,x
   637 04,7A64 A5 B2			lda reg1
   638 					IFT TRACKS>4
   639 04,7A66 E0 04			cpx #4
   640 04,7A68 90 04			bcc pp2s
   641 04,7A6A 4A			lsr @
   642 04,7A6B 4A			lsr @
   643 04,7A6C 4A			lsr @
   644 04,7A6D 4A			lsr @
   645 04,7A6E			pp2s
   646 					EIF
   647 04,7A6E 29 0F			and #$0f
   648 04,7A70 1D 68 74			ora trackn_volume,x
   649 04,7A73 A8			tay
   650 04,7A74 B9 00 77			lda volumetab,y
   651 04,7A77 85 B5			sta tmp
   652 04,7A79 A5 B3			lda reg2
   653 04,7A7B 29 0E			and #$0e
   654 04,7A7D A8			tay
   655 04,7A7E B9 82 75			lda tabbeganddistor,y
   656 04,7A81 85 AE			sta nr
   657 04,7A83 A5 B5			lda tmp
   658 04,7A85 19 83 75			ora tabbeganddistor+1,y
   659 04,7A88 9D 38 75			sta trackn_audc,x
   660 04,7A8B			InstrumentsEffects
   661 					IFT FEAT_EFFECTS
   662 04,7A8B BD D0 74			lda trackn_effdelay,x
   663 04,7A8E F0 21			beq ei2
   664 04,7A90 C9 01			cmp #1
   665 04,7A92 D0 1A			bne ei1
   666 04,7A94 BD 78 74			lda trackn_shiftfrq,x
   667 					IFT FEAT_EFFECTFSHIFT
   668 04,7A97 18			clc
   669 04,7A98 7D E0 74			adc trackn_effshift,x
   670 					EIF
   671 					IFT FEAT_EFFECTVIBRATO
   672 04,7A9B 18			clc
   673 04,7A9C BC D8 74			ldy trackn_effvibratoa,x
   674 04,7A9F 79 96 75			adc vib0,y
   675 					EIF
   676 04,7AA2 9D 78 74			sta trackn_shiftfrq,x
   677 					IFT FEAT_EFFECTVIBRATO
   678 04,7AA5 B9 AB 75			lda vibtabnext,y
   679 04,7AA8 9D D8 74			sta trackn_effvibratoa,x
   680 					EIF
   681 04,7AAB 4C B1 7A			jmp ei2
   682 04,7AAE			ei1
   683 04,7AAE DE D0 74			dec trackn_effdelay,x
   684 04,7AB1			ei2
   685 					EIF
   686 04,7AB1 BC 08 75			ldy trackn_tableend,x
   687 04,7AB4 C0 0D			cpy #INSTRPAR+1
   688 04,7AB6 90 3C			bcc ei3
   689 04,7AB8 BD 18 75			lda trackn_tablespeeda,x
   690 04,7ABB 10 31			bpl ei2f
   691 04,7ABD			ei2c
   692 04,7ABD 98			tya
   693 04,7ABE DD 00 75			cmp trackn_tablea,x
   694 04,7AC1 D0 08			bne ei2c2
   695 					IFT FEAT_TABLEGO
   696 04,7AC3 BD 10 75			lda trackn_tablelop,x
   697 					ELS
   698 					lda #INSTRPAR
   699 					EIF
   700 04,7AC6 9D 00 75			sta trackn_tablea,x
   701 04,7AC9 D0 03			bne ei2a
   702 04,7ACB			ei2c2
   703 04,7ACB FE 00 75			inc trackn_tablea,x
   704 04,7ACE			ei2a
   705 04,7ACE BD 88 74			lda trackn_instrdb,x
   706 04,7AD1 85 B0			sta nt
   707 04,7AD3 BD 90 74			lda trackn_instrhb,x
   708 04,7AD6 85 B1			sta nt+1
   709 04,7AD8 BC 00 75			ldy trackn_tablea,x
   710 04,7ADB B1 B0			lda (nt),y
   711 					IFT FEAT_TABLEMODE
   712 04,7ADD BC F0 74			ldy trackn_tablemode,x
   713 04,7AE0 F0 04			beq ei2e
   714 04,7AE2 18			clc
   715 04,7AE3 7D F8 74			adc trackn_tablenote,x
   716 04,7AE6			ei2e
   717 					EIF
   718 04,7AE6 9D F8 74			sta trackn_tablenote,x
   719 04,7AE9 BD E8 74			lda trackn_tabletypespeed,x
   720 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   721 04,7AEC 29 3F			and #$3f
   722 					EIF
   723 04,7AEE			ei2f
   724 04,7AEE 38			sec
   725 04,7AEF E9 01			sbc #1
   726 04,7AF1 9D 18 75			sta trackn_tablespeeda,x
   727 04,7AF4			ei3
   728 04,7AF4 BD B0 74			lda trackn_instrreachend,x
   729 04,7AF7 10 1F			bpl ei4
   730 04,7AF9 BD 68 74			lda trackn_volume,x
   731 04,7AFC F0 1A			beq ei4
   732 					IFT FEAT_VOLUMEMIN
   733 04,7AFE DD C8 74			cmp trackn_volumemin,x
   734 04,7B01 F0 15			beq ei4
   735 04,7B03 90 13			bcc ei4
   736 					EIF
   737 04,7B05 A8			tay
   738 04,7B06 BD C0 74			lda trackn_volumeslidevalue,x
   739 04,7B09 18			clc
   740 04,7B0A 7D B8 74			adc trackn_volumeslidedepth,x
   741 04,7B0D 9D C0 74			sta trackn_volumeslidevalue,x
   742 04,7B10 90 06			bcc ei4
   743 04,7B12 98			tya
   744 04,7B13 E9 10			sbc #16
   745 04,7B15 9D 68 74			sta trackn_volume,x
   746 04,7B18			ei4
   747 					IFT FEAT_COMMAND2
   748 					lda #0
   749 					sta frqaddcmd2
   750 					EIF
   751 04,7B18 A5 B3			lda reg2
   752 04,7B1A 9D 20 75			sta trackn_command,x
   753 04,7B1D 29 70			and #$70
   754 04,7B1F 4A			lsr @
   755 04,7B20 4A			lsr @
   756 04,7B21 8D 25 7B			sta jmx+1
   757 04,7B24 90 FE		jmx	bcc *
   758 04,7B26 4C 77 7B			jmp cmd0
   759 04,7B29 EA			nop
   760 04,7B2A 4C 45 7B			jmp cmd1
   761 04,7B2D EA			nop
   762 04,7B2E 4C 4A 7B			jmp cmd2
   763 04,7B31 EA			nop
   764 04,7B32 4C 4A 7B			jmp cmd3
   765 04,7B35 EA			nop
   766 04,7B36 4C 56 7B			jmp cmd4
   767 04,7B39 EA			nop
   768 04,7B3A 4C 65 7B			jmp cmd5
   769 04,7B3D EA			nop
   770 04,7B3E 4C 68 7B			jmp cmd6
   771 04,7B41 EA			nop
   772 04,7B42 4C 77 7B			jmp cmd7
   773 04,7B45			cmd1
   774 					IFT FEAT_COMMAND1
   775 04,7B45 A5 B4			lda reg3
   776 04,7B47 4C B1 7B			jmp cmd0c
   777 					EIF
   778 04,7B4A			cmd2
   779 					IFT FEAT_COMMAND2
   780 					lda reg3
   781 					sta frqaddcmd2
   782 					lda trackn_note,x
   783 					jmp cmd0a
   784 					EIF
   785 04,7B4A			cmd3
   786 					IFT FEAT_COMMAND3
   787 04,7B4A BD 60 74			lda trackn_note,x
   788 04,7B4D 18			clc
   789 04,7B4E 65 B4			adc reg3
   790 04,7B50 9D 60 74			sta trackn_note,x
   791 04,7B53 4C 7D 7B			jmp cmd0a
   792 					EIF
   793 04,7B56			cmd4
   794 					IFT FEAT_COMMAND4
   795 04,7B56 BD 78 74			lda trackn_shiftfrq,x
   796 04,7B59 18			clc
   797 04,7B5A 65 B4			adc reg3
   798 04,7B5C 9D 78 74			sta trackn_shiftfrq,x
   799 04,7B5F BD 60 74			lda trackn_note,x
   800 04,7B62 4C 7D 7B			jmp cmd0a
   801 					EIF
   802 04,7B65			cmd5
   803 					IFT FEAT_COMMAND5&&FEAT_PORTAMENTO
   804 					IFT FEAT_TABLETYPE
   805 					lda trackn_tabletypespeed,x
   806 					bpl cmd5a1
   807 					ldy trackn_note,x
   808 					lda (nr),y
   809 					clc
   810 					adc trackn_tablenote,x
   811 					jmp cmd5ax
   812 					EIF
   813 				cmd5a1
   814 					lda trackn_note,x
   815 					clc
   816 					adc trackn_tablenote,x
   817 					cmp #61
   818 					bcc cmd5a2
   819 					lda #63
   820 				cmd5a2
   821 					tay
   822 					lda (nr),y
   823 				cmd5ax
   824 					sta trackn_portafrqc,x
   825 					ldy reg3
   826 					bne cmd5a
   827 					sta trackn_portafrqa,x
   828 				cmd5a
   829 					tya
   830 					lsr @
   831 					lsr @
   832 					lsr @
   833 					lsr @
   834 					sta trackn_portaspeed,x
   835 					sta trackn_portaspeeda,x
   836 					lda reg3
   837 					and #$0f
   838 					sta trackn_portadepth,x
   839 					lda trackn_note,x
   840 					jmp cmd0a
   841 					ELI FEAT_COMMAND5
   842 04,7B65 4C B4 7B			jmp pp9
   843 					EIF
   844 04,7B68			cmd6
   845 					IFT FEAT_COMMAND6&&FEAT_FILTER
   846 04,7B68 A5 B4			lda reg3
   847 04,7B6A 18			clc
   848 04,7B6B 7D 28 75			adc trackn_filter,x
   849 04,7B6E 9D 28 75			sta trackn_filter,x
   850 04,7B71 BD 60 74			lda trackn_note,x
   851 04,7B74 4C 7D 7B			jmp cmd0a
   852 					ELI FEAT_COMMAND6
   853 					jmp pp9
   854 					EIF
   855 04,7B77			cmd7
   856 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   857 					IFT FEAT_COMMAND7SETNOTE
   858 					lda reg3
   859 					IFT FEAT_COMMAND7VOLUMEONLY
   860 					cmp #$80
   861 					beq cmd7a
   862 					EIF
   863 					sta trackn_note,x
   864 					jmp cmd0a
   865 					EIF
   866 					IFT FEAT_COMMAND7VOLUMEONLY
   867 				cmd7a
   868 					lda trackn_audc,x
   869 					ora #$f0
   870 					sta trackn_audc,x
   871 					lda trackn_note,x
   872 					jmp cmd0a
   873 					EIF
   874 					EIF
   875 04,7B77			cmd0
   876 04,7B77 BD 60 74			lda trackn_note,x
   877 04,7B7A 18			clc
   878 04,7B7B 65 B4			adc reg3
   879 04,7B7D			cmd0a
   880 					IFT FEAT_TABLETYPE
   881 04,7B7D BC E8 74			ldy trackn_tabletypespeed,x
   882 04,7B80 30 19			bmi cmd0b
   883 					EIF
   884 04,7B82 18			clc
   885 04,7B83 7D F8 74			adc trackn_tablenote,x
   886 04,7B86 C9 3D			cmp #61
   887 04,7B88 90 07			bcc cmd0a1
   888 04,7B8A A9 00			lda #0
   889 04,7B8C 9D 38 75			sta trackn_audc,x
   890 04,7B8F A9 3F			lda #63
   891 04,7B91			cmd0a1
   892 					IFT FEAT_BASS16
   893 					sta trackn_outnote,x
   894 					EIF
   895 04,7B91 A8			tay
   896 04,7B92 B1 AE			lda (nr),y
   897 04,7B94 18			clc
   898 04,7B95 7D 78 74			adc trackn_shiftfrq,x
   899 					IFT FEAT_COMMAND2
   900 					clc
   901 					adc frqaddcmd2
   902 					EIF
   903 					IFT FEAT_TABLETYPE
   904 04,7B98 4C B1 7B			jmp cmd0c
   905 04,7B9B			cmd0b
   906 04,7B9B C9 3D			cmp #61
   907 04,7B9D 90 07			bcc cmd0b1
   908 04,7B9F A9 00			lda #0
   909 04,7BA1 9D 38 75			sta trackn_audc,x
   910 04,7BA4 A9 3F			lda #63
   911 04,7BA6			cmd0b1
   912 04,7BA6 A8			tay
   913 04,7BA7 BD 78 74			lda trackn_shiftfrq,x
   914 04,7BAA 18			clc
   915 04,7BAB 7D F8 74			adc trackn_tablenote,x
   916 04,7BAE 18			clc
   917 04,7BAF 71 AE			adc (nr),y
   918 					IFT FEAT_COMMAND2
   919 					clc
   920 					adc frqaddcmd2
   921 					EIF
   922 					EIF
   923 04,7BB1			cmd0c
   924 04,7BB1 9D 30 75			sta trackn_audf,x
   925 04,7BB4			pp9
   926 					IFT FEAT_PORTAMENTO
   927 					lda trackn_portaspeeda,x
   928 					beq pp10
   929 					dec trackn_portaspeeda,x
   930 					bne pp10
   931 					lda trackn_portaspeed,x
   932 					sta trackn_portaspeeda,x
   933 					lda trackn_portafrqa,x
   934 					cmp trackn_portafrqc,x
   935 					beq pp10
   936 					bcs pps1
   937 					adc trackn_portadepth,x
   938 					bcs pps8
   939 					cmp trackn_portafrqc,x
   940 					bcs pps8
   941 					jmp pps9
   942 				pps1
   943 					sbc trackn_portadepth,x
   944 					bcc pps8
   945 					cmp trackn_portafrqc,x
   946 					bcs pps9
   947 				pps8
   948 					lda trackn_portafrqc,x
   949 				pps9
   950 					sta trackn_portafrqa,x
   951 				pp10
   952 					lda reg2
   953 					and #$01
   954 					beq pp11
   955 					lda trackn_portafrqa,x
   956 					clc
   957 					adc trackn_shiftfrq,x
   958 					sta trackn_audf,x
   959 				pp11
   960 					EIF
   961 04,7BB4			ppnext
   962 04,7BB4 CA			dex
   963 04,7BB5 30 03			bmi rmt_p4
   964 04,7BB7 4C 33 7A			jmp pp1
   965 04,7BBA			rmt_p4
   966 					IFT FEAT_AUDCTLMANUALSET
   967 					lda trackn_audctl+0
   968 					ora trackn_audctl+1
   969 					ora trackn_audctl+2
   970 					ora trackn_audctl+3
   971 					tax
   972 					ELS
   973 04,7BBA A2 00			ldx #0
   974 					EIF
   975 04,7BBC			qq1
   976 04,7BBC 8E B6 7C			stx v_audctl
   977 					IFT FEAT_FILTER
   978 					IFT FEAT_FILTERG0L
   979 04,7BBF AD 20 75			lda trackn_command+0
   980 04,7BC2 10 1A			bpl qq2
   981 04,7BC4 AD 38 75			lda trackn_audc+0
   982 04,7BC7 29 0F			and #$0f
   983 04,7BC9 F0 13			beq qq2
   984 04,7BCB AD 30 75			lda trackn_audf+0
   985 04,7BCE 18			clc
   986 04,7BCF 6D 28 75			adc trackn_filter+0
   987 04,7BD2 8D 32 75			sta trackn_audf+2
   988 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
   989 					lda trackn_audc+2
   990 					and #$10
   991 					bne qq1a
   992 					EIF
   993 04,7BD5 A9 00			lda #0
   994 04,7BD7 8D 3A 75			sta trackn_audc+2
   995 04,7BDA			qq1a
   996 04,7BDA 8A			txa
   997 04,7BDB 09 04			ora #4
   998 04,7BDD AA			tax
   999 					EIF
  1000 04,7BDE			qq2
  1001 					IFT FEAT_FILTERG1L
  1002 04,7BDE AD 21 75			lda trackn_command+1
  1003 04,7BE1 10 1A			bpl qq3
  1004 04,7BE3 AD 39 75			lda trackn_audc+1
  1005 04,7BE6 29 0F			and #$0f
  1006 04,7BE8 F0 13			beq qq3
  1007 04,7BEA AD 31 75			lda trackn_audf+1
  1008 04,7BED 18			clc
  1009 04,7BEE 6D 29 75			adc trackn_filter+1
  1010 04,7BF1 8D 33 75			sta trackn_audf+3
  1011 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3L
  1012 					lda trackn_audc+3
  1013 					and #$10
  1014 					bne qq2a
  1015 					EIF
  1016 04,7BF4 A9 00			lda #0
  1017 04,7BF6 8D 3B 75			sta trackn_audc+3
  1018 04,7BF9			qq2a
  1019 04,7BF9 8A			txa
  1020 04,7BFA 09 02			ora #2
  1021 04,7BFC AA			tax
  1022 					EIF
  1023 04,7BFD			qq3
  1024 					IFT FEAT_FILTERG0L||FEAT_FILTERG1L
  1025 04,7BFD EC B6 7C			cpx v_audctl
  1026 04,7C00 D0 00			bne qq5
  1027 					EIF
  1028 					EIF
  1029 					IFT FEAT_BASS16
  1030 					IFT FEAT_BASS16G1L
  1031 					lda trackn_command+1
  1032 					and #$0e
  1033 					cmp #6
  1034 					bne qq4
  1035 					lda trackn_audc+1
  1036 					and #$0f
  1037 					beq qq4
  1038 					ldy trackn_outnote+1
  1039 					lda frqtabbasslo,y
  1040 					sta trackn_audf+0
  1041 					lda frqtabbasshi,y
  1042 					sta trackn_audf+1
  1043 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0L
  1044 					lda trackn_audc+0
  1045 					and #$10
  1046 					bne qq3a
  1047 					EIF
  1048 					lda #0
  1049 					sta trackn_audc+0
  1050 				qq3a
  1051 					txa
  1052 					ora #$50
  1053 					tax
  1054 					EIF
  1055 				qq4
  1056 					IFT FEAT_BASS16G3L
  1057 					lda trackn_command+3
  1058 					and #$0e
  1059 					cmp #6
  1060 					bne qq5
  1061 					lda trackn_audc+3
  1062 					and #$0f
  1063 					beq qq5
  1064 					ldy trackn_outnote+3
  1065 					lda frqtabbasslo,y
  1066 					sta trackn_audf+2
  1067 					lda frqtabbasshi,y
  1068 					sta trackn_audf+3
  1069 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1070 					lda trackn_audc+2
  1071 					and #$10
  1072 					bne qq4a
  1073 					EIF
  1074 					lda #0
  1075 					sta trackn_audc+2
  1076 				qq4a
  1077 					txa
  1078 					ora #$28
  1079 					tax
  1080 					EIF
  1081 					EIF
  1082 04,7C02			qq5
  1083 04,7C02 8E B6 7C			stx v_audctl
  1084 					IFT TRACKS>4
  1085 					IFT FEAT_AUDCTLMANUALSET
  1086 					lda trackn_audctl+4
  1087 					ora trackn_audctl+5
  1088 					ora trackn_audctl+6
  1089 					ora trackn_audctl+7
  1090 					tax
  1091 					ELS
  1092 04,7C05 A2 00			ldx #0
  1093 					EIF
  1094 04,7C07 8E 54 7C			stx v_audctl2
  1095 					IFT FEAT_FILTER
  1096 					IFT FEAT_FILTERG0R
  1097 04,7C0A AD 24 75			lda trackn_command+0+4
  1098 04,7C0D 10 1A			bpl qs2
  1099 04,7C0F AD 3C 75			lda trackn_audc+0+4
  1100 04,7C12 29 0F			and #$0f
  1101 04,7C14 F0 13			beq qs2
  1102 04,7C16 AD 34 75			lda trackn_audf+0+4
  1103 04,7C19 18			clc
  1104 04,7C1A 6D 2C 75			adc trackn_filter+0+4
  1105 04,7C1D 8D 36 75			sta trackn_audf+2+4
  1106 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1107 					lda trackn_audc+2+4
  1108 					and #$10
  1109 					bne qs1a
  1110 					EIF
  1111 04,7C20 A9 00			lda #0
  1112 04,7C22 8D 3E 75			sta trackn_audc+2+4
  1113 04,7C25			qs1a
  1114 04,7C25 8A			txa
  1115 04,7C26 09 04			ora #4
  1116 04,7C28 AA			tax
  1117 					EIF
  1118 04,7C29			qs2
  1119 					IFT FEAT_FILTERG1R
  1120 04,7C29 AD 25 75			lda trackn_command+1+4
  1121 04,7C2C 10 1A			bpl qs3
  1122 04,7C2E AD 3D 75			lda trackn_audc+1+4
  1123 04,7C31 29 0F			and #$0f
  1124 04,7C33 F0 13			beq qs3
  1125 04,7C35 AD 35 75			lda trackn_audf+1+4
  1126 04,7C38 18			clc
  1127 04,7C39 6D 2D 75			adc trackn_filter+1+4
  1128 04,7C3C 8D 37 75			sta trackn_audf+3+4
  1129 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3R
  1130 					lda trackn_audc+3+4
  1131 					and #$10
  1132 					bne qs2a
  1133 					EIF
  1134 04,7C3F A9 00			lda #0
  1135 04,7C41 8D 3F 75			sta trackn_audc+3+4
  1136 04,7C44			qs2a
  1137 04,7C44 8A			txa
  1138 04,7C45 09 02			ora #2
  1139 04,7C47 AA			tax
  1140 					EIF
  1141 04,7C48			qs3
  1142 					IFT FEAT_FILTERG0R||FEAT_FILTERG1R
  1143 04,7C48 EC 54 7C			cpx v_audctl2
  1144 04,7C4B D0 00			bne qs5
  1145 					EIF
  1146 					EIF
  1147 					IFT FEAT_BASS16
  1148 					IFT FEAT_BASS16G1R
  1149 					lda trackn_command+1+4
  1150 					and #$0e
  1151 					cmp #6
  1152 					bne qs4
  1153 					lda trackn_audc+1+4
  1154 					and #$0f
  1155 					beq qs4
  1156 					ldy trackn_outnote+1+4
  1157 					lda frqtabbasslo,y
  1158 					sta trackn_audf+0+4
  1159 					lda frqtabbasshi,y
  1160 					sta trackn_audf+1+4
  1161 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0R
  1162 					lda trackn_audc+0+4
  1163 					and #$10
  1164 					bne qs3a
  1165 					EIF
  1166 					lda #0
  1167 					sta trackn_audc+0+4
  1168 				qs3a
  1169 					txa
  1170 					ora #$50
  1171 					tax
  1172 					EIF
  1173 				qs4
  1174 					IFT FEAT_BASS16G3R
  1175 					lda trackn_command+3+4
  1176 					and #$0e
  1177 					cmp #6
  1178 					bne qs5
  1179 					lda trackn_audc+3+4
  1180 					and #$0f
  1181 					beq qs5
  1182 					ldy trackn_outnote+3+4
  1183 					lda frqtabbasslo,y
  1184 					sta trackn_audf+2+4
  1185 					lda frqtabbasshi,y
  1186 					sta trackn_audf+3+4
  1187 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1188 					lda trackn_audc+2+4
  1189 					and #$10
  1190 					bne qs4a
  1191 					EIF
  1192 					lda #0
  1193 					sta trackn_audc+2+4
  1194 				qs4a
  1195 					txa
  1196 					ora #$28
  1197 					tax
  1198 					EIF
  1199 					EIF
  1200 04,7C4D			qs5
  1201 04,7C4D 8E 54 7C			stx v_audctl2
  1202 					EIF
  1203 04,7C50			rmt_p5
  1204 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
  1205 04,7C50 A9 FF			lda #$ff
  1206 = 04,7C51		v_ainstrspeed equ *-1
  1207 					ELS
  1208 					lda #1
  1209 					EIF
  1210 04,7C52 60			rts
  1211 04,7C53			SetPokey
  1212 					IFT STEREOMODE==1		;* L1 L2 L3 L4 R1 R2 R3 R4
  1213 04,7C53 A0 FF			ldy #$ff
  1214 = 04,7C54		v_audctl2 equ *-1
  1215 04,7C55 AD 34 75			lda trackn_audf+0+4
  1216 04,7C58 AE 30 75			ldx trackn_audf+0
  1217 04,7C5B 8D 10 D2		xstastx01	sta $d210
  1218 04,7C5E 8E 00 D2			stx $d200
  1219 04,7C61 AD 3C 75			lda trackn_audc+0+4
  1220 04,7C64 AE 38 75			ldx trackn_audc+0
  1221 04,7C67 8D 11 D2		xstastx02	sta $d211
  1222 04,7C6A 8E 01 D2			stx $d201
  1223 04,7C6D AD 35 75			lda trackn_audf+1+4
  1224 04,7C70 AE 31 75			ldx trackn_audf+1
  1225 04,7C73 8D 12 D2		xstastx03	sta $d212
  1226 04,7C76 8E 02 D2			stx $d202
  1227 04,7C79 AD 3D 75			lda trackn_audc+1+4
  1228 04,7C7C AE 39 75			ldx trackn_audc+1
  1229 04,7C7F 8D 13 D2		xstastx04	sta $d213
  1230 04,7C82 8E 03 D2			stx $d203
  1231 04,7C85 AD 36 75			lda trackn_audf+2+4
  1232 04,7C88 AE 32 75			ldx trackn_audf+2
  1233 04,7C8B 8D 14 D2		xstastx05	sta $d214
  1234 04,7C8E 8E 04 D2			stx $d204
  1235 04,7C91 AD 3E 75			lda trackn_audc+2+4
  1236 04,7C94 AE 3A 75			ldx trackn_audc+2
  1237 04,7C97 8D 15 D2		xstastx06	sta $d215
  1238 04,7C9A 8E 05 D2			stx $d205
  1239 04,7C9D AD 37 75			lda trackn_audf+3+4
  1240 04,7CA0 AE 33 75			ldx trackn_audf+3
  1241 04,7CA3 8D 16 D2		xstastx07	sta $d216
  1242 04,7CA6 8E 06 D2			stx $d206
  1243 04,7CA9 AD 3F 75			lda trackn_audc+3+4
  1244 04,7CAC AE 3B 75			ldx trackn_audc+3
  1245 04,7CAF 8D 17 D2		xstastx08	sta $d217
  1246 04,7CB2 8E 07 D2			stx $d207
  1247 04,7CB5 A9 FF			lda #$ff
  1248 = 04,7CB6		v_audctl equ *-1
  1249 04,7CB7 8C 18 D2		xstysta01	sty $d218
  1250 04,7CBA 8D 08 D2			sta $d208
  1251 					ELI STEREOMODE==0		;* L1 L2 L3 L4
  1252 					ldy #$ff
  1253 				v_audctl equ *-1
  1254 					lda trackn_audf+0
  1255 					ldx trackn_audc+0
  1256 					sta $d200
  1257 					stx $d201
  1258 					lda trackn_audf+1
  1259 					ldx trackn_audc+1
  1260 					sta $d200+2
  1261 					stx $d201+2
  1262 					lda trackn_audf+2
  1263 					ldx trackn_audc+2
  1264 					sta $d200+4
  1265 					stx $d201+4
  1266 					lda trackn_audf+3
  1267 					ldx trackn_audc+3
  1268 					sta $d200+6
  1269 					stx $d201+6
  1270 					sty $d208
  1271 					ELI STEREOMODE==2		;* L1 R2 R3 L4
  1272 					ldy #$ff
  1273 				v_audctl equ *-1
  1274 					lda trackn_audf+0
  1275 					ldx trackn_audc+0
  1276 					sta $d200
  1277 					stx $d201
  1278 					sta $d210
  1279 					lda trackn_audf+1
  1280 					ldx trackn_audc+1
  1281 					sta $d210+2
  1282 					stx $d211+2
  1283 					lda trackn_audf+2
  1284 					ldx trackn_audc+2
  1285 					sta $d210+4
  1286 					stx $d211+4
  1287 					sta $d200+4
  1288 					lda trackn_audf+3
  1289 					ldx trackn_audc+3
  1290 					sta $d200+6
  1291 					stx $d201+6
  1292 					sta $d210+6
  1293 					sty $d218
  1294 					sty $d208
  1295 					ELI STEREOMODE==3		;* L1 L2 R3 R4
  1296 					ldy #$ff
  1297 				v_audctl equ *-1
  1298 					lda trackn_audf+0
  1299 					ldx trackn_audc+0
  1300 					sta $d200
  1301 					stx $d201
  1302 					lda trackn_audf+1
  1303 					ldx trackn_audc+1
  1304 					sta $d200+2
  1305 					stx $d201+2
  1306 					lda trackn_audf+2
  1307 					ldx trackn_audc+2
  1308 					sta $d210+4
  1309 					stx $d211+4
  1310 					sta $d200+4
  1311 					lda trackn_audf+3
  1312 					ldx trackn_audc+3
  1313 					sta $d210+6
  1314 					stx $d211+6
  1315 					sta $d200+6
  1316 					sty $d218
  1317 					sty $d208
  1318 					EIF
  1319 04,7CBD 60			rts
  1320 04,7CBE			RMTPLAYEREND
   411
   412 04,7CBE			read_KeyJoy_playRMT_timer
   413 04,7CBE				icl 'read_KeyJoy_playRMT.asm'
Source: read_KeyJoy_playRMT.asm
     1
     2 				;--- odczyt joya i przycisku
     3
     4 				;	lda #0
     5 				;read_joy equ *-1
     6 				;	bne _skip
     7
     8
     9 				* ---------------------------
    10 				* ---	READ KEY VOLUME
    11 				* ---------------------------
    12 04,7CBE			.local	read_key_volume
    13
    14 04,7CBE AD 0F D2			lda $d20f
    15 04,7CC1 29 04			and #4
    16 04,7CC3 D0 6F			bne dec_delay
    17
    18 04,7CC5 AD 09 D2			lda $d209
    19 04,7CC8 29 3F			and #%00111111				; odczyt klawisza tak¿e ze SHIFT-em
    20
    21 				; --- escape
    22
    23 04,7CCA 0D 50 83			ora NMI.vbltim
    24
    25 04,7CCD C9 40			cmp #$40				; kody klawiszy >=64 beda ignorowane
    26 04,7CCF B0 12			bcs @key_esc.quit
    27
    28 04,7CD1 0A			asl @
    29 04,7CD2 8D D6 7C			sta jkey+1
    30
    31 04,7CD5 6C 00 7F		jkey	jmp (KeyBind)
    32
    33
    34 				; ---	escape
    35
    36 04,7CD8			.local	@key_esc
    37
    38 04,7CD8 A9 02			lda #deathCode.esc_key
    39 04,7CDA 8D C8 9A			sta GameEnd.reason
    40
    41 04,7CDD A9 01			lda #1
    42 04,7CDF 85 7F			sta objects				; wymuszamy koniec dzia³ania silnika
    43 04,7CE1 85 B7			sta active
    44
    45 04,7CE3 4C 98 7D		quit	jmp read_key2joy
    46
    47 				.endl
    48
    49
    50 				; --- sound ON/OFF
    51
    52 04,7CE6			.local	@key_o
    53
    54 04,7CE6 CD 52 83			cmp NMI.old_key
    55 04,7CE9 F0 49			beq dec_delay
    56
    57 04,7CEB 8D 52 83			sta NMI.old_key
    58
    59 04,7CEE A9 FF 8D D9 7D		mva #$ff on_off
    60
    61 04,7CF3 4C 98 7D			jmp read_key2joy
    62 				.endl
    63
    64
    65 04,7CF6			.local	@key_p
    66
    67 04,7CF6 CD 52 83			cmp NMI.old_key
    68 04,7CF9 F0 39			beq dec_delay
    69
    70 04,7CFB 8D 52 83			sta NMI.old_key
    71
    72 04,7CFE A9 00 8D D9 7D		mva #0 on_off
    73 04,7D03 20 09 78			jsr rmt2.RASTERMUSICTRACKER+9
    74
    75 04,7D06 4C 98 7D			jmp read_key2joy
    76 				.endl
    77
    78
    79 				; --- space
    80
    81 04,7D09			.local	@key_space
    82
    83 04,7D09 CD 52 83			cmp NMI.old_key
    84 04,7D0C F0 26			beq dec_delay
    85
    86 04,7D0E 8D 52 83			sta NMI.old_key
    87
    88 04,7D11 A9 1B 8D 1D 3C + 	mwa #napis_pause LOOP.napisy
    89
    90 04,7D1B 8D D9 97			sta wait_AND_blink.get_key		; wartoœæ <> od kodu SPACJI
    91
    92 04,7D1E 4C 98 7D			jmp read_key2joy
    93 				.endl
    94
    95 				; --- sfx volume
    96
    97 04,7D21			.local	@key_v					; 'V' sfx volume UP
    98
    99 04,7D21 CD 52 83			cmp NMI.old_key
   100 04,7D24 F0 0E			beq dec_delay
   101
   102 04,7D26 8D 52 83			sta NMI.old_key
   103
   104 04,7D29 AD 0C 7E			lda sfx_vol
   105 04,7D2C C9 F0			cmp #$f0
   106 04,7D2E F0 68			beq read_key2joy
   107 04,7D30 A9 10			lda #$10
   108 04,7D32 D0 1E			bne _sfx
   109
   110 				.endl
   111
   112 				; ---
   113
   114 04,7D34			dec_delay
   115 04,7D34 CE 53 83			dec NMI.key_delay
   116 04,7D37 D0 5F			bne read_key2joy
   117
   118 04,7D39 A9 06			lda #6
   119 04,7D3B 8D 53 83			sta NMI.key_delay
   120 04,7D3E 8D 52 83			sta NMI.old_key
   121
   122 04,7D41 D0 55			bne read_key2joy
   123
   124
   125 04,7D43			.local	@key_b					; 'B' sfx volume DOWN
   126
   127 04,7D43 CD 52 83			cmp NMI.old_key
   128 04,7D46 F0 EC			beq dec_delay
   129
   130 04,7D48 8D 52 83			sta NMI.old_key
   131
   132 04,7D4B AD 0C 7E			lda sfx_vol
   133 04,7D4E F0 48			beq read_key2joy
   134 04,7D50 A9 F0			lda #$f0
   135
   136 				.endl
   137
   138
   139 04,7D52 18 6D 0C 7E	_sfx	add sfx_vol
   140 04,7D56 8D 0C 7E			sta sfx_vol
   141 04,7D59 4C 98 7D			jmp read_key2joy
   142
   143
   144 				; --- msx volume
   145
   146 04,7D5C			.local	@key_n					; 'N' msx volume UP
   147
   148 04,7D5C CD 52 83			cmp NMI.old_key
   149 04,7D5F F0 D3			beq dec_delay
   150
   151 04,7D61 8D 52 83			sta NMI.old_key
   152
   153 04,7D64 AD DD 7D			lda msx_vol
   154 04,7D67 C9 F0			cmp #$f0
   155 04,7D69 F0 2D			beq read_key2joy
   156 04,7D6B A9 10			lda #$10
   157 04,7D6D D0 0F			bne _msx
   158
   159 				.endl
   160
   161
   162 04,7D6F			.local	@key_m
   163
   164 04,7D6F CD 52 83			cmp NMI.old_key
   165 04,7D72 F0 C0			beq dec_delay
   166
   167 04,7D74 8D 52 83			sta NMI.old_key
   168
   169 04,7D77 AD DD 7D			lda msx_vol
   170 04,7D7A F0 1C			beq read_key2joy
   171 04,7D7C A9 F0			lda #$f0
   172
   173 				.endl
   174
   175 04,7D7E 18 6D DD 7D	_msx	add msx_vol
   176 04,7D82 8D DD 7D			sta msx_vol
   177
   178 04,7D85 4C 98 7D			jmp read_key2joy
   179
   180
   181 				; ---	keys remaping -> joystik
   182 				; ---	SHIFT = FIRE
   183
   184 04,7D88 A9 0B		@key_a	lda #_left
   185 04,7D8A D0 15			bne _joy
   186
   187 04,7D8C A9 07		@key_d	lda #_right
   188 04,7D8E D0 11			bne _joy
   189
   190 04,7D90 A9 0E		@key_w	lda #_up
   191 04,7D92 D0 0D			bne _joy
   192
   193 04,7D94 A9 0D		@key_s	lda #_down
   194 04,7D96 D0 09			bne _joy
   195
   196 				.endl
   197
   198
   199 				* ---------------------------
   200 				* ---	READ KEY
   201 				* ---------------------------
   202 04,7D98			read_key2joy
   203
   204 04,7D98 AD 00 D3			lda $d300
   205 04,7D9B 29 0F			and #$0f
   206 04,7D9D C9 0F			cmp #15
   207 04,7D9F B0 0A			bcs new_joy
   208
   209 04,7DA1 CD 51 83		_joy	cmp NMI.old_joy
   210 04,7DA4 D0 05			bne new_joy
   211
   212 04,7DA6 CE 54 83			dec NMI.delay_joy
   213 04,7DA9 D0 0B			bne _skip
   214
   215 04,7DAB 8D 73 84		new_joy	sta HERO.r_d300
   216 04,7DAE 8D 51 83			sta NMI.old_joy
   217
   218 04,7DB1 A9 01			lda #delay_joy_default_value
   219 04,7DB3 8D 54 83			sta NMI.delay_joy
   220
   221 04,7DB6 AD 0F D2		_skip	lda $d20f		; klawisz SHIFT = FIRE
   222 04,7DB9 29 08			and #8
   223 04,7DBB F0 05			beq _fire
   224
   225 04,7DBD AD 10 D0			lda $d010
   226 04,7DC0 D0 0E			bne skp
   227
   228 04,7DC2 CE 55 83		_fire	dec NMI.delay_trig
   229 04,7DC5 D0 0E			bne wyjscie
   230
   231 04,7DC7 A5 93			lda harp0.x
   232 04,7DC9 8D A0 85			sta HERO.r_d010
   233
   234 04,7DCC A9 FF			lda #delay_trig_default_value
   235 04,7DCE D0 02			sne
   236
   237 04,7DD0 A9 01		skp	lda #1
   238
   239 04,7DD2 8D 55 83			sta NMI.delay_trig
   240
   241 04,7DD5			wyjscie
   242
   243 				* ---	RASTER MUSIC TRACKER
   244
   245 04,7DD5 AD 4F 83			lda NMI.playmusic
   246 04,7DD8 29 FF			and #$ff
   247 = 04,7DD9		on_off	equ *-1
   248 04,7DDA F0 4F			beq playmusicEnd
   249
   250 04,7DDC A9 F0			lda #msx_default_volume
   251 = 04,7DDD		msx_vol	equ *-1
   252 04,7DDE 8D 20 79			sta rmt2.volslid+1
   253
   254 04,7DE1 A9 00		psfx	lda #0
   255 04,7DE3 29 01			and #1
   256 04,7DE5 0A			asl @
   257 04,7DE6 AA			tax
   258 04,7DE7 BC 5A 83			ldy NMI.sfx_stack,x
   259 04,7DEA 10 0F			bpl sfx
   260
   261 04,7DEC EE E2 7D			inc psfx+1
   262 04,7DEF AD E2 7D			lda psfx+1
   263 04,7DF2 29 01			and #1
   264 04,7DF4 0A			asl @
   265 04,7DF5 AA			tax
   266 04,7DF6 BC 5A 83			ldy NMI.sfx_stack,x
   267 04,7DF9 30 2A			bmi sfx_skp
   268
   269 				; STEREO
   270 04,7DFB A9 FF 9D 5A 83	sfx	mva #$ff NMI.sfx_stack,x
   271 04,7E00 BD 5B 83 8D 11 + 	mva NMI.sfx_stack+1,x note
   272 									; * 2
   273 04,7E06 8C 16 7E			sty fx				;Y = 2,4,..,16		instrument number * 2 (0,2,4,..,126)
   274
   275 04,7E09 A2 07			ldx #7				;X = 3			channel (0..3 or 0..7 for stereo module)
   276
   277 04,7E0B A9 F0			lda #sfx_default_volume		;* sfx note volume*16
   278 = 04,7E0C		sfx_vol	equ *-1
   279 04,7E0D 9D 68 74			sta rmt2.trackn_volume,x
   280
   281 04,7E10 A9 24			lda #36				;A = 12			note (0..60)
   282 = 04,7E11		note	equ *-1
   283 04,7E12 20 0F 78			jsr rmt2.RASTERMUSICTRACKER+15	;RMT_SFX start tone (It works only if FEAT_SFX is enabled !!!)
   284
   285 				; MONO
   286 04,7E15 A0 00			ldy #0
   287 = 04,7E16		fx	equ *-1
   288
   289 04,7E17 A2 03			ldx #3				;X = 3			channel (0..3 or 0..7 for stereo module)
   290
   291 04,7E19 AD 0C 7E			lda sfx_vol			;* sfx note volume*16
   292 04,7E1C 9D 68 74			sta rmt2.trackn_volume,x
   293
   294 04,7E1F AD 11 7E			lda note			;A = 12			note (0..60)
   295 04,7E22 20 0F 78			jsr rmt2.RASTERMUSICTRACKER+15	;RMT_SFX start tone (It works only if FEAT_SFX is enabled !!!)
   296
   297 04,7E25 20 00 74		sfx_skp	jsr rmt2.play
   298
   299 				;	jsr rmt2.RASTERMUSICTRACKER+3	;1 play
   300
   301 04,7E28 EE E2 7D			inc psfx+1
   302
   303 04,7E2B			playmusicEnd
   304
   305
   306 				* ---	TIMER
   307
   308 04,7E2B AD 50 83			lda NMI.vbltim
   309 04,7E2E 0D E9 FF			ora select
   310 04,7E31 D0 21			bne VBLquit
   311
   312 04,7E33 CE 56 83			dec NMI.second
   313 04,7E36 10 1C			bpl VBLquit
   314
   315 04,7E38 A9 3B 8D 56 83		mva #59 NMI.second
   316
   317 04,7E3D 20 57 7E			jsr TimeUpdate
   318
   319 04,7E40 AD 57 83			lda NMI.timer
   320 04,7E43 10 0F			bpl VBLquit
   321
   322 04,7E45 A9 03			lda #deathCode.no_time
   323 04,7E47 8D C8 9A			sta GameEnd.reason
   324
   325 04,7E4A A9 30 8D 1D 3C + 	mwa #napis_timeout LOOP.napisy
   326
   327 04,7E54			VBLquit
   328
   329 04,7E54 4C F7 82			jmp NMI.bnkTmp
   330
   331
   332 04,7E57			.local	TimeUpdate
   333
   334 04,7E57 CE 59 83			dec NMI.timer+2
   335 04,7E5A 10 08			bpl tskp0
   336
   337 04,7E5C A9 09 8D 59 83		mva #9 NMI.timer+2
   338
   339 04,7E61 CE 58 83			dec NMI.timer+1
   340
   341 04,7E64 AD 58 83		tskp0	lda NMI.timer+1
   342 04,7E67 10 08			bpl tskp1
   343
   344 04,7E69 A9 09 8D 58 83		mva #9 NMI.timer+1
   345
   346 04,7E6E CE 57 83			dec NMI.timer
   347
   348 04,7E71 AD 57 83		tskp1	lda NMI.timer
   349 04,7E74 10 01			bpl tskp2
   350
   351 04,7E76 60			rts
   352
   353 04,7E77			tskp2	;lda NMI.timer
   354 04,7E77 C9 00			cmp #0
   355 = 04,7E78		oldTim0	equ *-1
   356 04,7E79 F0 08			beq skp0
   357 04,7E7B 8D 78 7E			sta oldTim0
   358
   359 04,7E7E A0 1F			ldy #31
   360 04,7E80 20 1A 9A			jsr Digit
   361
   362 04,7E83 AD 58 83		skp0	lda NMI.timer+1
   363 04,7E86 C9 00			cmp #0
   364 = 04,7E87		oldTim1	equ *-1
   365 04,7E88 F0 08			beq skp1
   366 04,7E8A 8D 87 7E			sta oldTim1
   367
   368 04,7E8D A0 22			ldy #34
   369 04,7E8F 20 1A 9A			jsr Digit
   370
   371 04,7E92 AD 59 83		skp1	lda NMI.timer+2
   372
   373 04,7E95 A0 25			ldy #37
   374 04,7E97 4C 1A 9A			jmp Digit
   375
   376 				.endl
   377
   378
   379 04,7E9A				.align
   380
   381 04,7F00			.array	keyBind	[64] .word = read_key2joy
   382
   383  [0038] 7CD8			[key_esc]	= read_key_volume.@key_esc
   384  [0042] 7D09			[key_space]	= read_key_volume.@key_space
   385  [0020] 7D21			[key_v]		= read_key_volume.@key_v
   386  [002A] 7D43			[key_b]		= read_key_volume.@key_b
   387  [0046] 7D5C			[key_n]		= read_key_volume.@key_n
   388  [004A] 7D6F			[key_m]		= read_key_volume.@key_m
   389  [0010] 7CE6			[key_o]		= read_key_volume.@key_o
   390  [0014] 7CF6			[key_p]		= read_key_volume.@key_p
   391
   392  [007E] 7D88			[key_a]		= read_key_volume.@key_a
   393  [0074] 7D8C			[key_d]		= read_key_volume.@key_d
   394  [005C] 7D90			[key_w]		= read_key_volume.@key_w
   395  [007C] 7D94			[key_s]		= read_key_volume.@key_s
   396 				.enda
   414 				.endl
   415
   416 					.print 'BANK #4 (RMT MSX): $4000..',*,', free: ',$8000-*
   416 				BANK #4 (RMT MSX): $4000..$7F80, free: $0080
   417
   418
   419 				/***************************  BANK #5  ***************************/
   420
   421 					NMB
   421 05,7F80			@BANK_ADD 'N'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 05,7F80			 org @PROC_ADD_BANK
    28 05,2000-2006> AD 05 01	 lda @TAB_MEM_BANKS+(=*)
    29 05,2003 8D 01 D3		 sta $d301
    30 05,2006 60		 rts
    32 05,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 05,2007			   org $4000
Source: pang_chars.asm
   422
   423 05,4000-7EE2> B4 95 77 + intro_logo	ins 'title_2/logo_2.df7'
   424
   425 05,55E4 DD 98 5D 8C 33 + texture4	ins '_PC/texture/g2f/PangCaves_G2F_Powrooz.df7'
   426 05,618E 94 92 C1 EE 0C + texture10	ins '_PC/texture/g2f/PangPark_Vers2.df7'
   427 05,706C C5 97 7B 70 63 + texture12	ins '_PC/texture/g2f/PangLions2011ooz.df7'
   428
   429 					.print 'BANK #5 (INTRO_LOGO, TEXTURES): $4000..',*,', free: ',$8000-*
   429 				BANK #5 (INTRO_LOGO, TEXTURES): $4000..$7EE3, free: $011D
   430
   431
   432 				/***************************  BANK #6  ***************************/
   433
   434 					NMB
   434 06,7EE3			@BANK_ADD 'N'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 06,7EE3			 org @PROC_ADD_BANK
    28 06,2000-2006> AD 06 01	 lda @TAB_MEM_BANKS+(=*)
    29 06,2003 8D 01 D3		 sta $d301
    30 06,2006 60		 rts
    32 06,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 06,2007			   org $4000
Source: pang_chars.asm
   435
   436 06,4000-7FBB> ED 95 7B + texture5	ins '_PC/texture/g2f/PangStreet_G2F_Powrooz.df7'
   437 06,4C6F 6C 94 3B AB 14 + texture6	ins '_PC/texture/g2f/PangShrine_G2F_Powrooz_2Final.df7'
   438 06,5A6B ED 97 79 6C 6C + texture7	ins '_PC/texture/g2f/PangCityVers2AA.df7'
   439 06,67D5 CC D5 69 E8 0C + texture9	ins '_PC/texture/g2f/PangMostVer3Clean.df7'
   440 06,73D4 DD 97 6B 68 1C + texture11	ins '_PC/texture/g2f/PangWinter_G2F_Powrooz.df7'
   441
   442 					.print 'BANK #6 (TEXTURES): $4000..',*,', free: ',$8000-*
   442 				BANK #6 (TEXTURES): $4000..$7FBC, free: $0044
   443
   444
   445 				/***************************  BANK #7  ***************************/
   446
   447 					NMB
   447 07,7FBC			@BANK_ADD 'N'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 07,7FBC			 org @PROC_ADD_BANK
    28 07,2000-2006> AD 07 01	 lda @TAB_MEM_BANKS+(=*)
    29 07,2003 8D 01 D3		 sta $d301
    30 07,2006 60		 rts
    32 07,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 07,2007			   org $4000
Source: pang_chars.asm
   448
   449 07,4000-7AEA> 00 1E 2D + 	.link 'frm_updw.obx'	// !!! KONIECZNIE OD POCZ¥TKU STRONY PAMIÊCI !!!
   450
   451 07,53B6 ED 97 4B 68 EC + texture1	ins '_PC/texture/g2f/PangLight_G2F_Powrooz.df7'
   452 07,5DDE DD 98 6B 4C 23 + texture2	ins '_PC/texture/g2f/PangAtlas_G2F_Powrooz.df7'
   453 07,68E2 DD D8 0B 68 1B + texture8	ins '_PC/texture/g2f/PangMansion_G2F_Powrooz.df7'
   454
   455 07,73D9 CD 98 CD 6A 13 + mapa_fnt	ins 'tour_map\mapa_2_fnt.df7'
   456
   457 					.print 'BANK #7 (TEXTURES): $4000..',*,', free: ',$8000-*
   457 				BANK #7 (TEXTURES): $4000..$7AEB, free: $0515
   458
   459
   460 				/***************************  BANK #8  ***************************/
   461
   462 					NMB
   462 08,7AEB			@BANK_ADD 'N'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 08,7AEB			 org @PROC_ADD_BANK
    28 08,2000-2006> AD 08 01	 lda @TAB_MEM_BANKS+(=*)
    29 08,2003 8D 01 D3		 sta $d301
    30 08,2006 60		 rts
    32 08,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 08,2007			   org $4000
Source: pang_chars.asm
   463
   464 08,4000				lhinv48
Macro: LHINV48 [Source: pang_chars.asm]
     3 = 08,4000			.def linv48
     5 08,4000-55C2> 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4001 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4002 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4003 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4004 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4005 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4006 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4007 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4008 34			DTA L(INVERS+4+[#/8]*48)
     5 08,4009 34			DTA L(INVERS+4+[#/8]*48)
     5 08,400A 34			DTA L(INVERS+4+[#/8]*48)
     5 08,400B 34			DTA L(INVERS+4+[#/8]*48)
     5 08,400C 34			DTA L(INVERS+4+[#/8]*48)
     5 08,400D 34			DTA L(INVERS+4+[#/8]*48)
     5 08,400E 34			DTA L(INVERS+4+[#/8]*48)
     5 08,400F 34			DTA L(INVERS+4+[#/8]*48)
     5 08,4010 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4011 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4012 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4013 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4014 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4015 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4016 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4017 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4018 94			DTA L(INVERS+4+[#/8]*48)
     5 08,4019 94			DTA L(INVERS+4+[#/8]*48)
     5 08,401A 94			DTA L(INVERS+4+[#/8]*48)
     5 08,401B 94			DTA L(INVERS+4+[#/8]*48)
     5 08,401C 94			DTA L(INVERS+4+[#/8]*48)
     5 08,401D 94			DTA L(INVERS+4+[#/8]*48)
     5 08,401E 94			DTA L(INVERS+4+[#/8]*48)
     5 08,401F 94			DTA L(INVERS+4+[#/8]*48)
     5 08,4020 C4			DTA L(INVERS+4+[#/8]*48)
     5 08,4021 C4			DTA L(INVERS+4+[#/8]*48)
     5 08,4022 C4			DTA L(INVERS+4+[#/8]*48)
     5 08,4023 C4			DTA L(INVERS+4+[#/8]*48)
     5 08,4024 C4			DTA L(INVERS+4+[#/8]*48)
     5 08,4025 C4			DTA L(INVERS+4+[#/8]*48)
     5 08,4026 C4			DTA L(INVERS+4+[#/8]*48)
     5 08,4027 C4			DTA L(INVERS+4+[#/8]*48)
     5 08,4028 F4			DTA L(INVERS+4+[#/8]*48)
     5 08,4029 F4			DTA L(INVERS+4+[#/8]*48)
     5 08,402A F4			DTA L(INVERS+4+[#/8]*48)
     5 08,402B F4			DTA L(INVERS+4+[#/8]*48)
     5 08,402C F4			DTA L(INVERS+4+[#/8]*48)
     5 08,402D F4			DTA L(INVERS+4+[#/8]*48)
     5 08,402E F4			DTA L(INVERS+4+[#/8]*48)
     5 08,402F F4			DTA L(INVERS+4+[#/8]*48)
     5 08,4030 24			DTA L(INVERS+4+[#/8]*48)
     5 08,4031 24			DTA L(INVERS+4+[#/8]*48)
     5 08,4032 24			DTA L(INVERS+4+[#/8]*48)
     5 08,4033 24			DTA L(INVERS+4+[#/8]*48)
     5 08,4034 24			DTA L(INVERS+4+[#/8]*48)
     5 08,4035 24			DTA L(INVERS+4+[#/8]*48)
     5 08,4036 24			DTA L(INVERS+4+[#/8]*48)
     5 08,4037 24			DTA L(INVERS+4+[#/8]*48)
     5 08,4038 54			DTA L(INVERS+4+[#/8]*48)
     5 08,4039 54			DTA L(INVERS+4+[#/8]*48)
     5 08,403A 54			DTA L(INVERS+4+[#/8]*48)
     5 08,403B 54			DTA L(INVERS+4+[#/8]*48)
     5 08,403C 54			DTA L(INVERS+4+[#/8]*48)
     5 08,403D 54			DTA L(INVERS+4+[#/8]*48)
     5 08,403E 54			DTA L(INVERS+4+[#/8]*48)
     5 08,403F 54			DTA L(INVERS+4+[#/8]*48)
     5 08,4040 84			DTA L(INVERS+4+[#/8]*48)
     5 08,4041 84			DTA L(INVERS+4+[#/8]*48)
     5 08,4042 84			DTA L(INVERS+4+[#/8]*48)
     5 08,4043 84			DTA L(INVERS+4+[#/8]*48)
     5 08,4044 84			DTA L(INVERS+4+[#/8]*48)
     5 08,4045 84			DTA L(INVERS+4+[#/8]*48)
     5 08,4046 84			DTA L(INVERS+4+[#/8]*48)
     5 08,4047 84			DTA L(INVERS+4+[#/8]*48)
     5 08,4048 B4			DTA L(INVERS+4+[#/8]*48)
     5 08,4049 B4			DTA L(INVERS+4+[#/8]*48)
     5 08,404A B4			DTA L(INVERS+4+[#/8]*48)
     5 08,404B B4			DTA L(INVERS+4+[#/8]*48)
     5 08,404C B4			DTA L(INVERS+4+[#/8]*48)
     5 08,404D B4			DTA L(INVERS+4+[#/8]*48)
     5 08,404E B4			DTA L(INVERS+4+[#/8]*48)
     5 08,404F B4			DTA L(INVERS+4+[#/8]*48)
     5 08,4050 E4			DTA L(INVERS+4+[#/8]*48)
     5 08,4051 E4			DTA L(INVERS+4+[#/8]*48)
     5 08,4052 E4			DTA L(INVERS+4+[#/8]*48)
     5 08,4053 E4			DTA L(INVERS+4+[#/8]*48)
     5 08,4054 E4			DTA L(INVERS+4+[#/8]*48)
     5 08,4055 E4			DTA L(INVERS+4+[#/8]*48)
     5 08,4056 E4			DTA L(INVERS+4+[#/8]*48)
     5 08,4057 E4			DTA L(INVERS+4+[#/8]*48)
     5 08,4058 14			DTA L(INVERS+4+[#/8]*48)
     5 08,4059 14			DTA L(INVERS+4+[#/8]*48)
     5 08,405A 14			DTA L(INVERS+4+[#/8]*48)
     5 08,405B 14			DTA L(INVERS+4+[#/8]*48)
     5 08,405C 14			DTA L(INVERS+4+[#/8]*48)
     5 08,405D 14			DTA L(INVERS+4+[#/8]*48)
     5 08,405E 14			DTA L(INVERS+4+[#/8]*48)
     5 08,405F 14			DTA L(INVERS+4+[#/8]*48)
     5 08,4060 44			DTA L(INVERS+4+[#/8]*48)
     5 08,4061 44			DTA L(INVERS+4+[#/8]*48)
     5 08,4062 44			DTA L(INVERS+4+[#/8]*48)
     5 08,4063 44			DTA L(INVERS+4+[#/8]*48)
     5 08,4064 44			DTA L(INVERS+4+[#/8]*48)
     5 08,4065 44			DTA L(INVERS+4+[#/8]*48)
     5 08,4066 44			DTA L(INVERS+4+[#/8]*48)
     5 08,4067 44			DTA L(INVERS+4+[#/8]*48)
     5 08,4068 74			DTA L(INVERS+4+[#/8]*48)
     5 08,4069 74			DTA L(INVERS+4+[#/8]*48)
     5 08,406A 74			DTA L(INVERS+4+[#/8]*48)
     5 08,406B 74			DTA L(INVERS+4+[#/8]*48)
     5 08,406C 74			DTA L(INVERS+4+[#/8]*48)
     5 08,406D 74			DTA L(INVERS+4+[#/8]*48)
     5 08,406E 74			DTA L(INVERS+4+[#/8]*48)
     5 08,406F 74			DTA L(INVERS+4+[#/8]*48)
     5 08,4070 A4			DTA L(INVERS+4+[#/8]*48)
     5 08,4071 A4			DTA L(INVERS+4+[#/8]*48)
     5 08,4072 A4			DTA L(INVERS+4+[#/8]*48)
     5 08,4073 A4			DTA L(INVERS+4+[#/8]*48)
     5 08,4074 A4			DTA L(INVERS+4+[#/8]*48)
     5 08,4075 A4			DTA L(INVERS+4+[#/8]*48)
     5 08,4076 A4			DTA L(INVERS+4+[#/8]*48)
     5 08,4077 A4			DTA L(INVERS+4+[#/8]*48)
     5 08,4078 D4			DTA L(INVERS+4+[#/8]*48)
     5 08,4079 D4			DTA L(INVERS+4+[#/8]*48)
     5 08,407A D4			DTA L(INVERS+4+[#/8]*48)
     5 08,407B D4			DTA L(INVERS+4+[#/8]*48)
     5 08,407C D4			DTA L(INVERS+4+[#/8]*48)
     5 08,407D D4			DTA L(INVERS+4+[#/8]*48)
     5 08,407E D4			DTA L(INVERS+4+[#/8]*48)
     5 08,407F D4			DTA L(INVERS+4+[#/8]*48)
     5 08,4080 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4081 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4082 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4083 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4084 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4085 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4086 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4087 04			DTA L(INVERS+4+[#/8]*48)
     5 08,4088 34			DTA L(INVERS+4+[#/8]*48)
     5 08,4089 34			DTA L(INVERS+4+[#/8]*48)
     5 08,408A 34			DTA L(INVERS+4+[#/8]*48)
     5 08,408B 34			DTA L(INVERS+4+[#/8]*48)
     5 08,408C 34			DTA L(INVERS+4+[#/8]*48)
     5 08,408D 34			DTA L(INVERS+4+[#/8]*48)
     5 08,408E 34			DTA L(INVERS+4+[#/8]*48)
     5 08,408F 34			DTA L(INVERS+4+[#/8]*48)
     5 08,4090 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4091 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4092 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4093 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4094 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4095 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4096 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4097 64			DTA L(INVERS+4+[#/8]*48)
     5 08,4098 94			DTA L(INVERS+4+[#/8]*48)
     5 08,4099 04			DTA L(INVERS+4)
     5 08,409A 04			DTA L(INVERS+4)
     5 08,409B 04			DTA L(INVERS+4)
     5 08,409C 04			DTA L(INVERS+4)
     5 08,409D 04			DTA L(INVERS+4)
     5 08,409E 04			DTA L(INVERS+4)
     5 08,409F 04			DTA L(INVERS+4)
     5 08,40A0 04			DTA L(INVERS+4)
     5 08,40A1 04			DTA L(INVERS+4)
     5 08,40A2 04			DTA L(INVERS+4)
     5 08,40A3 04			DTA L(INVERS+4)
     5 08,40A4 04			DTA L(INVERS+4)
     5 08,40A5 04			DTA L(INVERS+4)
     5 08,40A6 04			DTA L(INVERS+4)
     5 08,40A7 04			DTA L(INVERS+4)
     5 08,40A8 04			DTA L(INVERS+4)
     5 08,40A9 04			DTA L(INVERS+4)
     5 08,40AA 04			DTA L(INVERS+4)
     5 08,40AB 04			DTA L(INVERS+4)
     5 08,40AC 04			DTA L(INVERS+4)
     5 08,40AD 04			DTA L(INVERS+4)
     5 08,40AE 04			DTA L(INVERS+4)
     5 08,40AF 04			DTA L(INVERS+4)
     5 08,40B0 04			DTA L(INVERS+4)
     5 08,40B1 04			DTA L(INVERS+4)
     5 08,40B2 04			DTA L(INVERS+4)
     5 08,40B3 04			DTA L(INVERS+4)
     5 08,40B4 04			DTA L(INVERS+4)
     5 08,40B5 04			DTA L(INVERS+4)
     5 08,40B6 04			DTA L(INVERS+4)
     5 08,40B7 04			DTA L(INVERS+4)
     5 08,40B8 04			DTA L(INVERS+4)
     5 08,40B9 04			DTA L(INVERS+4)
     5 08,40BA 04			DTA L(INVERS+4)
     5 08,40BB 04			DTA L(INVERS+4)
     5 08,40BC 04			DTA L(INVERS+4)
     5 08,40BD 04			DTA L(INVERS+4)
     5 08,40BE 04			DTA L(INVERS+4)
     5 08,40BF 04			DTA L(INVERS+4)
     5 08,40C0 04			DTA L(INVERS+4)
     5 08,40C1 04			DTA L(INVERS+4)
     5 08,40C2 04			DTA L(INVERS+4)
     5 08,40C3 04			DTA L(INVERS+4)
     5 08,40C4 04			DTA L(INVERS+4)
     5 08,40C5 04			DTA L(INVERS+4)
     5 08,40C6 04			DTA L(INVERS+4)
     5 08,40C7 04			DTA L(INVERS+4)
     5 08,40C8 04			DTA L(INVERS+4)
     5 08,40C9 04			DTA L(INVERS+4)
     5 08,40CA 04			DTA L(INVERS+4)
     5 08,40CB 04			DTA L(INVERS+4)
     5 08,40CC 04			DTA L(INVERS+4)
     5 08,40CD 04			DTA L(INVERS+4)
     5 08,40CE 04			DTA L(INVERS+4)
     5 08,40CF 04			DTA L(INVERS+4)
     5 08,40D0 04			DTA L(INVERS+4)
     5 08,40D1 04			DTA L(INVERS+4)
     5 08,40D2 04			DTA L(INVERS+4)
     5 08,40D3 04			DTA L(INVERS+4)
     5 08,40D4 04			DTA L(INVERS+4)
     5 08,40D5 04			DTA L(INVERS+4)
     5 08,40D6 04			DTA L(INVERS+4)
     5 08,40D7 04			DTA L(INVERS+4)
     5 08,40D8 04			DTA L(INVERS+4)
     5 08,40D9 04			DTA L(INVERS+4)
     5 08,40DA 04			DTA L(INVERS+4)
     5 08,40DB 04			DTA L(INVERS+4)
     5 08,40DC 04			DTA L(INVERS+4)
     5 08,40DD 04			DTA L(INVERS+4)
     5 08,40DE 04			DTA L(INVERS+4)
     5 08,40DF 04			DTA L(INVERS+4)
     5 08,40E0 04			DTA L(INVERS+4)
     5 08,40E1 04			DTA L(INVERS+4)
     5 08,40E2 04			DTA L(INVERS+4)
     5 08,40E3 04			DTA L(INVERS+4)
     5 08,40E4 04			DTA L(INVERS+4)
     5 08,40E5 04			DTA L(INVERS+4)
     5 08,40E6 04			DTA L(INVERS+4)
     5 08,40E7 04			DTA L(INVERS+4)
     5 08,40E8 04			DTA L(INVERS+4)
     5 08,40E9 04			DTA L(INVERS+4)
     5 08,40EA 04			DTA L(INVERS+4)
     5 08,40EB 04			DTA L(INVERS+4)
     5 08,40EC 04			DTA L(INVERS+4)
     5 08,40ED 04			DTA L(INVERS+4)
     5 08,40EE 04			DTA L(INVERS+4)
     5 08,40EF 04			DTA L(INVERS+4)
     5 08,40F0 04			DTA L(INVERS+4)
     5 08,40F1 04			DTA L(INVERS+4)
     5 08,40F2 04			DTA L(INVERS+4)
     5 08,40F3 04			DTA L(INVERS+4)
     5 08,40F4 04			DTA L(INVERS+4)
     5 08,40F5 04			DTA L(INVERS+4)
     5 08,40F6 04			DTA L(INVERS+4)
     5 08,40F7 04			DTA L(INVERS+4)
     5 08,40F8 04			DTA L(INVERS+4)
     5 08,40F9 04			DTA L(INVERS+4)
     5 08,40FA 04			DTA L(INVERS+4)
     5 08,40FB 04			DTA L(INVERS+4)
     5 08,40FC 04			DTA L(INVERS+4)
     5 08,40FD 04			DTA L(INVERS+4)
     5 08,40FE 04			DTA L(INVERS+4)
     5 08,40FF 04			DTA L(INVERS+4)
    12 = 08,4100			.def hinv48
    14 08,4100 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4101 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4102 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4103 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4104 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4105 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4106 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4107 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4108 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4109 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,410A B3			DTA H(INVERS+4+[#/8]*48)
    14 08,410B B3			DTA H(INVERS+4+[#/8]*48)
    14 08,410C B3			DTA H(INVERS+4+[#/8]*48)
    14 08,410D B3			DTA H(INVERS+4+[#/8]*48)
    14 08,410E B3			DTA H(INVERS+4+[#/8]*48)
    14 08,410F B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4110 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4111 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4112 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4113 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4114 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4115 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4116 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4117 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4118 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4119 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,411A B3			DTA H(INVERS+4+[#/8]*48)
    14 08,411B B3			DTA H(INVERS+4+[#/8]*48)
    14 08,411C B3			DTA H(INVERS+4+[#/8]*48)
    14 08,411D B3			DTA H(INVERS+4+[#/8]*48)
    14 08,411E B3			DTA H(INVERS+4+[#/8]*48)
    14 08,411F B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4120 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4121 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4122 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4123 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4124 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4125 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4126 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4127 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4128 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4129 B3			DTA H(INVERS+4+[#/8]*48)
    14 08,412A B3			DTA H(INVERS+4+[#/8]*48)
    14 08,412B B3			DTA H(INVERS+4+[#/8]*48)
    14 08,412C B3			DTA H(INVERS+4+[#/8]*48)
    14 08,412D B3			DTA H(INVERS+4+[#/8]*48)
    14 08,412E B3			DTA H(INVERS+4+[#/8]*48)
    14 08,412F B3			DTA H(INVERS+4+[#/8]*48)
    14 08,4130 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4131 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4132 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4133 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4134 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4135 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4136 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4137 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4138 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4139 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,413A B4			DTA H(INVERS+4+[#/8]*48)
    14 08,413B B4			DTA H(INVERS+4+[#/8]*48)
    14 08,413C B4			DTA H(INVERS+4+[#/8]*48)
    14 08,413D B4			DTA H(INVERS+4+[#/8]*48)
    14 08,413E B4			DTA H(INVERS+4+[#/8]*48)
    14 08,413F B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4140 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4141 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4142 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4143 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4144 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4145 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4146 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4147 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4148 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4149 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,414A B4			DTA H(INVERS+4+[#/8]*48)
    14 08,414B B4			DTA H(INVERS+4+[#/8]*48)
    14 08,414C B4			DTA H(INVERS+4+[#/8]*48)
    14 08,414D B4			DTA H(INVERS+4+[#/8]*48)
    14 08,414E B4			DTA H(INVERS+4+[#/8]*48)
    14 08,414F B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4150 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4151 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4152 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4153 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4154 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4155 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4156 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4157 B4			DTA H(INVERS+4+[#/8]*48)
    14 08,4158 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4159 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,415A B5			DTA H(INVERS+4+[#/8]*48)
    14 08,415B B5			DTA H(INVERS+4+[#/8]*48)
    14 08,415C B5			DTA H(INVERS+4+[#/8]*48)
    14 08,415D B5			DTA H(INVERS+4+[#/8]*48)
    14 08,415E B5			DTA H(INVERS+4+[#/8]*48)
    14 08,415F B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4160 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4161 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4162 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4163 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4164 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4165 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4166 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4167 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4168 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4169 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,416A B5			DTA H(INVERS+4+[#/8]*48)
    14 08,416B B5			DTA H(INVERS+4+[#/8]*48)
    14 08,416C B5			DTA H(INVERS+4+[#/8]*48)
    14 08,416D B5			DTA H(INVERS+4+[#/8]*48)
    14 08,416E B5			DTA H(INVERS+4+[#/8]*48)
    14 08,416F B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4170 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4171 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4172 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4173 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4174 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4175 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4176 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4177 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4178 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4179 B5			DTA H(INVERS+4+[#/8]*48)
    14 08,417A B5			DTA H(INVERS+4+[#/8]*48)
    14 08,417B B5			DTA H(INVERS+4+[#/8]*48)
    14 08,417C B5			DTA H(INVERS+4+[#/8]*48)
    14 08,417D B5			DTA H(INVERS+4+[#/8]*48)
    14 08,417E B5			DTA H(INVERS+4+[#/8]*48)
    14 08,417F B5			DTA H(INVERS+4+[#/8]*48)
    14 08,4180 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4181 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4182 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4183 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4184 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4185 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4186 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4187 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4188 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4189 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,418A B6			DTA H(INVERS+4+[#/8]*48)
    14 08,418B B6			DTA H(INVERS+4+[#/8]*48)
    14 08,418C B6			DTA H(INVERS+4+[#/8]*48)
    14 08,418D B6			DTA H(INVERS+4+[#/8]*48)
    14 08,418E B6			DTA H(INVERS+4+[#/8]*48)
    14 08,418F B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4190 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4191 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4192 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4193 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4194 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4195 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4196 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4197 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4198 B6			DTA H(INVERS+4+[#/8]*48)
    14 08,4199 B3			DTA H(INVERS+4)
    14 08,419A B3			DTA H(INVERS+4)
    14 08,419B B3			DTA H(INVERS+4)
    14 08,419C B3			DTA H(INVERS+4)
    14 08,419D B3			DTA H(INVERS+4)
    14 08,419E B3			DTA H(INVERS+4)
    14 08,419F B3			DTA H(INVERS+4)
    14 08,41A0 B3			DTA H(INVERS+4)
    14 08,41A1 B3			DTA H(INVERS+4)
    14 08,41A2 B3			DTA H(INVERS+4)
    14 08,41A3 B3			DTA H(INVERS+4)
    14 08,41A4 B3			DTA H(INVERS+4)
    14 08,41A5 B3			DTA H(INVERS+4)
    14 08,41A6 B3			DTA H(INVERS+4)
    14 08,41A7 B3			DTA H(INVERS+4)
    14 08,41A8 B3			DTA H(INVERS+4)
    14 08,41A9 B3			DTA H(INVERS+4)
    14 08,41AA B3			DTA H(INVERS+4)
    14 08,41AB B3			DTA H(INVERS+4)
    14 08,41AC B3			DTA H(INVERS+4)
    14 08,41AD B3			DTA H(INVERS+4)
    14 08,41AE B3			DTA H(INVERS+4)
    14 08,41AF B3			DTA H(INVERS+4)
    14 08,41B0 B3			DTA H(INVERS+4)
    14 08,41B1 B3			DTA H(INVERS+4)
    14 08,41B2 B3			DTA H(INVERS+4)
    14 08,41B3 B3			DTA H(INVERS+4)
    14 08,41B4 B3			DTA H(INVERS+4)
    14 08,41B5 B3			DTA H(INVERS+4)
    14 08,41B6 B3			DTA H(INVERS+4)
    14 08,41B7 B3			DTA H(INVERS+4)
    14 08,41B8 B3			DTA H(INVERS+4)
    14 08,41B9 B3			DTA H(INVERS+4)
    14 08,41BA B3			DTA H(INVERS+4)
    14 08,41BB B3			DTA H(INVERS+4)
    14 08,41BC B3			DTA H(INVERS+4)
    14 08,41BD B3			DTA H(INVERS+4)
    14 08,41BE B3			DTA H(INVERS+4)
    14 08,41BF B3			DTA H(INVERS+4)
    14 08,41C0 B3			DTA H(INVERS+4)
    14 08,41C1 B3			DTA H(INVERS+4)
    14 08,41C2 B3			DTA H(INVERS+4)
    14 08,41C3 B3			DTA H(INVERS+4)
    14 08,41C4 B3			DTA H(INVERS+4)
    14 08,41C5 B3			DTA H(INVERS+4)
    14 08,41C6 B3			DTA H(INVERS+4)
    14 08,41C7 B3			DTA H(INVERS+4)
    14 08,41C8 B3			DTA H(INVERS+4)
    14 08,41C9 B3			DTA H(INVERS+4)
    14 08,41CA B3			DTA H(INVERS+4)
    14 08,41CB B3			DTA H(INVERS+4)
    14 08,41CC B3			DTA H(INVERS+4)
    14 08,41CD B3			DTA H(INVERS+4)
    14 08,41CE B3			DTA H(INVERS+4)
    14 08,41CF B3			DTA H(INVERS+4)
    14 08,41D0 B3			DTA H(INVERS+4)
    14 08,41D1 B3			DTA H(INVERS+4)
    14 08,41D2 B3			DTA H(INVERS+4)
    14 08,41D3 B3			DTA H(INVERS+4)
    14 08,41D4 B3			DTA H(INVERS+4)
    14 08,41D5 B3			DTA H(INVERS+4)
    14 08,41D6 B3			DTA H(INVERS+4)
    14 08,41D7 B3			DTA H(INVERS+4)
    14 08,41D8 B3			DTA H(INVERS+4)
    14 08,41D9 B3			DTA H(INVERS+4)
    14 08,41DA B3			DTA H(INVERS+4)
    14 08,41DB B3			DTA H(INVERS+4)
    14 08,41DC B3			DTA H(INVERS+4)
    14 08,41DD B3			DTA H(INVERS+4)
    14 08,41DE B3			DTA H(INVERS+4)
    14 08,41DF B3			DTA H(INVERS+4)
    14 08,41E0 B3			DTA H(INVERS+4)
    14 08,41E1 B3			DTA H(INVERS+4)
    14 08,41E2 B3			DTA H(INVERS+4)
    14 08,41E3 B3			DTA H(INVERS+4)
    14 08,41E4 B3			DTA H(INVERS+4)
    14 08,41E5 B3			DTA H(INVERS+4)
    14 08,41E6 B3			DTA H(INVERS+4)
    14 08,41E7 B3			DTA H(INVERS+4)
    14 08,41E8 B3			DTA H(INVERS+4)
    14 08,41E9 B3			DTA H(INVERS+4)
    14 08,41EA B3			DTA H(INVERS+4)
    14 08,41EB B3			DTA H(INVERS+4)
    14 08,41EC B3			DTA H(INVERS+4)
    14 08,41ED B3			DTA H(INVERS+4)
    14 08,41EE B3			DTA H(INVERS+4)
    14 08,41EF B3			DTA H(INVERS+4)
    14 08,41F0 B3			DTA H(INVERS+4)
    14 08,41F1 B3			DTA H(INVERS+4)
    14 08,41F2 B3			DTA H(INVERS+4)
    14 08,41F3 B3			DTA H(INVERS+4)
    14 08,41F4 B3			DTA H(INVERS+4)
    14 08,41F5 B3			DTA H(INVERS+4)
    14 08,41F6 B3			DTA H(INVERS+4)
    14 08,41F7 B3			DTA H(INVERS+4)
    14 08,41F8 B3			DTA H(INVERS+4)
    14 08,41F9 B3			DTA H(INVERS+4)
    14 08,41FA B3			DTA H(INVERS+4)
    14 08,41FB B3			DTA H(INVERS+4)
    14 08,41FC B3			DTA H(INVERS+4)
    14 08,41FD B3			DTA H(INVERS+4)
    14 08,41FE B3			DTA H(INVERS+4)
    14 08,41FF B3			DTA H(INVERS+4)
Source: pang_chars.asm
   465
   466 08,4200 79 42 01 43 A0 + 	.link '_PC\asm-kule_HP\ckula0.obx'	; korzysta z LHINV48
   467
   468 08,55C3				.align
   469 08,5600-680C> 79 56 E5 + 	.link '_PC\asm-kule_HP\ckula1.obx'
   470
   471 08,680D				.align
   472 08,6900-7594> 79 69 CB + 	.link '_PC\asm-kule_HP\ckula3.obx'
   473
   474 08,7595				.align
   475 08,7600-7EC4> 79 76 A9 + 	.link '_PC\asm-kule_HP\ckula4.obx'
   476
   477 					.print 'BANK #8 (CKULA 0,1,3,4): $4000..',*,', free: ',$8000-*
   477 				BANK #8 (CKULA 0,1,3,4): $4000..$7EC5, free: $013B
   478
   479
   480 				/***************************  BANK #9  ***************************/
   481
   482 					NMB
   482 09,7EC5			@BANK_ADD 'N'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 09,7EC5			 org @PROC_ADD_BANK
    28 09,2000-2006> AD 09 01	 lda @TAB_MEM_BANKS+(=*)
    29 09,2003 8D 01 D3		 sta $d301
    30 09,2006 60		 rts
    32 09,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 09,2007			   org $4000
Source: pang_chars.asm
   483
   484 = 09,4000		ground_buf	.ds 3730
   485
   486 09,4E92-7B33> C5 95 5B + ground0		ins '_PC/texture/g2f-ground/groundDino.df7'
   487 09,56DB BD 94 4B CF CE + ground1		ins '_PC/texture/g2f-ground/groundMaya.df7'
   488 09,5E58 BD 96 49 CC 0C + ground2		ins '_PC/texture/g2f-ground/groundMeteo.df7'
   489 09,662F BD 95 5D 68 1C + ground3		ins '_PC/texture/g2f-ground/groundIce.df7'
   490
   491 09,6E62 65 57 69 6C E3 + over_fnt	ins 'game_over_winner\over_fnt.df7'
   492
   493 09,7903 A9 D4 85 9A A9 + 	.link 'init_2.obx'
   494
   495 					.print 'BANK #9 (GROUND): $4000..',*,', free: ',$8000-*
   495 				BANK #9 (GROUND): $4000..$7B34, free: $04CC
   496
   497
   498 				/**************************  BANK #10  ***************************/
   499
   500 					NMB
   500 0A,7B34			@BANK_ADD 'N'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 0A,7B34			 org @PROC_ADD_BANK
    28 0A,2000-2006> AD 0A 01	 lda @TAB_MEM_BANKS+(=*)
    29 0A,2003 8D 01 D3		 sta $d301
    30 0A,2006 60		 rts
    32 0A,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 0A,2007			   org $4000
Source: pang_chars.asm
   501
   502 = 0A,4000		lvl_temp	.ds $300
   503
   504 0A,4300-708C> 9D 58 CB + lvla	ins 'levels\lvl_01_04.df7'
   505 0A,50D4 5C 96 39 6F C4 + lvlb	ins 'levels\lvl_05_08.df7'
   506 0A,600C 64 56 B9 CB FC + lvlc	ins 'levels\lvl_09_12.df7'
   507
   508 					.print 'BANK #10 (LEVELS): $4000..',*,', free: ',$8000-*
   508 				BANK #10 (LEVELS): $4000..$708D, free: $0F73
   509
   510 				/**************************  BANK #11  ***************************/
   511
   512 					NMB
   512 0B,708D			@BANK_ADD 'N'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 0B,708D			 org @PROC_ADD_BANK
    28 0B,2000-2006> AD 0B 01	 lda @TAB_MEM_BANKS+(=*)
    29 0B,2003 8D 01 D3		 sta $d301
    30 0B,2006 60		 rts
    32 0B,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 0B,2007			   org $4000
Source: pang_chars.asm
   513
   514 0B,4000-7ED6> D4 56 7B + mapa	ins 'tour_map\mapa_2.df7'
   515 0B,53C1 ED 57 79 5C 14 + over	ins 'game_over_winner\gameover.df7'
   516 0B,6132 AC 98 7D 6C 6B + cong	ins 'game_over_winner\pangwinner.df7'
   517
   518 0B,7835 ED 98 5B 8C 0B + dmtx	ins 'datamatrix\example-atari.df7'
   519
   520 0B,7DD2			.local	hi_tour
   521 0B,7DD2 00 00 03 09 04 + 	dta 0,0,3,9,4,0, d'tbe', 0,9
   522 0B,7DDD 00 00 03 05 05 + 	dta 0,0,3,5,5,5, d'paj', 0,7
   523 0B,7DE8 00 00 02 03 01 + 	dta 0,0,2,3,1,5, d'rck', 0,5
   524 0B,7DF3 00 00 01 02 04 + 	dta 0,0,1,2,4,5, d'aur', 0,3
   525 0B,7DFE 00 00 00 07 08 + 	dta 0,0,0,7,8,0, d'vdl', 0,1
   526
   527 0B,7E09 00 00 00 00 00 + _new	dta 0,0,0,0,0,0, d'   ', 0,0		; na podstawie pustego wpisu inicjalow zostanie ustalona pozycja na tablicy
   528 				.endl
   529
   530 0B,7E14			.local	hi_panic
   531 0B,7E14 00 00 02 09 00 + 	dta 0,0,2,9,0,5, d'tbe', 0,5
   532 0B,7E1F 00 00 01 08 08 + 	dta 0,0,1,8,8,5, d'rck', 0,4
   533 0B,7E2A 00 00 01 07 01 + 	dta 0,0,1,7,1,0, d'vdl', 0,3
   534 0B,7E35 00 00 01 03 09 + 	dta 0,0,1,3,9,5, d'paj', 0,2
   535 0B,7E40 00 00 01 02 04 + 	dta 0,0,1,2,4,5, d'emi', 0,1
   536
   537 0B,7E4B 00 00 00 00 00 + _new	dta 0,0,0,0,0,0, d'   ', 0,0		; na podstawie pustego wpisu inicjalow zostanie ustalona pozycja na tablicy
   538 				.endl
   539
   540
   541 0B,7E56			.local	UpdateScoreBoard
   542
   543 0B,7E56 A2 D2			ldx <hi_tour				; kopiujemy tablice wynikow
   544 0B,7E58 A0 7D			ldy >hi_tour
   545 0B,7E5A AD E9 FF			lda select
   546 0B,7E5D F0 04			beq skp
   547
   548 0B,7E5F A2 14			ldx <hi_panic
   549 0B,7E61 A0 7E			ldy >hi_panic
   550
   551 0B,7E63 86 6A		skp	stx hlp
   552 0B,7E65 84 6B			sty hlp+1
   553
   554 0B,7E67 A0 41			ldy #score_all*6-1
   555 0B,7E69 B1 6A 99 00 02 + 	mva:rpl (hlp),y ScoreBoard,y-
   556
   557 0B,7E71 A0 05			ldy #score_cnt-1			; dopisujemy nowy wynik
   558 0B,7E73 B9 89 3A 99 37 + 	mva:rpl score,y ScoreBoard+score_all*5,y-
   559
   560 0B,7E7C A9 00			lda #" "
   561 0B,7E7E 8D 3D 02 8D 3E + 	:3 sta ScoreBoard+score_all*5+score_cnt+#
   562
   563 0B,7E87 AD E9 FF			lda select
   564 0B,7E8A F0 13			beq tour
   565
   566 0B,7E8C AD 33 39			lda level_bar-40+6
   567 0B,7E8F C9 0A			cmp #10
   568 0B,7E91 90 02			scc
   569 0B,7E93 A9 00			lda #0
   570 0B,7E95 8D 40 02			sta ScoreBoard+score_all*5+score_cnt+3
   571
   572 0B,7E98 AD 34 39 8D 41 + 	mva level_bar-40+7 ScoreBoard+score_all*5+score_cnt+4
   573
   574 0B,7E9E 60			rts
   575
   576 0B,7E9F AE F6 38		tour	ldx level?
   577 0B,7EA2 E8			inx
   578
   579 				.nowarn	div #10
   579 				 LDA# 10\ JSR DIV
   579 0B,7EA3 A9 0A		 LDA# 10
   579 0B,7EA5 20 03 9A		 JSR DIV
   580 0B,7EA8 AA			tax
   581
   582 0B,7EA9 A5 9A			lda div.ACC
   583 0B,7EAB 8D 40 02			sta ScoreBoard+score_all*5+score_cnt+3
   584 0B,7EAE 8E 41 02			stx ScoreBoard+score_all*5+score_cnt+4
   585
   586 0B,7EB1 60			rts
   587
   588
   589 0B,7EB2			reset	.local
   590
   591 0B,7EB2 A9 00			lda #0
   592 0B,7EB4 A2 05			ldx #score_cnt-1				; zeruj SCORE
   593 0B,7EB6 9D 89 3A CA 10 + 	sta:rpl score,x-
   594
   595 0B,7EBC A2 05			ldx #score_cnt-1
   596
   597 0B,7EBE AD E9 FF			lda select
   598 0B,7EC1 F0 0A			beq tour
   599
   600 0B,7EC3 BD 14 7E 9D A2 + panic	mva:rpl hi_panic,x hiscore,x-			; uaktualnij hi-score
   601 0B,7ECC 60			rts
   602
   603 0B,7ECD BD D2 7D 9D A2 + tour	mva:rpl hi_tour,x hiscore,x-
   604 0B,7ED6 60			rts
   605
   606 					.endl
   607
   608 				.endl
   609
   610 					.print 'BANK #11 (LEVELS): $4000..',*,', free: ',$8000-*
   610 				BANK #11 (LEVELS): $4000..$7ED7, free: $0129
   611
   612 				/**************************  BANK #12  ***************************/
   613
   614 					NMB
   614 0C,7ED7			@BANK_ADD 'N'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 0C,7ED7			 org @PROC_ADD_BANK
    28 0C,2000-2006> AD 0C 01	 lda @TAB_MEM_BANKS+(=*)
    29 0C,2003 8D 01 D3		 sta $d301
    30 0C,2006 60		 rts
    32 0C,02E2-02E3> 00 20	 ini @PROC_ADD_BANK
    37 0C,2007			   org $4000
Source: pang_chars.asm
   615
   616 0C,4000-4DF6> 00 02 08 + 	.link 'frm_death.obx'	// !!! KONIECZNIE OD POCZ¥TKU STRONY PAMIÊCI !!!
   617
   618 					.print 'BANK #12 (FRM_DEATH): $4000..',*,', free: ',$8000-*
   618 				BANK #12 (FRM_DEATH): $4000..$4DF7, free: $3209
   619
   620
   621 				/***************************  BANK #0  ***************************/
   622
   623 					LMB #0			; wymuszamy w³¹czenie pamiêci podstawowej $d301=$ff
   623 4DF7			@BANK_ADD 'L'
Macro: @BANK_ADD [Source: @bank_add.mac]
    26 4DF7			 org @PROC_ADD_BANK
    28 2000-2006> AD 00 01	 lda @TAB_MEM_BANKS+(=*)
    29 2003 8D 01 D3		 sta $d301
    30 2006 60			 rts
    32 02E2-02E3> 00 20		 ini @PROC_ADD_BANK
    37 2007			   org $4000
Source: pang_chars.asm
   624
   625 					opt b-
   626
   627
   628 					ert frmL<>frmR
   629
   630 				* --------------------------------------------------------------------------------
   631
   632 4000				org prg
   633
   634 				* ---------------------------
   635 				* ---	ANTIC PROGRAM
   636 				* ---------------------------
   637
   638 = 3400			tmpINVERS .ds $400
   639
   640
   641 					ert <*<>0
   642
   643 				; adresy procedur kolizji dla kul
   644
   645 3800-3913> 40 40 40 40 + lckula	dta l(ck0.main, ck1.main, ck2.main, ck3.main, ck4.main)
   646 3805 42 56 4F 69 76	hckula	dta h(ck0.main, ck1.main, ck2.main, ck3.main, ck4.main)
   647 380A 08 08 03 08 08	bckula	dta [=ck0.main], [=ck1.main], [=ck2.main], [=ck3.main], [=ck4.main]
   648
   649 380F 00 30 60 90 C0 F0 + lmul48	:20 dta l(#*48)
   650 3823 00 00 00 00 00 00 + hmul48	:20 dta h(#*48)
   651
   652 				;ply_hb1	:40 dta h(#*8+.get[12]<<8)
   653 				;ply_hb2	:40 dta h([64+#]*8+.get[12]<<8)
   654
   655 3837 27 1F 17 0F 07	theight	dta k0h,k1h,k2h,k3h,k4h
   656
   657 383C FB FB FB FB FF	tDY	dta >ypath, >ypath, >ypath, >ypath, >ypath_4
   658
   659 3841 00 04 08 0C 10	tmul4	:5 dta #*4
   660
   661 3846 00 05 0A 0F 14 19 + tmul5	:10 dta #*5
   662
   663 3850			ljoy	.array [16] .byte = .lo(HERO.zeruj)
   664  [000B] 1E			[_left]		= .lo(HERO.lhero)
   665  [000A] 1E			[_left_up]	= .lo(HERO.lhero)
   666  [0009] 1E			[_left_down]	= .lo(HERO.lhero)
   667
   668  [0007] 3A			[_right]	= .lo(HERO.rhero)
   669  [0006] 3A			[_right_up]	= .lo(HERO.rhero)
   670  [0005] 3A			[_right_down]	= .lo(HERO.rhero)
   671
   672  [000E] 7C			[_up]		= .lo(HERO.uhero)
   673  [000D] 58			[_down]		= .lo(HERO.dhero)
   674 					.enda
   675
   676 3860 1A 1B 1C 1D 1E 0F + Digits0	ins 'panel/liczniki2.scr',5*48,30
   677 387E 25 26 27 28 29 0F + Digits1	ins 'panel/liczniki2.scr',6*48,30
   678 389C 3B 3C 3D 3E 3F 40 + Digits2	ins 'panel/liczniki2.scr',7*48,30
   679
   680 38BA 00 08 10 18 20 28 + cellx8	:20 dta #*8
   681 38CE 00 08 10 18 20 28 + 	:20 dta #*8
   682
   683 38E2 00 0A 14 1E 28 32 + bcd	dta 0,10,20,30,40,50,60,70,80,90
   684
   685 38EC 0F 0F 10 0F 0F 0A + stage_bar ins 'panel/liczniki2.scr',25,10
   686
   687 38F6 00			level?	dta 0
   688
   689 38F7 00 D4 0C		l_lvl	dta l(lvla, lvlb, lvlc)
   690 38FA 43 50 60		h_lvl	dta h(lvla, lvlb, lvlc)
   691
   692 38FD EA EA EA			:3 nop				; wyrównanie do pocz¹tku nowej strony pamiêci
   693
   694 					ert <*<>0,*
   695
   696 3900 A7 3C 8B 3F 40 3F + lh_lk	.word BALL.lk0, BALL.lk1, BALL.lk2, BALL.lk3, BALL.lk4
   697 390A F2 40 97 40 4C 40 + 	.word BALL.lk0_, BALL.lk1_, BALL.lk2_, BALL.lk3_, BALL.lk4_
   698
   699 = 3914			panel	.ds 40*3
   700
   701 398C-73B8> 00 04 08 10 + tenergy	dta 0,4,8,16,32			; wartoœci o jakie wytracana jest wysokoœæ odbicia kul
   702
   703 3991 00 3C 78 B4		mul60	dta 0,60,120,180
   704
   705 3995 00 13 26 39 4C	tmulHig	:5 dta #*scrhig
   706
   707 399A 26 1E 16 0E 06	theightm1	.by -1 k0h,k1h,k2h,k3h,k4h
   708 399F 13 0F 0B 08 04	twidthm1	.by -1 20,16,12,8+1,4+1
   709
   710 39A4 13 23 43 53 69	yPosMAX		.by +19 0,16,48,64,86	; maksymalna pozycja pionowa kuli
   711 				// !!! ustalana na podstawie yPosMAX_tmp !!!
   712
   713 39A9 13 23 43 53 69	yPosMAX_tmp	.by +19 0,16,48,64,86	; maksymalna pozycja pionowa kuli
   714
   715 39AE 80 70 50 40 2C	_yPosMAX	.by +0 128,112,80,64,44
   716
   717 39B3 0F 0F 0F 0F 0E 5E + energy0	ins 'panel/liczniki2.scr',11*48,14
   718 39C1 60 54 54 54 54 54 + energy1	ins 'panel/liczniki2.scr',12*48,14
   719 39CF 62 5D 5D 5D 5D 5D + energy2	ins 'panel/liczniki2.scr',13*48,14
   720
   721 39DD 0F 65 66 67 68 69 + time0	ins 'panel/liczniki2.scr',19*48,7
   722 39E4 0F 6B 6C 6D 6E 6F + time1	ins 'panel/liczniki2.scr',20*48,7
   723 39EB 0F 71 72 73 74 75 + time2	ins 'panel/liczniki2.scr',21*48,7
   724
   725 39F2 0F 0F 64 0E 19 0E + level0	ins 'panel/liczniki2.scr',15*48,14
   726
   727 				;	:14 nop				; wyrównanie do pocz¹tku nowej strony pamiêci
   728
   729
   730 					ert <*<>0,*
   731
   732 3A00 40 70		dlist1	dta $40,$70
   733 3A02 42 14 39 02 82 F0		dta $42,a(panel),2,$82,$70|$80
   734 3A08 44 54 3A			dta $44,a(umurek)
   735
   736 3A0B C4 00 D8			dta $44+$80,a(scr1)
   737 3A0E 84 84 84 84 84 84 + 	:scrhig-2 dta $84
   738 3A1F 04				dta 4
   739
   740 3A20 C4 54 3A			dta $44+$80,a(umurek)
   741 3A23 70 43 83 3A			dta $70,$43,a(status)
   742 3A27 41 00 3A			dta $41,a(dlist1)
   743
   744
   745 3A2A 40 70		dlist2	dta $40,$70
   746 3A2C 42 14 39 02 82 F0		dta $42,a(panel),2,$82,$70|$80
   747 3A32 44 54 3A			dta $44,a(umurek)
   748
   749 3A35 C4 00 DC			dta $44+$80,a(scr2)
   750 3A38 84 84 84 84 84 84 + 	:scrhig-2 dta $84
   751 3A49 04				dta 4
   752
   753 3A4A C4 54 3A			dta $44+$80,a(umurek)
   754 3A4D 70 43 83 3A			dta $70,$43,a(status)
   755 3A51 41 2A 3A			dta $41,a(dlist2)
   756
   757 3A54 28 28 28		umurek	:3 dta pustak
   758 3A57 A9 A9 A9 A9 A9 A9 + 	:42 dta okalajacy
   759 3A81 28 28			:3-1 dta pustak
   760
   761 3A83 0A 0B 0C 0D 0E 0F + status	ins 'panel\liczniki2.scr',10,40
   762
   763 3AAB 00 01 02 03 04 05 + ladr	:20 dta #&7
   764 3ABF A0 A1 A2 A3 A4 A5 + ladr_	:20 dta #&7+20*8
   765
   766 3AD3 00 08 10 18 20 28 + tmul8	:40 dta l(#*8)
   767
   768 3AFB EA EA EA EA EA		:5 nop				; wyrównanie do pocz¹tku nowej strony pamiêci
   769
   770 					ert <*<>0,*
   771
   772 3B00				.pages
   773
   774 3B00 C4 5B 95 5E 96 61 + lhkula	.word k0._0, k0._1, k0._2, k0._3
   775 3B08 B0 67 A5 69 CE 6B + 	.word k1._0, k1._1, k1._2, k1._3
   776 3B10 5D 41 86 42 0D 44 + 	.word k2._0, k2._1, k2._2, k2._3
   777 3B18 2B 47 10 48 23 49 + 	.word k3._0, k3._1, k3._2, k3._3
   778 3B20 1B 4B 3C 4B 93 4B + 	.word k4._0, k4._1, k4._2, k4._3
   779
   780 3B28 16 00 00 00		lminmax dta l(MINMAX5, MINMAX6, MINMAX6, MINMAX6)
   781 3B2C 2C 16 16 16			dta l(MINMAX4, MINMAX5, MINMAX5, MINMAX5)
   782 3B30 42 2C 2C 2C			dta l(MINMAX3, MINMAX4, MINMAX4, MINMAX4)
   783 3B34 42 42 42 42			dta l(MINMAX3, MINMAX3, MINMAX3, MINMAX3)	; wyjatek, o 1 pixel szersza kula
   784 3B38 6E 58 58 58			dta l(MINMAX1, MINMAX2, MINMAX2, MINMAX2)
   785
   786 3B3C 16 00 00 00			dta l(MINMAX5, MINMAX6, MINMAX6, MINMAX6)
   787 3B40 2C 16 16 16			dta l(MINMAX4, MINMAX5, MINMAX5, MINMAX5)
   788 3B44 42 2C 2C 2C			dta l(MINMAX3, MINMAX4, MINMAX4, MINMAX4)
   789 3B48 42 42 42 42			dta l(MINMAX3, MINMAX3, MINMAX3, MINMAX3)	; wyjatek, o 1 pixel szersza kula
   790 3B4C 6E 58 58 58			dta l(MINMAX1, MINMAX2, MINMAX2, MINMAX2)
   791
   792 3B50 C0 80 40 00 C0 80 + ltxt	:10 dta l(txture+18*320-#*320)
   793 3B5A B1 B0 AF AE AC AB + htxt	:10 dta h(txture+18*320-#*320)
   794
   795 3B64 09 09 09 09		tgrnd_b	dta [=ground3], [=ground2], [=ground1], [=ground0]
   796 3B68 2F 58 DB 92		tgrnd_l	dta <ground3, <ground2, <ground1, <ground0
   797 3B6C 66 5E 56 4E		tgrnd_h	dta >ground3, >ground2, >ground1, >ground0
   798
   799 3B70				.endpg
   800
   801
   802 				* ---------------------------
   803 				* ---	MAIN PROGRAM
   804 				* ---------------------------
   805
   806 3B70			main
   807 3B70 A2 0F			ldx #15			; inicjujemy tablice @TAB_MEM_BANKS
   808 3B72 BD 00 01		ibnk	lda @TAB_MEM_BANKS,x
   809 3B75 29 FE			and #$fe
   810 3B77 9D 00 01			sta @TAB_MEM_BANKS,x
   811 3B7A CA				dex
   812 3B7B 10 F5			bpl ibnk
   813
   814
   815 3B7D 20 E7 8F			INIT_VECTORS
   816
   817 				//**********************************************************************
   818
   819 3B80 20 4A 8D		again	jsr INTRO
   820
   821 3B83 20 17 8D			jsr MAPTOUR
   822
   823 3B86 8D 9A 8D			sta INTRO.nxtLvl
   824
   825 3B89 20 8E 8D			jsr INTRO.start
   826
   827 				//**********************************************************************
   828
   829 3B8C			lets_go
   830 					
   831 3B8C A9 00			lda #0
   832 = 3B8D			nmsx	equ *-1
   833 3B8E 29 03			and #3
   834 3B90 18 69 03			add #msxCode.game0
   835 3B93 A8				tay
   836
   837 3B94 EE 8D 3B			inc nmsx
   838
   839 					RMT_MODUL @
   839 				 TAY\ JSR RMT_MODUL
   839 3B97 A8			 TAY
   839 3B98 20 AE 92		 JSR RMT_MODUL
   840
   841 3B9B A9 00 85 6E A9 3A + 	mwa #dlist1 dlstl	; koniecznie nalezy zaincjowac (DLSTL=$230)
   842
   843 3BA3 A9 FE 8D 01 D3		mva #$fe portb
   844 3BA8 8D 4F 83			sta NMI.playmusic
   845
   846 3BAB A9 C0 8D 0E D4		mva #$c0 $d40e
   847
   848
   849 				// LET'S GO
   850
   851 3BB0			LOOP	.local
   852
   853 3BB0 20 5E 83			ADD_PANIC_BALL
   854
   855 				* ---	BUF #1
   856 					WAIT <dlist1 >pmgB1	; wyswietlamy BUFOR #1, modyfikujemy BUFOR #2
   856 				 LDX <DLIST1\ LDY >PMGB1\ JSR WAIT
   856 3BB3 A2 00		 LDX <DLIST1
   856 3BB5 A0 00		 LDY >PMGB1
   856 3BB7 20 61 88		 JSR WAIT
   857
   858 3BBA 20 0D 54			CLEARB2
   859
   860 3BBD A9 02 85 86		 	mva #2 bufor
   861
   862 					ENGINE #BALL.BALLB2
   862 				 LDX> BALL.BALLB2\ LDA< BALL.BALLB2\ JSR ENGINE
   862 3BC1 A2 3E		 LDX> BALL.BALLB2
   862 3BC3 A9 0D		 LDA< BALL.BALLB2
   862 3BC5 20 FF 91		 JSR ENGINE
   863 3BC8 20 3A 70			COLLISIONS
   864 					CLRHARP	#40^40
   864 				 LDA# 40^40\ JSR CLRHARP
   864 3BCB A9 00		 LDA# 40^40
   864 3BCD 20 A5 88		 JSR CLRHARP
   865 3BD0 20 DE 89		wall0	jsr CLRWALL
   866
   867 					HERO	#40
   867 				 LDA# 40\ JSR HERO
   867 3BD3 A9 28		 LDA# 40
   867 3BD5 20 6F 84		 JSR HERO
   868
   869 3BD8 20 10 87			PLAYERB2	;<ply_hb2 #40
   870
   871 3BDB 20 2E 92			GO_BONUS
   872
   873 3BDE A6 7F			ldx objects		; liczba obiektów mo¿e byæ krótsza
   874 3BE0 B5 B6			lda active-1,x
   875 3BE2 30 05			bmi skp
   876 3BE4 CA				dex
   877
   878 3BE5 F0 38			beq gamEnd2
   879 3BE7 86 7F			stx objects
   880 3BE9			skp
   881
   882 				* ---	BUF #2
   883 					WAIT <dlist2 >pmgB2	; wyswietlamy BUFOR #2, modyfikujemy BUFOR #1
   883 				 LDX <DLIST2\ LDY >PMGB2\ JSR WAIT
   883 3BE9 A2 2A		 LDX <DLIST2
   883 3BEB A0 20		 LDY >PMGB2
   883 3BED 20 61 88		 JSR WAIT
   884
   885 3BF0 20 51 4C			CLEARB1
   886
   887 3BF3 A9 00 85 86			mva #0 bufor
   888
   889 					ENGINE #BALL.BALLB1
   889 				 LDX> BALL.BALLB1\ LDA< BALL.BALLB1\ JSR ENGINE
   889 3BF7 A2 3D		 LDX> BALL.BALLB1
   889 3BF9 A9 19		 LDA< BALL.BALLB1
   889 3BFB 20 FF 91		 JSR ENGINE
   890 3BFE 20 3A 70			COLLISIONS
   891 					CLRHARP	#0^40
   891 				 LDA# 0^40\ JSR CLRHARP
   891 3C01 A9 28		 LDA# 0^40
   891 3C03 20 A5 88		 JSR CLRHARP
   892 3C06 20 DE 89		wall1	jsr CLRWALL
   893
   894 					HERO	#0
   894 				 LDA# 0\ JSR HERO
   894 3C09 A9 00		 LDA# 0
   894 3C0B 20 6F 84		 JSR HERO
   895
   896 3C0E 20 29 86			PLAYERB1	;<ply_hb1 #0
   897
   898 3C11 A6 7F			ldx objects		; liczba obiektów mo¿e byæ krótsza
   899 3C13 B5 B6			lda active-1,x
   900 3C15 30 05			bmi sLOOP
   901 3C17 CA				dex
   902
   903 3C18 F0 0E			beq gamEnd0
   904 3C1A 86 7F			stx objects
   905
   906 3C1C 4C B0 3B		sLOOP	jmp LOOP
   907 = 3C1D			napisy	equ *-2
   908
   909
   910 				* ---	GAME END
   911
   912 3C1F 20 3E 9A		gamEnd2	CLRMISSILE
   913 3C22 20 45 8C			jsr JingleDeath.prepare
   914
   915 3C25 4C 56 9A			jmp GameEnd.gamEnd2
   916
   917 3C28 20 3E 9A		gamEnd0	CLRMISSILE
   918 3C2B 20 45 8C			jsr JingleDeath.prepare
   919
   920 3C2E 4C 76 9A			jmp GameEnd.gamEnd0
   921
   922 					.endl
   923
   924 3C31 60 4C 4C 4C 4C 4C + level1	ins 'panel/liczniki2.scr',16*48,14
   925 3C3F 62 55 55 55 55 55 + level2	ins 'panel/liczniki2.scr',17*48,14
   926
   927 				;	:2 nop
   928
   929
   930 					ert *>$3fff,*		; !!! ten warunek musi zostaæ koniecznie spe³niony !!!
   931
   932
   933 				* ---------------------------
   934 				* ---	BALL
   935 				* ---------------------------
   936 3C4D			.proc	BALL
   937
   938 3C4D A4 78			ldy type
   939
   940 3C4F 98				tya
   941 3C50 0A				asl @
   942 3C51 A8				tay
   943
   944 3C52 BD 40 02			lda posx,x
   945 3C55 C9 50			cmp #80
   946 3C57 90 04			bcc ok
   947
   948 3C59 98			cell2	tya
   949 3C5A 69 09			adc #10-1
   950 3C5C A8				tay
   951
   952 				;	mva l_lk__,y _setLK	; prawa strona ekranu
   953 				;	mva h_lk__,y _setLK+1
   954
   955 3C5D 8C 70 3C		ok	sty _setLK+1
   956
   957 3C60 BD 80 02			lda posy,x
   958 3C63 A8				tay
   959 3C64 29 07			and #7
   960 3C66 AA				tax
   961
   962 3C67 98				tya		; nasza aktualna minimalna pozycja pionowa YMIN, regY = POSY
   963 3C68 85 83			sta ymin
   964 3C6A 18 65 76			add height
   965 3C6D 85 84			sta ymax	; nasza aktualna maksymalna pozycja pionowa YMAX
   966
   967 3C6F 6C 00 39		_setLK	jmp (lh_lk)
   968
   969
   970 3C72 22 4A 72 9A C2	lsetb1	dta l(BALLB1.set, BALLB1.set+40, BALLB1.set+80, BALLB1.set+120, BALLB1.set+160)
   971 				;hsetb1	dta h(BALLB1.set,BALLB1.set+40,BALLB1.set+80,BALLB1.set+120,BALLB1.set+160)
   972
   973 3C77 16 3E 66 8E B6	lsetb2	dta l(BALLB2.set, BALLB2.set+40, BALLB2.set+80, BALLB2.set+120, BALLB2.set+160)
   974 				;hsetb2	dta h(BALLB2.set,BALLB2.set+40,BALLB2.set+80,BALLB2.set+120,BALLB2.set+160)
   975
   976 				/*
   977 				l_lk	dta l(lk0, lk1, lk2, lk3, lk4)
   978 				h_lk	dta h(lk0, lk1, lk2, lk3, lk4)
   979
   980 				l_lk__	dta l(lk0_, lk1_, lk2_, lk3_, lk4_)
   981 				h_lk__	dta h(lk0_, lk1_, lk2_, lk3_, lk4_)
   982 				*/
   982
   983
   984 3C7C BD AB 3A 85 00 BD + lk4	:8 mva ladr+#,x ln0+#*2
   985 3CA4 4C 0F 3D			jmp bjmpGo
   986
   987 				lk0	.rept 8
   988 					LDA LADR+#,X
   989 					STA LN0+#*2
   990 					STA LN8+#*2
   991 					STA LN16+#*2
   992 					STA LN24+#*2
   993 					STA LN32+#*2
   994 					.endr
Source: REPT
   988 3CA7 BD AB 3A			LDA LADR+#,X
   988 3CAA 85 00			STA LN0+#*2
   988 3CAC 85 10			STA LN8+#*2
   988 3CAE 85 20			STA LN16+#*2
   988 3CB0 85 30			STA LN24+#*2
   988 3CB2 85 40			STA LN32+#*2
   988 3CB4 BD AC 3A			LDA LADR+#,X
   988 3CB7 85 02			STA LN0+#*2
   988 3CB9 85 12			STA LN8+#*2
   988 3CBB 85 22			STA LN16+#*2
   988 3CBD 85 32			STA LN24+#*2
   988 3CBF 85 42			STA LN32+#*2
   988 3CC1 BD AD 3A			LDA LADR+#,X
   988 3CC4 85 04			STA LN0+#*2
   988 3CC6 85 14			STA LN8+#*2
   988 3CC8 85 24			STA LN16+#*2
   988 3CCA 85 34			STA LN24+#*2
   988 3CCC 85 44			STA LN32+#*2
   988 3CCE BD AE 3A			LDA LADR+#,X
   988 3CD1 85 06			STA LN0+#*2
   988 3CD3 85 16			STA LN8+#*2
   988 3CD5 85 26			STA LN16+#*2
   988 3CD7 85 36			STA LN24+#*2
   988 3CD9 85 46			STA LN32+#*2
   988 3CDB BD AF 3A			LDA LADR+#,X
   988 3CDE 85 08			STA LN0+#*2
   988 3CE0 85 18			STA LN8+#*2
   988 3CE2 85 28			STA LN16+#*2
   988 3CE4 85 38			STA LN24+#*2
   988 3CE6 85 48			STA LN32+#*2
   988 3CE8 BD B0 3A			LDA LADR+#,X
   988 3CEB 85 0A			STA LN0+#*2
   988 3CED 85 1A			STA LN8+#*2
   988 3CEF 85 2A			STA LN16+#*2
   988 3CF1 85 3A			STA LN24+#*2
   988 3CF3 85 4A			STA LN32+#*2
   988 3CF5 BD B1 3A			LDA LADR+#,X
   988 3CF8 85 0C			STA LN0+#*2
   988 3CFA 85 1C			STA LN8+#*2
   988 3CFC 85 2C			STA LN16+#*2
   988 3CFE 85 3C			STA LN24+#*2
   988 3D00 85 4C			STA LN32+#*2
   988 3D02 BD B2 3A			LDA LADR+#,X
   988 3D05 85 0E			STA LN0+#*2
   988 3D07 85 1E			STA LN8+#*2
   988 3D09 85 2E			STA LN16+#*2
   988 3D0B 85 3E			STA LN24+#*2
   988 3D0D 85 4E			STA LN32+#*2
Source: pang_chars.asm
   995
   996 3D0F A6 78		bjmpGo	ldx type
   997
   998 3D11 4C 19 3D			jmp BALLB1
   999 = 3D12			bjmp	equ *-2
  1000
  1001
  1002 3D14 A4 84		MINMAX	ldy ymax		; tutaj wracamy po wykonaniu procedur BALLB1 i BALLB2
  1003 3D16 4C 00 80			jmp MINMAX6
  1004 = 3D17			_minmax	equ *-2
  1005
  1006
  1007 				* ------------------ *
  1008 				* ---	BALLB1	 --- *
  1009 				* ------------------ *
  1010 3D19			BALLB1	.local
  1011
  1012 				;	ldy posy
  1013
  1014 				;	ldx type
  1015 3D19 BD 72 3C 8D 20 3D		mva	lsetb1,x	_set
  1016 				;	mva	hsetb1,x	_set+1
  1017
  1018 3D1F 4C 22 3D			jmp set
  1019 = 3D20			_set	equ *-2
  1020
  1021 3D22				.pages
  1022
  1023 3D22 B9 77 EF 85 4F B9 + set	:40 mva hadr1+39-#,y ln0+39*2-#*2+1
  1024
  1025 3DEA				.endpg
  1026
  1027 3DEA A4 77			ldy idx
  1028
  1029 				;	ldx type
  1030 3DEC B9 40 02			lda posx,y
  1031 3DEF 29 03			and #3
  1032 3DF1 18 7D 41 38			add tmul4,x	; type*4 + (posx and 3)
  1033 3DF5 AA				tax		; obliczyliœmy indeks do adresu programu tworz¹cego kule
  1034
  1035 3DF6 0A				asl @
  1036 3DF7 8D 0B 3E			sta _kul+1
  1037
  1038 				;	mva	lkula,x	_kul
  1039 				;	mva	hkula,x	_kul+1
  1040
  1041 3DFA BD 28 3B 8D 17 3D		mva	lminmax,x	_minmax
  1042
  1043 3E00 B9 40 02			lda posx,y
  1044 3E03 4A 4A			:2 lsr @
  1045 3E05 AA				tax		; TMINX+0, TMAXY+0
  1046
  1047 3E06 BC BA 38			ldy cellx8,x
  1048
  1049 3E09 18				clc
  1050 3E0A 6C 00 3B		_kul	jmp (lhkula)
  1051
  1052 					.endl
  1053
  1054
  1055 				* ------------------ *
  1056 				* ---	BALLB2	 --- *
  1057 				* ------------------ *
  1058 3E0D			BALLB2	.local
  1059
  1060 				;	ldy posy
  1061
  1062 				;	ldx type
  1063 3E0D BD 77 3C 8D 14 3E		mva	lsetb2,x	_set
  1064 				;	mva	hsetb2,x	_set+1
  1065
  1066 3E13 4C 16 3E			jmp set
  1067 = 3E14			_set	equ *-2
  1068
  1069 3E16				.pages
  1070
  1071 3E16 B9 77 F3 85 4F B9 + set	:40 mva hadr2+39-#,y ln0+39*2-#*2+1
  1072
  1073 3EDE				.endpg
  1074
  1075 3EDE A4 77			ldy idx
  1076
  1077 				;	ldx type
  1078 3EE0 B9 40 02			lda posx,y
  1079 3EE3 29 03			and #3
  1080 3EE5 18 7D 41 38			add tmul4,x	; type*4 + (posx and 3)
  1081 3EE9 AA				tax		; obliczyliœmy indeks do adresu programu tworz¹cego kule
  1082
  1083 3EEA 0A				asl @
  1084 3EEB 8D 03 3F			sta _kul+1
  1085
  1086 				;	mva	lkula,x	_kul
  1087 				;	mva	hkula,x	_kul+1
  1088
  1089 3EEE BD 28 3B 8D 17 3D		mva	lminmax,x	_minmax
  1090
  1091 3EF4 B9 40 02			lda posx,y
  1092 3EF7 4A 4A			:2 lsr @
  1093 3EF9 AA				tax		; TMINX+40, TMAXY+40
  1094
  1095 3EFA BC BA 38			ldy cellx8,x
  1096
  1097 3EFD 8A				txa
  1098 3EFE 18 69 28			add #40
  1099 3F01 AA				tax
  1100
  1101 				;	clc
  1102 3F02 6C 00 3B		_kul	jmp (lhkula)
  1103
  1104 					.endl
  1105
  1106
  1107 				lk3	.rept 8
  1108 					LDA LADR+#,X
  1109 					STA LN0+#*2
  1110 					STA LN8+#*2
  1111 					.endr
Source: REPT
  1108 3F05 BD AB 3A			LDA LADR+#,X
  1108 3F08 85 00			STA LN0+#*2
  1108 3F0A 85 10			STA LN8+#*2
  1108 3F0C BD AC 3A			LDA LADR+#,X
  1108 3F0F 85 02			STA LN0+#*2
  1108 3F11 85 12			STA LN8+#*2
  1108 3F13 BD AD 3A			LDA LADR+#,X
  1108 3F16 85 04			STA LN0+#*2
  1108 3F18 85 14			STA LN8+#*2
  1108 3F1A BD AE 3A			LDA LADR+#,X
  1108 3F1D 85 06			STA LN0+#*2
  1108 3F1F 85 16			STA LN8+#*2
  1108 3F21 BD AF 3A			LDA LADR+#,X
  1108 3F24 85 08			STA LN0+#*2
  1108 3F26 85 18			STA LN8+#*2
  1108 3F28 BD B0 3A			LDA LADR+#,X
  1108 3F2B 85 0A			STA LN0+#*2
  1108 3F2D 85 1A			STA LN8+#*2
  1108 3F2F BD B1 3A			LDA LADR+#,X
  1108 3F32 85 0C			STA LN0+#*2
  1108 3F34 85 1C			STA LN8+#*2
  1108 3F36 BD B2 3A			LDA LADR+#,X
  1108 3F39 85 0E			STA LN0+#*2
  1108 3F3B 85 1E			STA LN8+#*2
Source: pang_chars.asm
  1112 3F3D 4C 0F 3D			jmp bjmpGo
  1113
  1114 				lk2	.rept 8
  1115 					LDA LADR+#,X
  1116 					STA LN0+#*2
  1117 					STA LN8+#*2
  1118 					STA LN16+#*2
  1119 					.endr
Source: REPT
  1115 3F40 BD AB 3A			LDA LADR+#,X
  1115 3F43 85 00			STA LN0+#*2
  1115 3F45 85 10			STA LN8+#*2
  1115 3F47 85 20			STA LN16+#*2
  1115 3F49 BD AC 3A			LDA LADR+#,X
  1115 3F4C 85 02			STA LN0+#*2
  1115 3F4E 85 12			STA LN8+#*2
  1115 3F50 85 22			STA LN16+#*2
  1115 3F52 BD AD 3A			LDA LADR+#,X
  1115 3F55 85 04			STA LN0+#*2
  1115 3F57 85 14			STA LN8+#*2
  1115 3F59 85 24			STA LN16+#*2
  1115 3F5B BD AE 3A			LDA LADR+#,X
  1115 3F5E 85 06			STA LN0+#*2
  1115 3F60 85 16			STA LN8+#*2
  1115 3F62 85 26			STA LN16+#*2
  1115 3F64 BD AF 3A			LDA LADR+#,X
  1115 3F67 85 08			STA LN0+#*2
  1115 3F69 85 18			STA LN8+#*2
  1115 3F6B 85 28			STA LN16+#*2
  1115 3F6D BD B0 3A			LDA LADR+#,X
  1115 3F70 85 0A			STA LN0+#*2
  1115 3F72 85 1A			STA LN8+#*2
  1115 3F74 85 2A			STA LN16+#*2
  1115 3F76 BD B1 3A			LDA LADR+#,X
  1115 3F79 85 0C			STA LN0+#*2
  1115 3F7B 85 1C			STA LN8+#*2
  1115 3F7D 85 2C			STA LN16+#*2
  1115 3F7F BD B2 3A			LDA LADR+#,X
  1115 3F82 85 0E			STA LN0+#*2
  1115 3F84 85 1E			STA LN8+#*2
  1115 3F86 85 2E			STA LN16+#*2
Source: pang_chars.asm
  1120 3F88 4C 0F 3D			jmp bjmpGo
  1121
  1122 				lk1	.rept 8
  1123 					LDA LADR+#,X
  1124 					STA LN0+#*2
  1125 					STA LN8+#*2
  1126 					STA LN16+#*2
  1127 					STA LN24+#*2
  1128 					.endr
Source: REPT
  1123 3F8B BD AB 3A			LDA LADR+#,X
  1123 3F8E 85 00			STA LN0+#*2
  1123 3F90 85 10			STA LN8+#*2
  1123 3F92 85 20			STA LN16+#*2
  1123 3F94 85 30			STA LN24+#*2
  1123 3F96 BD AC 3A			LDA LADR+#,X
  1123 3F99 85 02			STA LN0+#*2
  1123 3F9B 85 12			STA LN8+#*2
  1123 3F9D 85 22			STA LN16+#*2
  1123 3F9F 85 32			STA LN24+#*2
  1123 3FA1 BD AD 3A			LDA LADR+#,X
  1123 3FA4 85 04			STA LN0+#*2
  1123 3FA6 85 14			STA LN8+#*2
  1123 3FA8 85 24			STA LN16+#*2
  1123 3FAA 85 34			STA LN24+#*2
  1123 3FAC BD AE 3A			LDA LADR+#,X
  1123 3FAF 85 06			STA LN0+#*2
  1123 3FB1 85 16			STA LN8+#*2
  1123 3FB3 85 26			STA LN16+#*2
  1123 3FB5 85 36			STA LN24+#*2
  1123 3FB7 BD AF 3A			LDA LADR+#,X
  1123 3FBA 85 08			STA LN0+#*2
  1123 3FBC 85 18			STA LN8+#*2
  1123 3FBE 85 28			STA LN16+#*2
  1123 3FC0 85 38			STA LN24+#*2
  1123 3FC2 BD B0 3A			LDA LADR+#,X
  1123 3FC5 85 0A			STA LN0+#*2
  1123 3FC7 85 1A			STA LN8+#*2
  1123 3FC9 85 2A			STA LN16+#*2
  1123 3FCB 85 3A			STA LN24+#*2
  1123 3FCD BD B1 3A			LDA LADR+#,X
  1123 3FD0 85 0C			STA LN0+#*2
  1123 3FD2 85 1C			STA LN8+#*2
  1123 3FD4 85 2C			STA LN16+#*2
  1123 3FD6 85 3C			STA LN24+#*2
  1123 3FD8 BD B2 3A			LDA LADR+#,X
  1123 3FDB 85 0E			STA LN0+#*2
  1123 3FDD 85 1E			STA LN8+#*2
  1123 3FDF 85 2E			STA LN16+#*2
  1123 3FE1 85 3E			STA LN24+#*2
Source: pang_chars.asm
  1129 3FE3 4C 0F 3D			jmp bjmpGo
  1130
  1131 3FE6 BD BF 3A 85 00 BD + lk4_	:8 mva ladr_+#,x ln0+#*2
  1132 400E 4C 0F 3D			jmp bjmpGo
  1133
  1134 				lk3_	.rept 8
  1135 					LDA LADR_+#,X
  1136 					STA LN0+#*2
  1137 					STA LN8+#*2
  1138 					.endr
Source: REPT
  1135 4011 BD BF 3A			LDA LADR_+#,X
  1135 4014 85 00			STA LN0+#*2
  1135 4016 85 10			STA LN8+#*2
  1135 4018 BD C0 3A			LDA LADR_+#,X
  1135 401B 85 02			STA LN0+#*2
  1135 401D 85 12			STA LN8+#*2
  1135 401F BD C1 3A			LDA LADR_+#,X
  1135 4022 85 04			STA LN0+#*2
  1135 4024 85 14			STA LN8+#*2
  1135 4026 BD C2 3A			LDA LADR_+#,X
  1135 4029 85 06			STA LN0+#*2
  1135 402B 85 16			STA LN8+#*2
  1135 402D BD C3 3A			LDA LADR_+#,X
  1135 4030 85 08			STA LN0+#*2
  1135 4032 85 18			STA LN8+#*2
  1135 4034 BD C4 3A			LDA LADR_+#,X
  1135 4037 85 0A			STA LN0+#*2
  1135 4039 85 1A			STA LN8+#*2
  1135 403B BD C5 3A			LDA LADR_+#,X
  1135 403E 85 0C			STA LN0+#*2
  1135 4040 85 1C			STA LN8+#*2
  1135 4042 BD C6 3A			LDA LADR_+#,X
  1135 4045 85 0E			STA LN0+#*2
  1135 4047 85 1E			STA LN8+#*2
Source: pang_chars.asm
  1139 4049 4C 0F 3D			jmp bjmpGo
  1140
  1141 				lk2_	.rept 8
  1142 					LDA LADR_+#,X
  1143 					STA LN0+#*2
  1144 					STA LN8+#*2
  1145 					STA LN16+#*2
  1146 					.endr
Source: REPT
  1142 404C BD BF 3A			LDA LADR_+#,X
  1142 404F 85 00			STA LN0+#*2
  1142 4051 85 10			STA LN8+#*2
  1142 4053 85 20			STA LN16+#*2
  1142 4055 BD C0 3A			LDA LADR_+#,X
  1142 4058 85 02			STA LN0+#*2
  1142 405A 85 12			STA LN8+#*2
  1142 405C 85 22			STA LN16+#*2
  1142 405E BD C1 3A			LDA LADR_+#,X
  1142 4061 85 04			STA LN0+#*2
  1142 4063 85 14			STA LN8+#*2
  1142 4065 85 24			STA LN16+#*2
  1142 4067 BD C2 3A			LDA LADR_+#,X
  1142 406A 85 06			STA LN0+#*2
  1142 406C 85 16			STA LN8+#*2
  1142 406E 85 26			STA LN16+#*2
  1142 4070 BD C3 3A			LDA LADR_+#,X
  1142 4073 85 08			STA LN0+#*2
  1142 4075 85 18			STA LN8+#*2
  1142 4077 85 28			STA LN16+#*2
  1142 4079 BD C4 3A			LDA LADR_+#,X
  1142 407C 85 0A			STA LN0+#*2
  1142 407E 85 1A			STA LN8+#*2
  1142 4080 85 2A			STA LN16+#*2
  1142 4082 BD C5 3A			LDA LADR_+#,X
  1142 4085 85 0C			STA LN0+#*2
  1142 4087 85 1C			STA LN8+#*2
  1142 4089 85 2C			STA LN16+#*2
  1142 408B BD C6 3A			LDA LADR_+#,X
  1142 408E 85 0E			STA LN0+#*2
  1142 4090 85 1E			STA LN8+#*2
  1142 4092 85 2E			STA LN16+#*2
Source: pang_chars.asm
  1147 4094 4C 0F 3D			jmp bjmpGo
  1148
  1149 				lk1_	.rept 8
  1150 					LDA LADR_+#,X
  1151 					STA LN0+#*2
  1152 					STA LN8+#*2
  1153 					STA LN16+#*2
  1154 					STA LN24+#*2
  1155 					.endr
Source: REPT
  1150 4097 BD BF 3A			LDA LADR_+#,X
  1150 409A 85 00			STA LN0+#*2
  1150 409C 85 10			STA LN8+#*2
  1150 409E 85 20			STA LN16+#*2
  1150 40A0 85 30			STA LN24+#*2
  1150 40A2 BD C0 3A			LDA LADR_+#,X
  1150 40A5 85 02			STA LN0+#*2
  1150 40A7 85 12			STA LN8+#*2
  1150 40A9 85 22			STA LN16+#*2
  1150 40AB 85 32			STA LN24+#*2
  1150 40AD BD C1 3A			LDA LADR_+#,X
  1150 40B0 85 04			STA LN0+#*2
  1150 40B2 85 14			STA LN8+#*2
  1150 40B4 85 24			STA LN16+#*2
  1150 40B6 85 34			STA LN24+#*2
  1150 40B8 BD C2 3A			LDA LADR_+#,X
  1150 40BB 85 06			STA LN0+#*2
  1150 40BD 85 16			STA LN8+#*2
  1150 40BF 85 26			STA LN16+#*2
  1150 40C1 85 36			STA LN24+#*2
  1150 40C3 BD C3 3A			LDA LADR_+#,X
  1150 40C6 85 08			STA LN0+#*2
  1150 40C8 85 18			STA LN8+#*2
  1150 40CA 85 28			STA LN16+#*2
  1150 40CC 85 38			STA LN24+#*2
  1150 40CE BD C4 3A			LDA LADR_+#,X
  1150 40D1 85 0A			STA LN0+#*2
  1150 40D3 85 1A			STA LN8+#*2
  1150 40D5 85 2A			STA LN16+#*2
  1150 40D7 85 3A			STA LN24+#*2
  1150 40D9 BD C5 3A			LDA LADR_+#,X
  1150 40DC 85 0C			STA LN0+#*2
  1150 40DE 85 1C			STA LN8+#*2
  1150 40E0 85 2C			STA LN16+#*2
  1150 40E2 85 3C			STA LN24+#*2
  1150 40E4 BD C6 3A			LDA LADR_+#,X
  1150 40E7 85 0E			STA LN0+#*2
  1150 40E9 85 1E			STA LN8+#*2
  1150 40EB 85 2E			STA LN16+#*2
  1150 40ED 85 3E			STA LN24+#*2
Source: pang_chars.asm
  1156 40EF 4C 0F 3D			jmp bjmpGo
  1157
  1158 				lk0_	.rept 8
  1159 					LDA LADR_+#,X
  1160 					STA LN0+#*2
  1161 					STA LN8+#*2
  1162 					STA LN16+#*2
  1163 					STA LN24+#*2
  1164 					STA LN32+#*2
  1165 					.endr
Source: REPT
  1159 40F2 BD BF 3A			LDA LADR_+#,X
  1159 40F5 85 00			STA LN0+#*2
  1159 40F7 85 10			STA LN8+#*2
  1159 40F9 85 20			STA LN16+#*2
  1159 40FB 85 30			STA LN24+#*2
  1159 40FD 85 40			STA LN32+#*2
  1159 40FF BD C0 3A			LDA LADR_+#,X
  1159 4102 85 02			STA LN0+#*2
  1159 4104 85 12			STA LN8+#*2
  1159 4106 85 22			STA LN16+#*2
  1159 4108 85 32			STA LN24+#*2
  1159 410A 85 42			STA LN32+#*2
  1159 410C BD C1 3A			LDA LADR_+#,X
  1159 410F 85 04			STA LN0+#*2
  1159 4111 85 14			STA LN8+#*2
  1159 4113 85 24			STA LN16+#*2
  1159 4115 85 34			STA LN24+#*2
  1159 4117 85 44			STA LN32+#*2
  1159 4119 BD C2 3A			LDA LADR_+#,X
  1159 411C 85 06			STA LN0+#*2
  1159 411E 85 16			STA LN8+#*2
  1159 4120 85 26			STA LN16+#*2
  1159 4122 85 36			STA LN24+#*2
  1159 4124 85 46			STA LN32+#*2
  1159 4126 BD C3 3A			LDA LADR_+#,X
  1159 4129 85 08			STA LN0+#*2
  1159 412B 85 18			STA LN8+#*2
  1159 412D 85 28			STA LN16+#*2
  1159 412F 85 38			STA LN24+#*2
  1159 4131 85 48			STA LN32+#*2
  1159 4133 BD C4 3A			LDA LADR_+#,X
  1159 4136 85 0A			STA LN0+#*2
  1159 4138 85 1A			STA LN8+#*2
  1159 413A 85 2A			STA LN16+#*2
  1159 413C 85 3A			STA LN24+#*2
  1159 413E 85 4A			STA LN32+#*2
  1159 4140 BD C5 3A			LDA LADR_+#,X
  1159 4143 85 0C			STA LN0+#*2
  1159 4145 85 1C			STA LN8+#*2
  1159 4147 85 2C			STA LN16+#*2
  1159 4149 85 3C			STA LN24+#*2
  1159 414B 85 4C			STA LN32+#*2
  1159 414D BD C6 3A			LDA LADR_+#,X
  1159 4150 85 0E			STA LN0+#*2
  1159 4152 85 1E			STA LN8+#*2
  1159 4154 85 2E			STA LN16+#*2
  1159 4156 85 3E			STA LN24+#*2
  1159 4158 85 4E			STA LN32+#*2
Source: pang_chars.asm
  1166 415A 4C 0F 3D			jmp bjmpGo
  1167
  1168 				.endp
  1169
  1170
  1171 				;	icl '_PC\asm-kule_2\kula0.asm'		; procedury tworzenia kul
  1172 				;	icl '_PC\asm-kule_2\kula1.asm'
  1173 415D				icl '_PC\asm-kule_2\kula2.asm'
Source: kula2.asm
     1 415D			.local	k2
     2 415D			_0
     3 415D B1 20			lda (ln16),y
     4 415F 29 C0			and #$C0
     5 4161 09 20			ora #$20
     6 4163 91 20			sta (ln16),y
     7 4165 B1 22			lda (ln17),y
     8 4167 29 C0			and #$C0
     9 4169 09 20			ora #$20
    10 416B 91 22			sta (ln17),y
    11 416D B1 24			lda (ln18),y
    12 416F 29 C0			and #$C0
    13 4171 09 20			ora #$20
    14 4173 91 24			sta (ln18),y
    15 4175 B1 0A			lda (ln5),y
    16 4177 29 C0			and #$C0
    17 4179 09 21			ora #$21
    18 417B 91 0A			sta (ln5),y
    19 417D B1 0C			lda (ln6),y
    20 417F 29 C0			and #$C0
    21 4181 09 21			ora #$21
    22 4183 91 0C			sta (ln6),y
    23 4185 B1 0E			lda (ln7),y
    24 4187 29 C0			and #$C0
    25 4189 09 25			ora #$25
    26 418B 91 0E			sta (ln7),y
    27 418D B1 06			lda (ln3),y
    28 418F 29 F0			and #$F0
    29 4191 09 08			ora #$08
    30 4193 91 06			sta (ln3),y
    31 4195 B1 08			lda (ln4),y
    32 4197 29 F0			and #$F0
    33 4199 09 08			ora #$08
    34 419B 91 08			sta (ln4),y
    35 419D B1 26			lda (ln19),y
    36 419F 29 F0			and #$F0
    37 41A1 09 08			ora #$08
    38 41A3 91 26			sta (ln19),y
    39 41A5 B1 28			lda (ln20),y
    40 41A7 29 F0			and #$F0
    41 41A9 09 08			ora #$08
    42 41AB 91 28			sta (ln20),y
    43 41AD B1 04			lda (ln2),y
    44 41AF 29 FC			and #$FC
    45 41B1 09 02			ora #$02
    46 41B3 91 04			sta (ln2),y
    47 41B5 B1 2A			lda (ln21),y
    48 41B7 29 FC			and #$FC
    49 41B9 09 02			ora #$02
    50 41BB 91 2A			sta (ln21),y
    51 41BD A9 80			lda #$80
    52 41BF 91 18			sta (ln12),y
    53 41C1 91 1A			sta (ln13),y
    54 41C3 91 1C			sta (ln14),y
    55 41C5 91 1E			sta (ln15),y
    56 41C7 A9 84			lda #$84
    57 41C9 91 10			sta (ln8),y
    58 41CB 91 14			sta (ln10),y
    59 41CD 91 16			sta (ln11),y
    60 41CF A9 85			lda #$85
    61 41D1 91 12			sta (ln9),y
    62 41D3				@@INC inck2
Macro: @@INC [Source: pang_chars.asm]
     1 41D3 98				tya
     2 41D4 69 08			adc #8
     3 41D6 A8				tay
Source: kula2.asm
    63 41D7 A9 00			lda #$00
    64 41D9 91 04			sta (ln2),y
    65 41DB 91 06			sta (ln3),y
    66 41DD 91 0C			sta (ln6),y
    67 41DF 91 0E			sta (ln7),y
    68 41E1 91 10			sta (ln8),y
    69 41E3 91 12			sta (ln9),y
    70 41E5 91 14			sta (ln10),y
    71 41E7 91 16			sta (ln11),y
    72 41E9 91 18			sta (ln12),y
    73 41EB 91 1A			sta (ln13),y
    74 41ED 91 1C			sta (ln14),y
    75 41EF 91 1E			sta (ln15),y
    76 41F1 91 20			sta (ln16),y
    77 41F3 91 22			sta (ln17),y
    78 41F5 91 2A			sta (ln21),y
    79 41F7 A9 01			lda #$01
    80 41F9 91 24			sta (ln18),y
    81 41FB 91 26			sta (ln19),y
    82 41FD A9 04			lda #$04
    83 41FF 91 28			sta (ln20),y
    84 4201 A9 40			lda #$40
    85 4203 91 08			sta (ln4),y
    86 4205 91 0A			sta (ln5),y
    87 4207 A9 AA			lda #$AA
    88 4209 91 02			sta (ln1),y
    89 420B 91 2C			sta (ln22),y
    90 420D				@@INC inck2
Macro: @@INC [Source: pang_chars.asm]
     1 420D 98				tya
     2 420E 69 08			adc #8
     3 4210 A8				tay
Source: kula2.asm
    91 4211 B1 0A			lda (ln5),y
    92 4213 29 03			and #$03
    93 4215 09 08			ora #$08
    94 4217 91 0A			sta (ln5),y
    95 4219 B1 0C			lda (ln6),y
    96 421B 29 03			and #$03
    97 421D 09 08			ora #$08
    98 421F 91 0C			sta (ln6),y
    99 4221 B1 0E			lda (ln7),y
   100 4223 29 03			and #$03
   101 4225 09 08			ora #$08
   102 4227 91 0E			sta (ln7),y
   103 4229 B1 06			lda (ln3),y
   104 422B 29 0F			and #$0F
   105 422D 09 20			ora #$20
   106 422F 91 06			sta (ln3),y
   107 4231 B1 08			lda (ln4),y
   108 4233 29 0F			and #$0F
   109 4235 09 20			ora #$20
   110 4237 91 08			sta (ln4),y
   111 4239 B1 26			lda (ln19),y
   112 423B 29 0F			and #$0F
   113 423D 09 20			ora #$20
   114 423F 91 26			sta (ln19),y
   115 4241 B1 28			lda (ln20),y
   116 4243 29 0F			and #$0F
   117 4245 09 20			ora #$20
   118 4247 91 28			sta (ln20),y
   119 4249 B1 20			lda (ln16),y
   120 424B 29 03			and #$03
   121 424D 09 48			ora #$48
   122 424F 91 20			sta (ln16),y
   123 4251 B1 22			lda (ln17),y
   124 4253 29 03			and #$03
   125 4255 09 48			ora #$48
   126 4257 91 22			sta (ln17),y
   127 4259 B1 24			lda (ln18),y
   128 425B 29 03			and #$03
   129 425D 09 48			ora #$48
   130 425F 91 24			sta (ln18),y
   131 4261 B1 04			lda (ln2),y
   132 4263 29 3F			and #$3F
   133 4265 09 80			ora #$80
   134 4267 91 04			sta (ln2),y
   135 4269 B1 2A			lda (ln21),y
   136 426B 29 3F			and #$3F
   137 426D 09 80			ora #$80
   138 426F 91 2A			sta (ln21),y
   139 4271 A9 02			lda #$02
   140 4273 91 10			sta (ln8),y
   141 4275 91 12			sta (ln9),y
   142 4277 91 14			sta (ln10),y
   143 4279 91 16			sta (ln11),y
   144 427B 91 18			sta (ln12),y
   145 427D 91 1A			sta (ln13),y
   146 427F 91 1C			sta (ln14),y
   147 4281 91 1E			sta (ln15),y
   148 4283 4C 14 3D			jmp BALL.MINMAX
   149 4286			_1
   150 4286 B1 18			lda (ln12),y
   151 4288 29 C0			and #$C0
   152 428A 09 20			ora #$20
   153 428C 91 18			sta (ln12),y
   154 428E B1 1A			lda (ln13),y
   155 4290 29 C0			and #$C0
   156 4292 09 20			ora #$20
   157 4294 91 1A			sta (ln13),y
   158 4296 B1 1C			lda (ln14),y
   159 4298 29 C0			and #$C0
   160 429A 09 20			ora #$20
   161 429C 91 1C			sta (ln14),y
   162 429E B1 1E			lda (ln15),y
   163 42A0 29 C0			and #$C0
   164 42A2 09 20			ora #$20
   165 42A4 91 1E			sta (ln15),y
   166 42A6 B1 10			lda (ln8),y
   167 42A8 29 C0			and #$C0
   168 42AA 09 21			ora #$21
   169 42AC 91 10			sta (ln8),y
   170 42AE B1 12			lda (ln9),y
   171 42B0 29 C0			and #$C0
   172 42B2 09 21			ora #$21
   173 42B4 91 12			sta (ln9),y
   174 42B6 B1 14			lda (ln10),y
   175 42B8 29 C0			and #$C0
   176 42BA 09 21			ora #$21
   177 42BC 91 14			sta (ln10),y
   178 42BE B1 16			lda (ln11),y
   179 42C0 29 C0			and #$C0
   180 42C2 09 21			ora #$21
   181 42C4 91 16			sta (ln11),y
   182 42C6 B1 0A			lda (ln5),y
   183 42C8 29 F0			and #$F0
   184 42CA 09 08			ora #$08
   185 42CC 91 0A			sta (ln5),y
   186 42CE B1 0C			lda (ln6),y
   187 42D0 29 F0			and #$F0
   188 42D2 09 08			ora #$08
   189 42D4 91 0C			sta (ln6),y
   190 42D6 B1 20			lda (ln16),y
   191 42D8 29 F0			and #$F0
   192 42DA 09 08			ora #$08
   193 42DC 91 20			sta (ln16),y
   194 42DE B1 22			lda (ln17),y
   195 42E0 29 F0			and #$F0
   196 42E2 09 08			ora #$08
   197 42E4 91 22			sta (ln17),y
   198 42E6 B1 24			lda (ln18),y
   199 42E8 29 F0			and #$F0
   200 42EA 09 08			ora #$08
   201 42EC 91 24			sta (ln18),y
   202 42EE B1 0E			lda (ln7),y
   203 42F0 29 F0			and #$F0
   204 42F2 09 09			ora #$09
   205 42F4 91 0E			sta (ln7),y
   206 42F6 B1 06			lda (ln3),y
   207 42F8 29 FC			and #$FC
   208 42FA 09 02			ora #$02
   209 42FC 91 06			sta (ln3),y
   210 42FE B1 08			lda (ln4),y
   211 4300 29 FC			and #$FC
   212 4302 09 02			ora #$02
   213 4304 91 08			sta (ln4),y
   214 4306 B1 26			lda (ln19),y
   215 4308 29 FC			and #$FC
   216 430A 09 02			ora #$02
   217 430C 91 26			sta (ln19),y
   218 430E B1 28			lda (ln20),y
   219 4310 29 FC			and #$FC
   220 4312 09 02			ora #$02
   221 4314 91 28			sta (ln20),y
   222 4316				@@INC inck2
Macro: @@INC [Source: pang_chars.asm]
     1 4316 98				tya
     2 4317 69 08			adc #8
     3 4319 A8				tay
Source: kula2.asm
   223 431A B1 02			lda (ln1),y
   224 431C 29 C0			and #$C0
   225 431E 09 2A			ora #$2A
   226 4320 91 02			sta (ln1),y
   227 4322 B1 2C			lda (ln22),y
   228 4324 29 C0			and #$C0
   229 4326 09 2A			ora #$2A
   230 4328 91 2C			sta (ln22),y
   231 432A A9 00			lda #$00
   232 432C 91 06			sta (ln3),y
   233 432E 91 10			sta (ln8),y
   234 4330 91 14			sta (ln10),y
   235 4332 91 16			sta (ln11),y
   236 4334 91 18			sta (ln12),y
   237 4336 91 1A			sta (ln13),y
   238 4338 91 1C			sta (ln14),y
   239 433A 91 1E			sta (ln15),y
   240 433C 91 20			sta (ln16),y
   241 433E 91 22			sta (ln17),y
   242 4340 91 24			sta (ln18),y
   243 4342 91 26			sta (ln19),y
   244 4344 A9 01			lda #$01
   245 4346 91 28			sta (ln20),y
   246 4348 A9 10			lda #$10
   247 434A 91 08			sta (ln4),y
   248 434C A9 40			lda #$40
   249 434E 91 0C			sta (ln6),y
   250 4350 91 0E			sta (ln7),y
   251 4352 91 12			sta (ln9),y
   252 4354 A9 50			lda #$50
   253 4356 91 0A			sta (ln5),y
   254 4358 A9 80			lda #$80
   255 435A 91 04			sta (ln2),y
   256 435C 91 2A			sta (ln21),y
   257 435E				@@INC inck2
Macro: @@INC [Source: pang_chars.asm]
     1 435E 98				tya
     2 435F 69 08			adc #8
     3 4361 A8				tay
Source: kula2.asm
   258 4362 B1 06			lda (ln3),y
   259 4364 29 03			and #$03
   260 4366 09 08			ora #$08
   261 4368 91 06			sta (ln3),y
   262 436A B1 08			lda (ln4),y
   263 436C 29 03			and #$03
   264 436E 09 08			ora #$08
   265 4370 91 08			sta (ln4),y
   266 4372 B1 28			lda (ln20),y
   267 4374 29 03			and #$03
   268 4376 09 08			ora #$08
   269 4378 91 28			sta (ln20),y
   270 437A B1 04			lda (ln2),y
   271 437C 29 0F			and #$0F
   272 437E 09 20			ora #$20
   273 4380 91 04			sta (ln2),y
   274 4382 B1 2A			lda (ln21),y
   275 4384 29 0F			and #$0F
   276 4386 09 20			ora #$20
   277 4388 91 2A			sta (ln21),y
   278 438A B1 26			lda (ln19),y
   279 438C 29 03			and #$03
   280 438E 09 48			ora #$48
   281 4390 91 26			sta (ln19),y
   282 4392 B1 02			lda (ln1),y
   283 4394 29 3F			and #$3F
   284 4396 09 80			ora #$80
   285 4398 91 02			sta (ln1),y
   286 439A B1 2C			lda (ln22),y
   287 439C 29 3F			and #$3F
   288 439E 09 80			ora #$80
   289 43A0 91 2C			sta (ln22),y
   290 43A2 A9 00			lda #$00
   291 43A4 91 10			sta (ln8),y
   292 43A6 91 12			sta (ln9),y
   293 43A8 91 14			sta (ln10),y
   294 43AA 91 16			sta (ln11),y
   295 43AC 91 18			sta (ln12),y
   296 43AE 91 1A			sta (ln13),y
   297 43B0 91 1C			sta (ln14),y
   298 43B2 91 1E			sta (ln15),y
   299 43B4 A9 02			lda #$02
   300 43B6 91 0A			sta (ln5),y
   301 43B8 91 0C			sta (ln6),y
   302 43BA 91 0E			sta (ln7),y
   303 43BC A9 12			lda #$12
   304 43BE 91 20			sta (ln16),y
   305 43C0 91 22			sta (ln17),y
   306 43C2 A9 52			lda #$52
   307 43C4 91 24			sta (ln18),y
   308 43C6				@@INC inck2
Macro: @@INC [Source: pang_chars.asm]
     1 43C6 98				tya
     2 43C7 69 08			adc #8
     3 43C9 A8				tay
Source: kula2.asm
   309 43CA B1 10			lda (ln8),y
   310 43CC 29 3F			and #$3F
   311 43CE 09 80			ora #$80
   312 43D0 91 10			sta (ln8),y
   313 43D2 B1 12			lda (ln9),y
   314 43D4 29 3F			and #$3F
   315 43D6 09 80			ora #$80
   316 43D8 91 12			sta (ln9),y
   317 43DA B1 14			lda (ln10),y
   318 43DC 29 3F			and #$3F
   319 43DE 09 80			ora #$80
   320 43E0 91 14			sta (ln10),y
   321 43E2 B1 16			lda (ln11),y
   322 43E4 29 3F			and #$3F
   323 43E6 09 80			ora #$80
   324 43E8 91 16			sta (ln11),y
   325 43EA B1 18			lda (ln12),y
   326 43EC 29 3F			and #$3F
   327 43EE 09 80			ora #$80
   328 43F0 91 18			sta (ln12),y
   329 43F2 B1 1A			lda (ln13),y
   330 43F4 29 3F			and #$3F
   331 43F6 09 80			ora #$80
   332 43F8 91 1A			sta (ln13),y
   333 43FA B1 1C			lda (ln14),y
   334 43FC 29 3F			and #$3F
   335 43FE 09 80			ora #$80
   336 4400 91 1C			sta (ln14),y
   337 4402 B1 1E			lda (ln15),y
   338 4404 29 3F			and #$3F
   339 4406 09 80			ora #$80
   340 4408 91 1E			sta (ln15),y
   341 440A 4C 14 3D			jmp BALL.MINMAX
   342 440D			_2
   343 440D B1 10			lda (ln8),y
   344 440F 29 F0			and #$F0
   345 4411 09 08			ora #$08
   346 4413 91 10			sta (ln8),y
   347 4415 B1 12			lda (ln9),y
   348 4417 29 F0			and #$F0
   349 4419 09 08			ora #$08
   350 441B 91 12			sta (ln9),y
   351 441D B1 14			lda (ln10),y
   352 441F 29 F0			and #$F0
   353 4421 09 08			ora #$08
   354 4423 91 14			sta (ln10),y
   355 4425 B1 16			lda (ln11),y
   356 4427 29 F0			and #$F0
   357 4429 09 08			ora #$08
   358 442B 91 16			sta (ln11),y
   359 442D B1 18			lda (ln12),y
   360 442F 29 F0			and #$F0
   361 4431 09 08			ora #$08
   362 4433 91 18			sta (ln12),y
   363 4435 B1 1A			lda (ln13),y
   364 4437 29 F0			and #$F0
   365 4439 09 08			ora #$08
   366 443B 91 1A			sta (ln13),y
   367 443D B1 1C			lda (ln14),y
   368 443F 29 F0			and #$F0
   369 4441 09 08			ora #$08
   370 4443 91 1C			sta (ln14),y
   371 4445 B1 1E			lda (ln15),y
   372 4447 29 F0			and #$F0
   373 4449 09 08			ora #$08
   374 444B 91 1E			sta (ln15),y
   375 444D B1 0A			lda (ln5),y
   376 444F 29 FC			and #$FC
   377 4451 09 02			ora #$02
   378 4453 91 0A			sta (ln5),y
   379 4455 B1 0C			lda (ln6),y
   380 4457 29 FC			and #$FC
   381 4459 09 02			ora #$02
   382 445B 91 0C			sta (ln6),y
   383 445D B1 0E			lda (ln7),y
   384 445F 29 FC			and #$FC
   385 4461 09 02			ora #$02
   386 4463 91 0E			sta (ln7),y
   387 4465 B1 20			lda (ln16),y
   388 4467 29 FC			and #$FC
   389 4469 09 02			ora #$02
   390 446B 91 20			sta (ln16),y
   391 446D B1 22			lda (ln17),y
   392 446F 29 FC			and #$FC
   393 4471 09 02			ora #$02
   394 4473 91 22			sta (ln17),y
   395 4475 B1 24			lda (ln18),y
   396 4477 29 FC			and #$FC
   397 4479 09 02			ora #$02
   398 447B 91 24			sta (ln18),y
   399 447D				@@INC inck2
Macro: @@INC [Source: pang_chars.asm]
     1 447D 98				tya
     2 447E 69 08			adc #8
     3 4480 A8				tay
Source: kula2.asm
   400 4481 B1 04			lda (ln2),y
   401 4483 29 C0			and #$C0
   402 4485 09 20			ora #$20
   403 4487 91 04			sta (ln2),y
   404 4489 B1 2A			lda (ln21),y
   405 448B 29 C0			and #$C0
   406 448D 09 20			ora #$20
   407 448F 91 2A			sta (ln21),y
   408 4491 B1 02			lda (ln1),y
   409 4493 29 F0			and #$F0
   410 4495 09 0A			ora #$0A
   411 4497 91 02			sta (ln1),y
   412 4499 B1 2C			lda (ln22),y
   413 449B 29 F0			and #$F0
   414 449D 09 0A			ora #$0A
   415 449F 91 2C			sta (ln22),y
   416 44A1 A9 00			lda #$00
   417 44A3 91 18			sta (ln12),y
   418 44A5 91 1A			sta (ln13),y
   419 44A7 91 1C			sta (ln14),y
   420 44A9 91 1E			sta (ln15),y
   421 44AB 91 20			sta (ln16),y
   422 44AD 91 22			sta (ln17),y
   423 44AF 91 24			sta (ln18),y
   424 44B1 A9 10			lda #$10
   425 44B3 91 0C			sta (ln6),y
   426 44B5 A9 14			lda #$14
   427 44B7 91 0A			sta (ln5),y
   428 44B9 A9 40			lda #$40
   429 44BB 91 10			sta (ln8),y
   430 44BD 91 14			sta (ln10),y
   431 44BF 91 16			sta (ln11),y
   432 44C1 A9 50			lda #$50
   433 44C3 91 0E			sta (ln7),y
   434 44C5 91 12			sta (ln9),y
   435 44C7 A9 80			lda #$80
   436 44C9 91 06			sta (ln3),y
   437 44CB 91 26			sta (ln19),y
   438 44CD 91 28			sta (ln20),y
   439 44CF A9 84			lda #$84
   440 44D1 91 08			sta (ln4),y
   441 44D3				@@INC inck2
Macro: @@INC [Source: pang_chars.asm]
     1 44D3 98				tya
     2 44D4 69 08			adc #8
     3 44D6 A8				tay
Source: kula2.asm
   442 44D7 B1 04			lda (ln2),y
   443 44D9 29 03			and #$03
   444 44DB 09 08			ora #$08
   445 44DD 91 04			sta (ln2),y
   446 44DF B1 2A			lda (ln21),y
   447 44E1 29 03			and #$03
   448 44E3 09 08			ora #$08
   449 44E5 91 2A			sta (ln21),y
   450 44E7 B1 02			lda (ln1),y
   451 44E9 29 0F			and #$0F
   452 44EB 09 A0			ora #$A0
   453 44ED 91 02			sta (ln1),y
   454 44EF B1 2C			lda (ln22),y
   455 44F1 29 0F			and #$0F
   456 44F3 09 A0			ora #$A0
   457 44F5 91 2C			sta (ln22),y
   458 44F7 A9 00			lda #$00
   459 44F9 91 0A			sta (ln5),y
   460 44FB 91 0C			sta (ln6),y
   461 44FD 91 0E			sta (ln7),y
   462 44FF 91 10			sta (ln8),y
   463 4501 91 12			sta (ln9),y
   464 4503 91 14			sta (ln10),y
   465 4505 91 16			sta (ln11),y
   466 4507 91 18			sta (ln12),y
   467 4509 91 1A			sta (ln13),y
   468 450B 91 1C			sta (ln14),y
   469 450D 91 1E			sta (ln15),y
   470 450F A9 02			lda #$02
   471 4511 91 06			sta (ln3),y
   472 4513 91 08			sta (ln4),y
   473 4515 A9 04			lda #$04
   474 4517 91 20			sta (ln16),y
   475 4519 91 22			sta (ln17),y
   476 451B A9 12			lda #$12
   477 451D 91 26			sta (ln19),y
   478 451F A9 14			lda #$14
   479 4521 91 24			sta (ln18),y
   480 4523 A9 42			lda #$42
   481 4525 91 28			sta (ln20),y
   482 4527				@@INC inck2
Macro: @@INC [Source: pang_chars.asm]
     1 4527 98				tya
     2 4528 69 08			adc #8
     3 452A A8				tay
Source: kula2.asm
   483 452B B1 10			lda (ln8),y
   484 452D 29 0F			and #$0F
   485 452F 09 20			ora #$20
   486 4531 91 10			sta (ln8),y
   487 4533 B1 12			lda (ln9),y
   488 4535 29 0F			and #$0F
   489 4537 09 20			ora #$20
   490 4539 91 12			sta (ln9),y
   491 453B B1 14			lda (ln10),y
   492 453D 29 0F			and #$0F
   493 453F 09 20			ora #$20
   494 4541 91 14			sta (ln10),y
   495 4543 B1 16			lda (ln11),y
   496 4545 29 0F			and #$0F
   497 4547 09 20			ora #$20
   498 4549 91 16			sta (ln11),y
   499 454B B1 18			lda (ln12),y
   500 454D 29 0F			and #$0F
   501 454F 09 20			ora #$20
   502 4551 91 18			sta (ln12),y
   503 4553 B1 1A			lda (ln13),y
   504 4555 29 0F			and #$0F
   505 4557 09 20			ora #$20
   506 4559 91 1A			sta (ln13),y
   507 455B B1 1C			lda (ln14),y
   508 455D 29 0F			and #$0F
   509 455F 09 20			ora #$20
   510 4561 91 1C			sta (ln14),y
   511 4563 B1 1E			lda (ln15),y
   512 4565 29 0F			and #$0F
   513 4567 09 20			ora #$20
   514 4569 91 1E			sta (ln15),y
   515 456B B1 0A			lda (ln5),y
   516 456D 29 3F			and #$3F
   517 456F 09 80			ora #$80
   518 4571 91 0A			sta (ln5),y
   519 4573 B1 0C			lda (ln6),y
   520 4575 29 3F			and #$3F
   521 4577 09 80			ora #$80
   522 4579 91 0C			sta (ln6),y
   523 457B B1 0E			lda (ln7),y
   524 457D 29 3F			and #$3F
   525 457F 09 80			ora #$80
   526 4581 91 0E			sta (ln7),y
   527 4583 B1 20			lda (ln16),y
   528 4585 29 3F			and #$3F
   529 4587 09 80			ora #$80
   530 4589 91 20			sta (ln16),y
   531 458B B1 22			lda (ln17),y
   532 458D 29 3F			and #$3F
   533 458F 09 80			ora #$80
   534 4591 91 22			sta (ln17),y
   535 4593 B1 24			lda (ln18),y
   536 4595 29 3F			and #$3F
   537 4597 09 80			ora #$80
   538 4599 91 24			sta (ln18),y
   539 459B 4C 14 3D			jmp BALL.MINMAX
   540 459E			_3
   541 459E B1 10			lda (ln8),y
   542 45A0 29 FC			and #$FC
   543 45A2 09 02			ora #$02
   544 45A4 91 10			sta (ln8),y
   545 45A6 B1 12			lda (ln9),y
   546 45A8 29 FC			and #$FC
   547 45AA 09 02			ora #$02
   548 45AC 91 12			sta (ln9),y
   549 45AE B1 14			lda (ln10),y
   550 45B0 29 FC			and #$FC
   551 45B2 09 02			ora #$02
   552 45B4 91 14			sta (ln10),y
   553 45B6 B1 16			lda (ln11),y
   554 45B8 29 FC			and #$FC
   555 45BA 09 02			ora #$02
   556 45BC 91 16			sta (ln11),y
   557 45BE B1 18			lda (ln12),y
   558 45C0 29 FC			and #$FC
   559 45C2 09 02			ora #$02
   560 45C4 91 18			sta (ln12),y
   561 45C6 B1 1A			lda (ln13),y
   562 45C8 29 FC			and #$FC
   563 45CA 09 02			ora #$02
   564 45CC 91 1A			sta (ln13),y
   565 45CE B1 1C			lda (ln14),y
   566 45D0 29 FC			and #$FC
   567 45D2 09 02			ora #$02
   568 45D4 91 1C			sta (ln14),y
   569 45D6 B1 1E			lda (ln15),y
   570 45D8 29 FC			and #$FC
   571 45DA 09 02			ora #$02
   572 45DC 91 1E			sta (ln15),y
   573 45DE				@@INC inck2
Macro: @@INC [Source: pang_chars.asm]
     1 45DE 98				tya
     2 45DF 69 08			adc #8
     3 45E1 A8				tay
Source: kula2.asm
   574 45E2 B1 06			lda (ln3),y
   575 45E4 29 C0			and #$C0
   576 45E6 09 20			ora #$20
   577 45E8 91 06			sta (ln3),y
   578 45EA B1 26			lda (ln19),y
   579 45EC 29 C0			and #$C0
   580 45EE 09 20			ora #$20
   581 45F0 91 26			sta (ln19),y
   582 45F2 B1 28			lda (ln20),y
   583 45F4 29 C0			and #$C0
   584 45F6 09 20			ora #$20
   585 45F8 91 28			sta (ln20),y
   586 45FA B1 08			lda (ln4),y
   587 45FC 29 C0			and #$C0
   588 45FE 09 21			ora #$21
   589 4600 91 08			sta (ln4),y
   590 4602 B1 04			lda (ln2),y
   591 4604 29 F0			and #$F0
   592 4606 09 08			ora #$08
   593 4608 91 04			sta (ln2),y
   594 460A B1 2A			lda (ln21),y
   595 460C 29 F0			and #$F0
   596 460E 09 08			ora #$08
   597 4610 91 2A			sta (ln21),y
   598 4612 B1 02			lda (ln1),y
   599 4614 29 FC			and #$FC
   600 4616 09 02			ora #$02
   601 4618 91 02			sta (ln1),y
   602 461A B1 2C			lda (ln22),y
   603 461C 29 FC			and #$FC
   604 461E 09 02			ora #$02
   605 4620 91 2C			sta (ln22),y
   606 4622 A9 00			lda #$00
   607 4624 91 18			sta (ln12),y
   608 4626 91 1A			sta (ln13),y
   609 4628 91 1C			sta (ln14),y
   610 462A 91 1E			sta (ln15),y
   611 462C A9 10			lda #$10
   612 462E 91 10			sta (ln8),y
   613 4630 91 14			sta (ln10),y
   614 4632 91 16			sta (ln11),y
   615 4634 A9 14			lda #$14
   616 4636 91 12			sta (ln9),y
   617 4638 A9 80			lda #$80
   618 463A 91 20			sta (ln16),y
   619 463C 91 22			sta (ln17),y
   620 463E 91 24			sta (ln18),y
   621 4640 A9 84			lda #$84
   622 4642 91 0C			sta (ln6),y
   623 4644 A9 85			lda #$85
   624 4646 91 0A			sta (ln5),y
   625 4648 A9 94			lda #$94
   626 464A 91 0E			sta (ln7),y
   627 464C				@@INC inck2
Macro: @@INC [Source: pang_chars.asm]
     1 464C 98				tya
     2 464D 69 08			adc #8
     3 464F A8				tay
Source: kula2.asm
   628 4650 B1 02			lda (ln1),y
   629 4652 29 03			and #$03
   630 4654 09 A8			ora #$A8
   631 4656 91 02			sta (ln1),y
   632 4658 B1 2C			lda (ln22),y
   633 465A 29 03			and #$03
   634 465C 09 A8			ora #$A8
   635 465E 91 2C			sta (ln22),y
   636 4660 A9 00			lda #$00
   637 4662 91 06			sta (ln3),y
   638 4664 91 08			sta (ln4),y
   639 4666 91 0A			sta (ln5),y
   640 4668 91 0C			sta (ln6),y
   641 466A 91 0E			sta (ln7),y
   642 466C 91 10			sta (ln8),y
   643 466E 91 12			sta (ln9),y
   644 4670 91 14			sta (ln10),y
   645 4672 91 16			sta (ln11),y
   646 4674 91 18			sta (ln12),y
   647 4676 91 1A			sta (ln13),y
   648 4678 91 1C			sta (ln14),y
   649 467A 91 1E			sta (ln15),y
   650 467C A9 01			lda #$01
   651 467E 91 20			sta (ln16),y
   652 4680 91 22			sta (ln17),y
   653 4682 A9 02			lda #$02
   654 4684 91 04			sta (ln2),y
   655 4686 91 2A			sta (ln21),y
   656 4688 A9 04			lda #$04
   657 468A 91 26			sta (ln19),y
   658 468C A9 05			lda #$05
   659 468E 91 24			sta (ln18),y
   660 4690 A9 10			lda #$10
   661 4692 91 28			sta (ln20),y
   662 4694				@@INC inck2
Macro: @@INC [Source: pang_chars.asm]
     1 4694 98				tya
     2 4695 69 08			adc #8
     3 4697 A8				tay
Source: kula2.asm
   663 4698 B1 10			lda (ln8),y
   664 469A 29 03			and #$03
   665 469C 09 08			ora #$08
   666 469E 91 10			sta (ln8),y
   667 46A0 B1 12			lda (ln9),y
   668 46A2 29 03			and #$03
   669 46A4 09 08			ora #$08
   670 46A6 91 12			sta (ln9),y
   671 46A8 B1 14			lda (ln10),y
   672 46AA 29 03			and #$03
   673 46AC 09 08			ora #$08
   674 46AE 91 14			sta (ln10),y
   675 46B0 B1 16			lda (ln11),y
   676 46B2 29 03			and #$03
   677 46B4 09 08			ora #$08
   678 46B6 91 16			sta (ln11),y
   679 46B8 B1 18			lda (ln12),y
   680 46BA 29 03			and #$03
   681 46BC 09 08			ora #$08
   682 46BE 91 18			sta (ln12),y
   683 46C0 B1 1A			lda (ln13),y
   684 46C2 29 03			and #$03
   685 46C4 09 08			ora #$08
   686 46C6 91 1A			sta (ln13),y
   687 46C8 B1 1C			lda (ln14),y
   688 46CA 29 03			and #$03
   689 46CC 09 08			ora #$08
   690 46CE 91 1C			sta (ln14),y
   691 46D0 B1 1E			lda (ln15),y
   692 46D2 29 03			and #$03
   693 46D4 09 08			ora #$08
   694 46D6 91 1E			sta (ln15),y
   695 46D8 B1 0A			lda (ln5),y
   696 46DA 29 0F			and #$0F
   697 46DC 09 20			ora #$20
   698 46DE 91 0A			sta (ln5),y
   699 46E0 B1 0C			lda (ln6),y
   700 46E2 29 0F			and #$0F
   701 46E4 09 20			ora #$20
   702 46E6 91 0C			sta (ln6),y
   703 46E8 B1 0E			lda (ln7),y
   704 46EA 29 0F			and #$0F
   705 46EC 09 20			ora #$20
   706 46EE 91 0E			sta (ln7),y
   707 46F0 B1 20			lda (ln16),y
   708 46F2 29 0F			and #$0F
   709 46F4 09 20			ora #$20
   710 46F6 91 20			sta (ln16),y
   711 46F8 B1 22			lda (ln17),y
   712 46FA 29 0F			and #$0F
   713 46FC 09 20			ora #$20
   714 46FE 91 22			sta (ln17),y
   715 4700 B1 24			lda (ln18),y
   716 4702 29 0F			and #$0F
   717 4704 09 20			ora #$20
   718 4706 91 24			sta (ln18),y
   719 4708 B1 06			lda (ln3),y
   720 470A 29 3F			and #$3F
   721 470C 09 80			ora #$80
   722 470E 91 06			sta (ln3),y
   723 4710 B1 08			lda (ln4),y
   724 4712 29 3F			and #$3F
   725 4714 09 80			ora #$80
   726 4716 91 08			sta (ln4),y
   727 4718 B1 26			lda (ln19),y
   728 471A 29 3F			and #$3F
   729 471C 09 80			ora #$80
   730 471E 91 26			sta (ln19),y
   731 4720 B1 28			lda (ln20),y
   732 4722 29 3F			and #$3F
   733 4724 09 80			ora #$80
   734 4726 91 28			sta (ln20),y
   735 4728 4C 14 3D			jmp BALL.MINMAX
   736 				.end
  1174 472B				icl '_PC\asm-kule_2\kula3.asm'
Source: kula3.asm
     1 472B			.local	k3
     2 472B			_0
     3 472B B1 18			lda (ln12),y
     4 472D 29 C0			and #$C0
     5 472F 09 20			ora #$20
     6 4731 91 18			sta (ln12),y
     7 4733 B1 1A			lda (ln13),y
     8 4735 29 C0			and #$C0
     9 4737 09 20			ora #$20
    10 4739 91 1A			sta (ln13),y
    11 473B B1 04			lda (ln2),y
    12 473D 29 C0			and #$C0
    13 473F 09 21			ora #$21
    14 4741 91 04			sta (ln2),y
    15 4743 B1 06			lda (ln3),y
    16 4745 29 C0			and #$C0
    17 4747 09 21			ora #$21
    18 4749 91 06			sta (ln3),y
    19 474B B1 02			lda (ln1),y
    20 474D 29 F0			and #$F0
    21 474F 09 08			ora #$08
    22 4751 91 02			sta (ln1),y
    23 4753 B1 1C			lda (ln14),y
    24 4755 29 F0			and #$F0
    25 4757 09 08			ora #$08
    26 4759 91 1C			sta (ln14),y
    27 475B B1 00			lda (ln0),y
    28 475D 29 FC			and #$FC
    29 475F 09 02			ora #$02
    30 4761 91 00			sta (ln0),y
    31 4763 B1 1E			lda (ln15),y
    32 4765 29 FC			and #$FC
    33 4767 09 02			ora #$02
    34 4769 91 1E			sta (ln15),y
    35 476B A9 80			lda #$80
    36 476D 91 12			sta (ln9),y
    37 476F 91 14			sta (ln10),y
    38 4771 91 16			sta (ln11),y
    39 4773 A9 84			lda #$84
    40 4775 91 0C			sta (ln6),y
    41 4777 91 0E			sta (ln7),y
    42 4779 91 10			sta (ln8),y
    43 477B A9 85			lda #$85
    44 477D 91 08			sta (ln4),y
    45 477F 91 0A			sta (ln5),y
    46 4781				@@INC inck3
Macro: @@INC [Source: pang_chars.asm]
     1 4781 98				tya
     2 4782 69 08			adc #8
     3 4784 A8				tay
Source: kula3.asm
    47 4785 B1 02			lda (ln1),y
    48 4787 29 03			and #$03
    49 4789 09 08			ora #$08
    50 478B 91 02			sta (ln1),y
    51 478D B1 1C			lda (ln14),y
    52 478F 29 03			and #$03
    53 4791 09 08			ora #$08
    54 4793 91 1C			sta (ln14),y
    55 4795 B1 00			lda (ln0),y
    56 4797 29 0F			and #$0F
    57 4799 09 A0			ora #$A0
    58 479B 91 00			sta (ln0),y
    59 479D B1 1E			lda (ln15),y
    60 479F 29 0F			and #$0F
    61 47A1 09 A0			ora #$A0
    62 47A3 91 1E			sta (ln15),y
    63 47A5 A9 00			lda #$00
    64 47A7 91 08			sta (ln4),y
    65 47A9 91 0A			sta (ln5),y
    66 47AB 91 0C			sta (ln6),y
    67 47AD 91 0E			sta (ln7),y
    68 47AF 91 10			sta (ln8),y
    69 47B1 91 12			sta (ln9),y
    70 47B3 91 14			sta (ln10),y
    71 47B5 A9 02			lda #$02
    72 47B7 91 04			sta (ln2),y
    73 47B9 A9 04			lda #$04
    74 47BB 91 16			sta (ln11),y
    75 47BD A9 06			lda #$06
    76 47BF 91 18			sta (ln12),y
    77 47C1 A9 12			lda #$12
    78 47C3 91 1A			sta (ln13),y
    79 47C5 A9 42			lda #$42
    80 47C7 91 06			sta (ln3),y
    81 47C9				@@INC inck3
Macro: @@INC [Source: pang_chars.asm]
     1 47C9 98				tya
     2 47CA 69 08			adc #8
     3 47CC A8				tay
Source: kula3.asm
    82 47CD B1 08			lda (ln4),y
    83 47CF 29 3F			and #$3F
    84 47D1 09 80			ora #$80
    85 47D3 91 08			sta (ln4),y
    86 47D5 B1 0A			lda (ln5),y
    87 47D7 29 3F			and #$3F
    88 47D9 09 80			ora #$80
    89 47DB 91 0A			sta (ln5),y
    90 47DD B1 0C			lda (ln6),y
    91 47DF 29 3F			and #$3F
    92 47E1 09 80			ora #$80
    93 47E3 91 0C			sta (ln6),y
    94 47E5 B1 0E			lda (ln7),y
    95 47E7 29 3F			and #$3F
    96 47E9 09 80			ora #$80
    97 47EB 91 0E			sta (ln7),y
    98 47ED B1 10			lda (ln8),y
    99 47EF 29 3F			and #$3F
   100 47F1 09 80			ora #$80
   101 47F3 91 10			sta (ln8),y
   102 47F5 B1 12			lda (ln9),y
   103 47F7 29 3F			and #$3F
   104 47F9 09 80			ora #$80
   105 47FB 91 12			sta (ln9),y
   106 47FD B1 14			lda (ln10),y
   107 47FF 29 3F			and #$3F
   108 4801 09 80			ora #$80
   109 4803 91 14			sta (ln10),y
   110 4805 B1 16			lda (ln11),y
   111 4807 29 3F			and #$3F
   112 4809 09 80			ora #$80
   113 480B 91 16			sta (ln11),y
   114 480D 4C 14 3D			jmp BALL.MINMAX
   115 4810			_1
   116 4810 B1 12			lda (ln9),y
   117 4812 29 C0			and #$C0
   118 4814 09 20			ora #$20
   119 4816 91 12			sta (ln9),y
   120 4818 B1 14			lda (ln10),y
   121 481A 29 C0			and #$C0
   122 481C 09 20			ora #$20
   123 481E 91 14			sta (ln10),y
   124 4820 B1 16			lda (ln11),y
   125 4822 29 C0			and #$C0
   126 4824 09 20			ora #$20
   127 4826 91 16			sta (ln11),y
   128 4828 B1 08			lda (ln4),y
   129 482A 29 C0			and #$C0
   130 482C 09 21			ora #$21
   131 482E 91 08			sta (ln4),y
   132 4830 B1 0A			lda (ln5),y
   133 4832 29 C0			and #$C0
   134 4834 09 21			ora #$21
   135 4836 91 0A			sta (ln5),y
   136 4838 B1 0C			lda (ln6),y
   137 483A 29 C0			and #$C0
   138 483C 09 21			ora #$21
   139 483E 91 0C			sta (ln6),y
   140 4840 B1 0E			lda (ln7),y
   141 4842 29 C0			and #$C0
   142 4844 09 21			ora #$21
   143 4846 91 0E			sta (ln7),y
   144 4848 B1 10			lda (ln8),y
   145 484A 29 C0			and #$C0
   146 484C 09 21			ora #$21
   147 484E 91 10			sta (ln8),y
   148 4850 B1 04			lda (ln2),y
   149 4852 29 F0			and #$F0
   150 4854 09 08			ora #$08
   151 4856 91 04			sta (ln2),y
   152 4858 B1 06			lda (ln3),y
   153 485A 29 F0			and #$F0
   154 485C 09 08			ora #$08
   155 485E 91 06			sta (ln3),y
   156 4860 B1 18			lda (ln12),y
   157 4862 29 F0			and #$F0
   158 4864 09 08			ora #$08
   159 4866 91 18			sta (ln12),y
   160 4868 B1 1A			lda (ln13),y
   161 486A 29 F0			and #$F0
   162 486C 09 08			ora #$08
   163 486E 91 1A			sta (ln13),y
   164 4870 B1 02			lda (ln1),y
   165 4872 29 FC			and #$FC
   166 4874 09 02			ora #$02
   167 4876 91 02			sta (ln1),y
   168 4878 B1 1C			lda (ln14),y
   169 487A 29 FC			and #$FC
   170 487C 09 02			ora #$02
   171 487E 91 1C			sta (ln14),y
   172 4880				@@INC inck3
Macro: @@INC [Source: pang_chars.asm]
     1 4880 98				tya
     2 4881 69 08			adc #8
     3 4883 A8				tay
Source: kula3.asm
   173 4884 B1 00			lda (ln0),y
   174 4886 29 03			and #$03
   175 4888 09 A8			ora #$A8
   176 488A 91 00			sta (ln0),y
   177 488C B1 1E			lda (ln15),y
   178 488E 29 03			and #$03
   179 4890 09 A8			ora #$A8
   180 4892 91 1E			sta (ln15),y
   181 4894 A9 00			lda #$00
   182 4896 91 0C			sta (ln6),y
   183 4898 91 0E			sta (ln7),y
   184 489A 91 10			sta (ln8),y
   185 489C 91 12			sta (ln9),y
   186 489E 91 14			sta (ln10),y
   187 48A0 A9 01			lda #$01
   188 48A2 91 16			sta (ln11),y
   189 48A4 91 18			sta (ln12),y
   190 48A6 A9 02			lda #$02
   191 48A8 91 02			sta (ln1),y
   192 48AA 91 1C			sta (ln14),y
   193 48AC A9 04			lda #$04
   194 48AE 91 1A			sta (ln13),y
   195 48B0 A9 40			lda #$40
   196 48B2 91 04			sta (ln2),y
   197 48B4 91 08			sta (ln4),y
   198 48B6 91 0A			sta (ln5),y
   199 48B8 A9 50			lda #$50
   200 48BA 91 06			sta (ln3),y
   201 48BC				@@INC inck3
Macro: @@INC [Source: pang_chars.asm]
     1 48BC 98				tya
     2 48BD 69 08			adc #8
     3 48BF A8				tay
Source: kula3.asm
   202 48C0 B1 08			lda (ln4),y
   203 48C2 29 0F			and #$0F
   204 48C4 09 20			ora #$20
   205 48C6 91 08			sta (ln4),y
   206 48C8 B1 0A			lda (ln5),y
   207 48CA 29 0F			and #$0F
   208 48CC 09 20			ora #$20
   209 48CE 91 0A			sta (ln5),y
   210 48D0 B1 0C			lda (ln6),y
   211 48D2 29 0F			and #$0F
   212 48D4 09 20			ora #$20
   213 48D6 91 0C			sta (ln6),y
   214 48D8 B1 0E			lda (ln7),y
   215 48DA 29 0F			and #$0F
   216 48DC 09 20			ora #$20
   217 48DE 91 0E			sta (ln7),y
   218 48E0 B1 10			lda (ln8),y
   219 48E2 29 0F			and #$0F
   220 48E4 09 20			ora #$20
   221 48E6 91 10			sta (ln8),y
   222 48E8 B1 12			lda (ln9),y
   223 48EA 29 0F			and #$0F
   224 48EC 09 20			ora #$20
   225 48EE 91 12			sta (ln9),y
   226 48F0 B1 14			lda (ln10),y
   227 48F2 29 0F			and #$0F
   228 48F4 09 20			ora #$20
   229 48F6 91 14			sta (ln10),y
   230 48F8 B1 16			lda (ln11),y
   231 48FA 29 0F			and #$0F
   232 48FC 09 20			ora #$20
   233 48FE 91 16			sta (ln11),y
   234 4900 B1 04			lda (ln2),y
   235 4902 29 3F			and #$3F
   236 4904 09 80			ora #$80
   237 4906 91 04			sta (ln2),y
   238 4908 B1 06			lda (ln3),y
   239 490A 29 3F			and #$3F
   240 490C 09 80			ora #$80
   241 490E 91 06			sta (ln3),y
   242 4910 B1 18			lda (ln12),y
   243 4912 29 3F			and #$3F
   244 4914 09 80			ora #$80
   245 4916 91 18			sta (ln12),y
   246 4918 B1 1A			lda (ln13),y
   247 491A 29 3F			and #$3F
   248 491C 09 80			ora #$80
   249 491E 91 1A			sta (ln13),y
   250 4920 4C 14 3D			jmp BALL.MINMAX
   251 4923			_2
   252 4923 B1 08			lda (ln4),y
   253 4925 29 F0			and #$F0
   254 4927 09 08			ora #$08
   255 4929 91 08			sta (ln4),y
   256 492B B1 0A			lda (ln5),y
   257 492D 29 F0			and #$F0
   258 492F 09 08			ora #$08
   259 4931 91 0A			sta (ln5),y
   260 4933 B1 0C			lda (ln6),y
   261 4935 29 F0			and #$F0
   262 4937 09 08			ora #$08
   263 4939 91 0C			sta (ln6),y
   264 493B B1 0E			lda (ln7),y
   265 493D 29 F0			and #$F0
   266 493F 09 08			ora #$08
   267 4941 91 0E			sta (ln7),y
   268 4943 B1 10			lda (ln8),y
   269 4945 29 F0			and #$F0
   270 4947 09 08			ora #$08
   271 4949 91 10			sta (ln8),y
   272 494B B1 12			lda (ln9),y
   273 494D 29 F0			and #$F0
   274 494F 09 08			ora #$08
   275 4951 91 12			sta (ln9),y
   276 4953 B1 14			lda (ln10),y
   277 4955 29 F0			and #$F0
   278 4957 09 08			ora #$08
   279 4959 91 14			sta (ln10),y
   280 495B B1 16			lda (ln11),y
   281 495D 29 F0			and #$F0
   282 495F 09 08			ora #$08
   283 4961 91 16			sta (ln11),y
   284 4963 B1 04			lda (ln2),y
   285 4965 29 FC			and #$FC
   286 4967 09 02			ora #$02
   287 4969 91 04			sta (ln2),y
   288 496B B1 06			lda (ln3),y
   289 496D 29 FC			and #$FC
   290 496F 09 02			ora #$02
   291 4971 91 06			sta (ln3),y
   292 4973 B1 18			lda (ln12),y
   293 4975 29 FC			and #$FC
   294 4977 09 02			ora #$02
   295 4979 91 18			sta (ln12),y
   296 497B B1 1A			lda (ln13),y
   297 497D 29 FC			and #$FC
   298 497F 09 02			ora #$02
   299 4981 91 1A			sta (ln13),y
   300 4983				@@INC inck3
Macro: @@INC [Source: pang_chars.asm]
     1 4983 98				tya
     2 4984 69 08			adc #8
     3 4986 A8				tay
Source: kula3.asm
   301 4987 B1 00			lda (ln0),y
   302 4989 29 C0			and #$C0
   303 498B 09 2A			ora #$2A
   304 498D 91 00			sta (ln0),y
   305 498F B1 1E			lda (ln15),y
   306 4991 29 C0			and #$C0
   307 4993 09 2A			ora #$2A
   308 4995 91 1E			sta (ln15),y
   309 4997 A9 00			lda #$00
   310 4999 91 12			sta (ln9),y
   311 499B 91 14			sta (ln10),y
   312 499D 91 16			sta (ln11),y
   313 499F 91 18			sta (ln12),y
   314 49A1 A9 01			lda #$01
   315 49A3 91 1A			sta (ln13),y
   316 49A5 A9 10			lda #$10
   317 49A7 91 04			sta (ln2),y
   318 49A9 A9 14			lda #$14
   319 49AB 91 06			sta (ln3),y
   320 49AD A9 40			lda #$40
   321 49AF 91 0C			sta (ln6),y
   322 49B1 91 0E			sta (ln7),y
   323 49B3 91 10			sta (ln8),y
   324 49B5 A9 50			lda #$50
   325 49B7 91 08			sta (ln4),y
   326 49B9 91 0A			sta (ln5),y
   327 49BB A9 80			lda #$80
   328 49BD 91 02			sta (ln1),y
   329 49BF 91 1C			sta (ln14),y
   330 49C1				@@INC inck3
Macro: @@INC [Source: pang_chars.asm]
     1 49C1 98				tya
     2 49C2 69 08			adc #8
     3 49C4 A8				tay
Source: kula3.asm
   331 49C5 B1 08			lda (ln4),y
   332 49C7 29 03			and #$03
   333 49C9 09 08			ora #$08
   334 49CB 91 08			sta (ln4),y
   335 49CD B1 0A			lda (ln5),y
   336 49CF 29 03			and #$03
   337 49D1 09 08			ora #$08
   338 49D3 91 0A			sta (ln5),y
   339 49D5 B1 0C			lda (ln6),y
   340 49D7 29 03			and #$03
   341 49D9 09 08			ora #$08
   342 49DB 91 0C			sta (ln6),y
   343 49DD B1 0E			lda (ln7),y
   344 49DF 29 03			and #$03
   345 49E1 09 08			ora #$08
   346 49E3 91 0E			sta (ln7),y
   347 49E5 B1 10			lda (ln8),y
   348 49E7 29 03			and #$03
   349 49E9 09 08			ora #$08
   350 49EB 91 10			sta (ln8),y
   351 49ED B1 12			lda (ln9),y
   352 49EF 29 03			and #$03
   353 49F1 09 08			ora #$08
   354 49F3 91 12			sta (ln9),y
   355 49F5 B1 14			lda (ln10),y
   356 49F7 29 03			and #$03
   357 49F9 09 08			ora #$08
   358 49FB 91 14			sta (ln10),y
   359 49FD B1 04			lda (ln2),y
   360 49FF 29 0F			and #$0F
   361 4A01 09 20			ora #$20
   362 4A03 91 04			sta (ln2),y
   363 4A05 B1 06			lda (ln3),y
   364 4A07 29 0F			and #$0F
   365 4A09 09 20			ora #$20
   366 4A0B 91 06			sta (ln3),y
   367 4A0D B1 1A			lda (ln13),y
   368 4A0F 29 0F			and #$0F
   369 4A11 09 20			ora #$20
   370 4A13 91 1A			sta (ln13),y
   371 4A15 B1 16			lda (ln11),y
   372 4A17 29 03			and #$03
   373 4A19 09 48			ora #$48
   374 4A1B 91 16			sta (ln11),y
   375 4A1D B1 18			lda (ln12),y
   376 4A1F 29 0F			and #$0F
   377 4A21 09 60			ora #$60
   378 4A23 91 18			sta (ln12),y
   379 4A25 B1 02			lda (ln1),y
   380 4A27 29 3F			and #$3F
   381 4A29 09 80			ora #$80
   382 4A2B 91 02			sta (ln1),y
   383 4A2D B1 1C			lda (ln14),y
   384 4A2F 29 3F			and #$3F
   385 4A31 09 80			ora #$80
   386 4A33 91 1C			sta (ln14),y
   387 4A35 4C 14 3D			jmp BALL.MINMAX
   388 4A38			_3
   389 4A38 B1 08			lda (ln4),y
   390 4A3A 29 FC			and #$FC
   391 4A3C 09 02			ora #$02
   392 4A3E 91 08			sta (ln4),y
   393 4A40 B1 0A			lda (ln5),y
   394 4A42 29 FC			and #$FC
   395 4A44 09 02			ora #$02
   396 4A46 91 0A			sta (ln5),y
   397 4A48 B1 0C			lda (ln6),y
   398 4A4A 29 FC			and #$FC
   399 4A4C 09 02			ora #$02
   400 4A4E 91 0C			sta (ln6),y
   401 4A50 B1 0E			lda (ln7),y
   402 4A52 29 FC			and #$FC
   403 4A54 09 02			ora #$02
   404 4A56 91 0E			sta (ln7),y
   405 4A58 B1 10			lda (ln8),y
   406 4A5A 29 FC			and #$FC
   407 4A5C 09 02			ora #$02
   408 4A5E 91 10			sta (ln8),y
   409 4A60 B1 12			lda (ln9),y
   410 4A62 29 FC			and #$FC
   411 4A64 09 02			ora #$02
   412 4A66 91 12			sta (ln9),y
   413 4A68 B1 14			lda (ln10),y
   414 4A6A 29 FC			and #$FC
   415 4A6C 09 02			ora #$02
   416 4A6E 91 14			sta (ln10),y
   417 4A70 B1 16			lda (ln11),y
   418 4A72 29 FC			and #$FC
   419 4A74 09 02			ora #$02
   420 4A76 91 16			sta (ln11),y
   421 4A78				@@INC inck3
Macro: @@INC [Source: pang_chars.asm]
     1 4A78 98				tya
     2 4A79 69 08			adc #8
     3 4A7B A8				tay
Source: kula3.asm
   422 4A7C B1 02			lda (ln1),y
   423 4A7E 29 C0			and #$C0
   424 4A80 09 20			ora #$20
   425 4A82 91 02			sta (ln1),y
   426 4A84 B1 1C			lda (ln14),y
   427 4A86 29 C0			and #$C0
   428 4A88 09 20			ora #$20
   429 4A8A 91 1C			sta (ln14),y
   430 4A8C B1 00			lda (ln0),y
   431 4A8E 29 F0			and #$F0
   432 4A90 09 0A			ora #$0A
   433 4A92 91 00			sta (ln0),y
   434 4A94 B1 1E			lda (ln15),y
   435 4A96 29 F0			and #$F0
   436 4A98 09 0A			ora #$0A
   437 4A9A 91 1E			sta (ln15),y
   438 4A9C A9 00			lda #$00
   439 4A9E 91 12			sta (ln9),y
   440 4AA0 91 14			sta (ln10),y
   441 4AA2 91 16			sta (ln11),y
   442 4AA4 A9 10			lda #$10
   443 4AA6 91 0C			sta (ln6),y
   444 4AA8 91 0E			sta (ln7),y
   445 4AAA 91 10			sta (ln8),y
   446 4AAC A9 14			lda #$14
   447 4AAE 91 08			sta (ln4),y
   448 4AB0 91 0A			sta (ln5),y
   449 4AB2 A9 80			lda #$80
   450 4AB4 91 18			sta (ln12),y
   451 4AB6 91 1A			sta (ln13),y
   452 4AB8 A9 84			lda #$84
   453 4ABA 91 04			sta (ln2),y
   454 4ABC A9 85			lda #$85
   455 4ABE 91 06			sta (ln3),y
   456 4AC0				@@INC inck3
Macro: @@INC [Source: pang_chars.asm]
     1 4AC0 98				tya
     2 4AC1 69 08			adc #8
     3 4AC3 A8				tay
Source: kula3.asm
   457 4AC4 B1 04			lda (ln2),y
   458 4AC6 29 03			and #$03
   459 4AC8 09 08			ora #$08
   460 4ACA 91 04			sta (ln2),y
   461 4ACC B1 06			lda (ln3),y
   462 4ACE 29 03			and #$03
   463 4AD0 09 08			ora #$08
   464 4AD2 91 06			sta (ln3),y
   465 4AD4 B1 18			lda (ln12),y
   466 4AD6 29 03			and #$03
   467 4AD8 09 18			ora #$18
   468 4ADA 91 18			sta (ln12),y
   469 4ADC B1 02			lda (ln1),y
   470 4ADE 29 0F			and #$0F
   471 4AE0 09 20			ora #$20
   472 4AE2 91 02			sta (ln1),y
   473 4AE4 B1 1C			lda (ln14),y
   474 4AE6 29 0F			and #$0F
   475 4AE8 09 20			ora #$20
   476 4AEA 91 1C			sta (ln14),y
   477 4AEC B1 1A			lda (ln13),y
   478 4AEE 29 03			and #$03
   479 4AF0 09 48			ora #$48
   480 4AF2 91 1A			sta (ln13),y
   481 4AF4 B1 00			lda (ln0),y
   482 4AF6 29 3F			and #$3F
   483 4AF8 09 80			ora #$80
   484 4AFA 91 00			sta (ln0),y
   485 4AFC B1 1E			lda (ln15),y
   486 4AFE 29 3F			and #$3F
   487 4B00 09 80			ora #$80
   488 4B02 91 1E			sta (ln15),y
   489 4B04 A9 02			lda #$02
   490 4B06 91 08			sta (ln4),y
   491 4B08 91 0A			sta (ln5),y
   492 4B0A 91 0C			sta (ln6),y
   493 4B0C 91 0E			sta (ln7),y
   494 4B0E 91 10			sta (ln8),y
   495 4B10 91 12			sta (ln9),y
   496 4B12 91 14			sta (ln10),y
   497 4B14 A9 12			lda #$12
   498 4B16 91 16			sta (ln11),y
   499 4B18 4C 14 3D			jmp BALL.MINMAX
   500 				.end
  1175 4B1B				icl '_PC\asm-kule_2\kula4.asm'
Source: kula4.asm
     1 4B1B			.local	k4
     2 4B1B			_0
     3 4B1B B1 02			lda (ln1),y
     4 4B1D 29 C3			and #$C3
     5 4B1F 09 28			ora #$28
     6 4B21 91 02			sta (ln1),y
     7 4B23 B1 0C			lda (ln6),y
     8 4B25 29 C3			and #$C3
     9 4B27 09 28			ora #$28
    10 4B29 91 0C			sta (ln6),y
    11 4B2B A9 82			lda #$82
    12 4B2D 91 04			sta (ln2),y
    13 4B2F 91 08			sta (ln4),y
    14 4B31 A9 86			lda #$86
    15 4B33 91 0A			sta (ln5),y
    16 4B35 A9 92			lda #$92
    17 4B37 91 06			sta (ln3),y
    18 4B39 4C 14 3D			jmp BALL.MINMAX
    19 4B3C			_1
    20 4B3C B1 04			lda (ln2),y
    21 4B3E 29 C0			and #$C0
    22 4B40 09 20			ora #$20
    23 4B42 91 04			sta (ln2),y
    24 4B44 B1 08			lda (ln4),y
    25 4B46 29 C0			and #$C0
    26 4B48 09 20			ora #$20
    27 4B4A 91 08			sta (ln4),y
    28 4B4C B1 0A			lda (ln5),y
    29 4B4E 29 C0			and #$C0
    30 4B50 09 21			ora #$21
    31 4B52 91 0A			sta (ln5),y
    32 4B54 B1 06			lda (ln3),y
    33 4B56 29 C0			and #$C0
    34 4B58 09 24			ora #$24
    35 4B5A 91 06			sta (ln3),y
    36 4B5C B1 02			lda (ln1),y
    37 4B5E 29 F0			and #$F0
    38 4B60 09 0A			ora #$0A
    39 4B62 91 02			sta (ln1),y
    40 4B64 B1 0C			lda (ln6),y
    41 4B66 29 F0			and #$F0
    42 4B68 09 0A			ora #$0A
    43 4B6A 91 0C			sta (ln6),y
    44 4B6C				@@INC inck4
Macro: @@INC [Source: pang_chars.asm]
     1 4B6C 98				tya
     2 4B6D 69 08			adc #8
     3 4B6F A8				tay
Source: kula4.asm
    45 4B70 B1 04			lda (ln2),y
    46 4B72 29 3F			and #$3F
    47 4B74 09 80			ora #$80
    48 4B76 91 04			sta (ln2),y
    49 4B78 B1 06			lda (ln3),y
    50 4B7A 29 3F			and #$3F
    51 4B7C 09 80			ora #$80
    52 4B7E 91 06			sta (ln3),y
    53 4B80 B1 08			lda (ln4),y
    54 4B82 29 3F			and #$3F
    55 4B84 09 80			ora #$80
    56 4B86 91 08			sta (ln4),y
    57 4B88 B1 0A			lda (ln5),y
    58 4B8A 29 3F			and #$3F
    59 4B8C 09 80			ora #$80
    60 4B8E 91 0A			sta (ln5),y
    61 4B90 4C 14 3D			jmp BALL.MINMAX
    62 4B93			_2
    63 4B93 B1 04			lda (ln2),y
    64 4B95 29 F0			and #$F0
    65 4B97 09 08			ora #$08
    66 4B99 91 04			sta (ln2),y
    67 4B9B B1 08			lda (ln4),y
    68 4B9D 29 F0			and #$F0
    69 4B9F 09 08			ora #$08
    70 4BA1 91 08			sta (ln4),y
    71 4BA3 B1 0A			lda (ln5),y
    72 4BA5 29 F0			and #$F0
    73 4BA7 09 08			ora #$08
    74 4BA9 91 0A			sta (ln5),y
    75 4BAB B1 06			lda (ln3),y
    76 4BAD 29 F0			and #$F0
    77 4BAF 09 09			ora #$09
    78 4BB1 91 06			sta (ln3),y
    79 4BB3 B1 02			lda (ln1),y
    80 4BB5 29 FC			and #$FC
    81 4BB7 09 02			ora #$02
    82 4BB9 91 02			sta (ln1),y
    83 4BBB B1 0C			lda (ln6),y
    84 4BBD 29 FC			and #$FC
    85 4BBF 09 02			ora #$02
    86 4BC1 91 0C			sta (ln6),y
    87 4BC3				@@INC inck4
Macro: @@INC [Source: pang_chars.asm]
     1 4BC3 98				tya
     2 4BC4 69 08			adc #8
     3 4BC6 A8				tay
Source: kula4.asm
    88 4BC7 B1 04			lda (ln2),y
    89 4BC9 29 0F			and #$0F
    90 4BCB 09 20			ora #$20
    91 4BCD 91 04			sta (ln2),y
    92 4BCF B1 06			lda (ln3),y
    93 4BD1 29 0F			and #$0F
    94 4BD3 09 20			ora #$20
    95 4BD5 91 06			sta (ln3),y
    96 4BD7 B1 08			lda (ln4),y
    97 4BD9 29 0F			and #$0F
    98 4BDB 09 20			ora #$20
    99 4BDD 91 08			sta (ln4),y
   100 4BDF B1 0A			lda (ln5),y
   101 4BE1 29 0F			and #$0F
   102 4BE3 09 60			ora #$60
   103 4BE5 91 0A			sta (ln5),y
   104 4BE7 B1 02			lda (ln1),y
   105 4BE9 29 3F			and #$3F
   106 4BEB 09 80			ora #$80
   107 4BED 91 02			sta (ln1),y
   108 4BEF B1 0C			lda (ln6),y
   109 4BF1 29 3F			and #$3F
   110 4BF3 09 80			ora #$80
   111 4BF5 91 0C			sta (ln6),y
   112 4BF7 4C 14 3D			jmp BALL.MINMAX
   113 4BFA			_3
   114 4BFA B1 04			lda (ln2),y
   115 4BFC 29 FC			and #$FC
   116 4BFE 09 02			ora #$02
   117 4C00 91 04			sta (ln2),y
   118 4C02 B1 06			lda (ln3),y
   119 4C04 29 FC			and #$FC
   120 4C06 09 02			ora #$02
   121 4C08 91 06			sta (ln3),y
   122 4C0A B1 08			lda (ln4),y
   123 4C0C 29 FC			and #$FC
   124 4C0E 09 02			ora #$02
   125 4C10 91 08			sta (ln4),y
   126 4C12 B1 0A			lda (ln5),y
   127 4C14 29 FC			and #$FC
   128 4C16 09 02			ora #$02
   129 4C18 91 0A			sta (ln5),y
   130 4C1A				@@INC inck4
Macro: @@INC [Source: pang_chars.asm]
     1 4C1A 98				tya
     2 4C1B 69 08			adc #8
     3 4C1D A8				tay
Source: kula4.asm
   131 4C1E B1 04			lda (ln2),y
   132 4C20 29 03			and #$03
   133 4C22 09 08			ora #$08
   134 4C24 91 04			sta (ln2),y
   135 4C26 B1 08			lda (ln4),y
   136 4C28 29 03			and #$03
   137 4C2A 09 08			ora #$08
   138 4C2C 91 08			sta (ln4),y
   139 4C2E B1 0A			lda (ln5),y
   140 4C30 29 03			and #$03
   141 4C32 09 18			ora #$18
   142 4C34 91 0A			sta (ln5),y
   143 4C36 B1 06			lda (ln3),y
   144 4C38 29 03			and #$03
   145 4C3A 09 48			ora #$48
   146 4C3C 91 06			sta (ln3),y
   147 4C3E B1 02			lda (ln1),y
   148 4C40 29 0F			and #$0F
   149 4C42 09 A0			ora #$A0
   150 4C44 91 02			sta (ln1),y
   151 4C46 B1 0C			lda (ln6),y
   152 4C48 29 0F			and #$0F
   153 4C4A 09 A0			ora #$A0
   154 4C4C 91 0C			sta (ln6),y
   155 4C4E 4C 14 3D			jmp BALL.MINMAX
   156 				.end
  1176
  1177
  1178 				* ---------------------------
  1179 				* ---	CLEARB1
  1180 				* ---------------------------
  1181 4C51			.proc	CLEARB1
  1182
  1183 4C51 A2 07			ldx #5+2
  1184
  1185 4C53				.pages
  1186
  1187 4C53 BC 70 13		_clr	ldy clridx+32,x
  1188 4C56 F0 3F			beq _next
  1189
  1190 4C58 BC 70 17			ldy	tminy+32,x
  1191 4C5B B9 50 C7 8D 7E 4C		mva	_lfillb1,y	fjsr
  1192 4C61 B9 50 CB 8D 7F 4C		mva	_hfillb1,y	fjsr+1
  1193
  1194 4C67 BC 70 1B			ldy	tmaxy+32,x
  1195 4C6A B9 51 C7 85 6A		mva	_lfillb1+1,y	hlp
  1196 4C6F B9 51 CB 85 6B		mva	_hfillb1+1,y	hlp+1
  1197
  1198 4C74 A0 00			ldy #0
  1199 4C76 A9 60			lda #{rts}
  1200 4C78 91 6A			sta (hlp),y
  1201
  1202 4C7A BC D3 3A			ldy tmul8,x
  1203
  1204 4C7D 20 FF FF			jsr $ffff
  1205 = 4C7E			fjsr	equ *-2
  1206
  1207 4C80 A0 00			ldy #0
  1208 4C82 A9 BD 91 6A			mva	#{lda $ffff,x}	(hlp),y
  1209 4C86 A9 60 8D 0C 54		mva	#{rts}		_fillqb1
  1210
  1211 4C8B 98				tya
  1212 4C8C 9D 70 13			sta clridx+32,x
  1213 4C8F 9D 70 1B			sta tmaxy+32,x
  1214
  1215 4C92 A9 97 9D 70 17		mva	#scrhig*8-1	tminy+32,x
  1216
  1217 4C97 CA			_next	dex
  1218 4C98 10 B9			bpl _clr
  1219
  1220
  1221 4C9A A2 1F			ldx #31
  1222
  1223 4C9C BC 50 13		clr	ldy clridx,x
  1224 4C9F F0 3F			beq next
  1225
  1226 4CA1 BC 50 17			ldy	tminy,x
  1227 4CA4 B9 50 1F 8D C7 4C		mva	lfillb1,y	_jsr
  1228 4CAA B9 50 C3 8D C8 4C		mva	hfillb1,y	_jsr+1
  1229
  1230 4CB0 BC 50 1B			ldy	tmaxy,x
  1231 4CB3 B9 51 1F 85 6A		mva	lfillb1+1,y	hlp
  1232 4CB8 B9 51 C3 85 6B		mva	hfillb1+1,y	hlp+1
  1233
  1234 4CBD A0 00			ldy #0
  1235 4CBF A9 60			lda #{rts}
  1236 4CC1 91 6A			sta (hlp),y
  1237
  1238 4CC3 BC D3 3A			ldy tmul8,x
  1239
  1240 4CC6 20 FF FF			jsr $ffff
  1241 = 4CC7			_jsr	equ *-2
  1242
  1243 4CC9 A0 00			ldy #0
  1244 4CCB A9 BD 91 6A			mva	#{lda $ffff,x}	(hlp),y
  1245 4CCF A9 60 8D 7B 50		mva	#{rts}		fillqb1
  1246
  1247 4CD4 98				tya
  1248 4CD5 9D 50 13			sta clridx,x
  1249 4CD8 9D 50 1B			sta tmaxy,x
  1250
  1251 4CDB A9 97 9D 50 17		mva	#scrhig*8-1	tminy,x
  1252
  1253 4CE0 CA			next	dex
  1254 4CE1 10 B9			bpl clr
  1255
  1256 4CE3				.endpg
  1257
  1258 4CE3 A9 3E 8D C3 82		mva #scr40	NMI._dmactl
  1259
  1260 4CE8 4C 05 89			jmp CLRHARP.clrPMB2
  1261
  1262
  1263 4CEB BD 40 9B 99 00 10 + fillb1	:scrhig*8 mva txture+#*40,x .get[#>>3]<<8+#&7,y
  1264 507B 60			fillqb1	rts
  1265
  1266 507C BD 60 9B 99 00 11 + _fillb1	:scrhig*8 mva txture+#*40+32,x .get[#>>3]<<8+#&7+256,y
  1267 540C 60			_fillqb1 rts
  1268
  1269 				.endp
  1270
  1271
  1272 				* ---------------------------
  1273 				* ---	CLEARB2
  1274 				* ---------------------------
  1275 540D			.proc	CLEARB2
  1276
  1277 540D A2 07			ldx #5+2
  1278
  1279 540F				.pages
  1280
  1281 540F BC 98 13		_clr	ldy clridx+40+32,x
  1282 5412 F0 3F			beq _next
  1283
  1284 5414 BC 98 17			ldy	tminy+40+32,x
  1285 5417 B9 50 E7 8D 3A 54		mva	_lfillb2,y	fjsr
  1286 541D B9 50 EB 8D 3B 54		mva	_hfillb2,y	fjsr+1
  1287
  1288 5423 BC 98 1B			ldy	tmaxy+40+32,x
  1289 5426 B9 51 E7 85 6A		mva	_lfillb2+1,y	hlp
  1290 542B B9 51 EB 85 6B		mva	_hfillb2+1,y	hlp+1
  1291
  1292 5430 A0 00			ldy #0
  1293 5432 A9 60			lda #{rts}
  1294 5434 91 6A			sta (hlp),y
  1295
  1296 5436 BC D3 3A			ldy tmul8,x
  1297
  1298 5439 20 FF FF			jsr $ffff
  1299 = 543A			fjsr	equ *-2
  1300
  1301 543C A0 00			ldy #0
  1302 543E A9 BD 91 6A			mva	#{lda $ffff,x}	(hlp),y
  1303 5442 A9 60 8D C3 5B		mva	#{rts}		_fillqb2
  1304
  1305 5447 98				tya
  1306 5448 9D 98 13			sta clridx+40+32,x
  1307 544B 9D 98 1B			sta tmaxy+40+32,x
  1308
  1309 544E A9 97 9D 98 17		mva	#scrhig*8-1	tminy+40+32,x
  1310
  1311 5453 CA			_next	dex
  1312 5454 10 B9			bpl _clr
  1313
  1314
  1315 5456 A2 1F			ldx #31
  1316
  1317 5458 BC 78 13		clr	ldy clridx+40,x
  1318 545B F0 3F			beq next
  1319
  1320 545D BC 78 17			ldy	tminy+40,x
  1321 5460 B9 50 CF 8D 83 54		mva	lfillb2,y	_jsr
  1322 5466 B9 50 E3 8D 84 54		mva	hfillb2,y	_jsr+1
  1323
  1324 546C BC 78 1B			ldy	tmaxy+40,x
  1325 546F B9 51 CF 85 6A		mva	lfillb2+1,y	hlp
  1326 5474 B9 51 E3 85 6B		mva	hfillb2+1,y	hlp+1
  1327
  1328 5479 A0 00			ldy #0
  1329 547B A9 60			lda #{rts}
  1330 547D 91 6A			sta (hlp),y
  1331
  1332 547F BC D3 3A			ldy tmul8,x
  1333
  1334 5482 20 FF FF			jsr $ffff
  1335 = 5483			_jsr	equ *-2
  1336
  1337 5485 A0 00			ldy #0
  1338 5487 A9 BD 91 6A			mva	#{lda $ffff,x}	(hlp),y
  1339 548B A9 60 8D 32 58		mva	#{rts}		fillqb2
  1340
  1341 5490 98				tya
  1342 5491 9D 78 13			sta clridx+40,x
  1343 5494 9D 78 1B			sta tmaxy+40,x
  1344
  1345 5497 A9 97 9D 78 17		mva	#scrhig*8-1	tminy+40,x
  1346
  1347 549C CA			next	dex
  1348 549D 10 B9			bpl clr
  1349
  1350 549F				.endpg
  1351
  1352 549F 4C F6 88			jmp CLRHARP.clrPMB1
  1353
  1354
  1355 54A2 BD 40 9B 99 00 12 + fillb2	:scrhig*8 mva txture+#*40,x .get[#>>3]<<8+#&7+512,y
  1356 5832 60			fillqb2	rts
  1357
  1358 5833 BD 60 9B 99 00 13 + _fillb2	:scrhig*8 mva txture+32+#*40,x .get[#>>3]<<8+#&7+512+256,y
  1359 5BC3 60			_fillqb2 rts
  1360
  1361 				.endp
  1362
  1363
  1364 5BC4				icl '_PC\asm-kule_2\kula0.asm'
Source: kula0.asm
     1 5BC4			.local	k0
     2 5BC4			_0
     3 5BC4 B1 30			lda (ln24),y
     4 5BC6 29 C0			and #$C0
     5 5BC8 09 20			ora #$20
     6 5BCA 91 30			sta (ln24),y
     7 5BCC B1 32			lda (ln25),y
     8 5BCE 29 C0			and #$C0
     9 5BD0 09 20			ora #$20
    10 5BD2 91 32			sta (ln25),y
    11 5BD4 B1 34			lda (ln26),y
    12 5BD6 29 C0			and #$C0
    13 5BD8 09 20			ora #$20
    14 5BDA 91 34			sta (ln26),y
    15 5BDC B1 36			lda (ln27),y
    16 5BDE 29 C0			and #$C0
    17 5BE0 09 20			ora #$20
    18 5BE2 91 36			sta (ln27),y
    19 5BE4 B1 38			lda (ln28),y
    20 5BE6 29 C0			and #$C0
    21 5BE8 09 20			ora #$20
    22 5BEA 91 38			sta (ln28),y
    23 5BEC B1 16			lda (ln11),y
    24 5BEE 29 C0			and #$C0
    25 5BF0 09 21			ora #$21
    26 5BF2 91 16			sta (ln11),y
    27 5BF4 B1 18			lda (ln12),y
    28 5BF6 29 C0			and #$C0
    29 5BF8 09 21			ora #$21
    30 5BFA 91 18			sta (ln12),y
    31 5BFC B1 1A			lda (ln13),y
    32 5BFE 29 C0			and #$C0
    33 5C00 09 21			ora #$21
    34 5C02 91 1A			sta (ln13),y
    35 5C04 B1 1E			lda (ln15),y
    36 5C06 29 C0			and #$C0
    37 5C08 09 21			ora #$21
    38 5C0A 91 1E			sta (ln15),y
    39 5C0C B1 1C			lda (ln14),y
    40 5C0E 29 C0			and #$C0
    41 5C10 09 25			ora #$25
    42 5C12 91 1C			sta (ln14),y
    43 5C14 B1 10			lda (ln8),y
    44 5C16 29 F0			and #$F0
    45 5C18 09 08			ora #$08
    46 5C1A 91 10			sta (ln8),y
    47 5C1C B1 12			lda (ln9),y
    48 5C1E 29 F0			and #$F0
    49 5C20 09 08			ora #$08
    50 5C22 91 12			sta (ln9),y
    51 5C24 B1 14			lda (ln10),y
    52 5C26 29 F0			and #$F0
    53 5C28 09 08			ora #$08
    54 5C2A 91 14			sta (ln10),y
    55 5C2C B1 3A			lda (ln29),y
    56 5C2E 29 F0			and #$F0
    57 5C30 09 08			ora #$08
    58 5C32 91 3A			sta (ln29),y
    59 5C34 B1 3C			lda (ln30),y
    60 5C36 29 F0			and #$F0
    61 5C38 09 08			ora #$08
    62 5C3A 91 3C			sta (ln30),y
    63 5C3C B1 3E			lda (ln31),y
    64 5C3E 29 F0			and #$F0
    65 5C40 09 08			ora #$08
    66 5C42 91 3E			sta (ln31),y
    67 5C44 B1 0C			lda (ln6),y
    68 5C46 29 FC			and #$FC
    69 5C48 09 02			ora #$02
    70 5C4A 91 0C			sta (ln6),y
    71 5C4C B1 0E			lda (ln7),y
    72 5C4E 29 FC			and #$FC
    73 5C50 09 02			ora #$02
    74 5C52 91 0E			sta (ln7),y
    75 5C54 B1 40			lda (ln32),y
    76 5C56 29 FC			and #$FC
    77 5C58 09 02			ora #$02
    78 5C5A 91 40			sta (ln32),y
    79 5C5C B1 42			lda (ln33),y
    80 5C5E 29 FC			and #$FC
    81 5C60 09 02			ora #$02
    82 5C62 91 42			sta (ln33),y
    83 5C64 A9 80			lda #$80
    84 5C66 91 2A			sta (ln21),y
    85 5C68 91 2C			sta (ln22),y
    86 5C6A 91 2E			sta (ln23),y
    87 5C6C A9 81			lda #$81
    88 5C6E 91 28			sta (ln20),y
    89 5C70 A9 85			lda #$85
    90 5C72 91 20			sta (ln16),y
    91 5C74 91 22			sta (ln17),y
    92 5C76 91 24			sta (ln18),y
    93 5C78 91 26			sta (ln19),y
    94 5C7A				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 5C7A 98				tya
     2 5C7B 69 08			adc #8
     3 5C7D A8				tay
Source: kula0.asm
    95 5C7E B1 06			lda (ln3),y
    96 5C80 29 C0			and #$C0
    97 5C82 09 20			ora #$20
    98 5C84 91 06			sta (ln3),y
    99 5C86 B1 48			lda (ln36),y
   100 5C88 29 C0			and #$C0
   101 5C8A 09 20			ora #$20
   102 5C8C 91 48			sta (ln36),y
   103 5C8E B1 04			lda (ln2),y
   104 5C90 29 F0			and #$F0
   105 5C92 09 08			ora #$08
   106 5C94 91 04			sta (ln2),y
   107 5C96 B1 4A			lda (ln37),y
   108 5C98 29 F0			and #$F0
   109 5C9A 09 08			ora #$08
   110 5C9C 91 4A			sta (ln37),y
   111 5C9E B1 02			lda (ln1),y
   112 5CA0 29 FC			and #$FC
   113 5CA2 09 02			ora #$02
   114 5CA4 91 02			sta (ln1),y
   115 5CA6 B1 4C			lda (ln38),y
   116 5CA8 29 FC			and #$FC
   117 5CAA 09 02			ora #$02
   118 5CAC 91 4C			sta (ln38),y
   119 5CAE A9 00			lda #$00
   120 5CB0 91 20			sta (ln16),y
   121 5CB2 91 24			sta (ln18),y
   122 5CB4 91 26			sta (ln19),y
   123 5CB6 91 28			sta (ln20),y
   124 5CB8 91 2A			sta (ln21),y
   125 5CBA 91 2C			sta (ln22),y
   126 5CBC 91 2E			sta (ln23),y
   127 5CBE 91 30			sta (ln24),y
   128 5CC0 91 32			sta (ln25),y
   129 5CC2 91 34			sta (ln26),y
   130 5CC4 91 36			sta (ln27),y
   131 5CC6 91 38			sta (ln28),y
   132 5CC8 91 3A			sta (ln29),y
   133 5CCA 91 3C			sta (ln30),y
   134 5CCC 91 3E			sta (ln31),y
   135 5CCE 91 40			sta (ln32),y
   136 5CD0 91 42			sta (ln33),y
   137 5CD2 A9 05			lda #$05
   138 5CD4 91 0C			sta (ln6),y
   139 5CD6 A9 14			lda #$14
   140 5CD8 91 10			sta (ln8),y
   141 5CDA A9 15			lda #$15
   142 5CDC 91 0E			sta (ln7),y
   143 5CDE A9 40			lda #$40
   144 5CE0 91 1A			sta (ln13),y
   145 5CE2 91 1C			sta (ln14),y
   146 5CE4 91 1E			sta (ln15),y
   147 5CE6 91 22			sta (ln17),y
   148 5CE8 A9 50			lda #$50
   149 5CEA 91 14			sta (ln10),y
   150 5CEC 91 16			sta (ln11),y
   151 5CEE 91 18			sta (ln12),y
   152 5CF0 A9 54			lda #$54
   153 5CF2 91 12			sta (ln9),y
   154 5CF4 A9 80			lda #$80
   155 5CF6 91 44			sta (ln34),y
   156 5CF8 91 46			sta (ln35),y
   157 5CFA A9 81			lda #$81
   158 5CFC 91 08			sta (ln4),y
   159 5CFE A9 85			lda #$85
   160 5D00 91 0A			sta (ln5),y
   161 5D02				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 5D02 98				tya
     2 5D03 69 08			adc #8
     3 5D05 A8				tay
Source: kula0.asm
   162 5D06 A9 00			lda #$00
   163 5D08 91 04			sta (ln2),y
   164 5D0A 91 06			sta (ln3),y
   165 5D0C 91 08			sta (ln4),y
   166 5D0E 91 0E			sta (ln7),y
   167 5D10 91 10			sta (ln8),y
   168 5D12 91 12			sta (ln9),y
   169 5D14 91 14			sta (ln10),y
   170 5D16 91 16			sta (ln11),y
   171 5D18 91 18			sta (ln12),y
   172 5D1A 91 1A			sta (ln13),y
   173 5D1C 91 1C			sta (ln14),y
   174 5D1E 91 1E			sta (ln15),y
   175 5D20 91 20			sta (ln16),y
   176 5D22 91 22			sta (ln17),y
   177 5D24 91 24			sta (ln18),y
   178 5D26 91 26			sta (ln19),y
   179 5D28 91 28			sta (ln20),y
   180 5D2A 91 2A			sta (ln21),y
   181 5D2C 91 2C			sta (ln22),y
   182 5D2E 91 2E			sta (ln23),y
   183 5D30 91 30			sta (ln24),y
   184 5D32 91 32			sta (ln25),y
   185 5D34 91 34			sta (ln26),y
   186 5D36 91 36			sta (ln27),y
   187 5D38 91 38			sta (ln28),y
   188 5D3A 91 3A			sta (ln29),y
   189 5D3C 91 3C			sta (ln30),y
   190 5D3E 91 3E			sta (ln31),y
   191 5D40 91 40			sta (ln32),y
   192 5D42 91 42			sta (ln33),y
   193 5D44 91 44			sta (ln34),y
   194 5D46 91 48			sta (ln36),y
   195 5D48 91 4A			sta (ln37),y
   196 5D4A A9 01			lda #$01
   197 5D4C 91 46			sta (ln35),y
   198 5D4E A9 40			lda #$40
   199 5D50 91 0A			sta (ln5),y
   200 5D52 91 0C			sta (ln6),y
   201 5D54 A9 AA			lda #$AA
   202 5D56 91 02			sta (ln1),y
   203 5D58 91 4C			sta (ln38),y
   204 5D5A				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 5D5A 98				tya
     2 5D5B 69 08			adc #8
     3 5D5D A8				tay
Source: kula0.asm
   205 5D5E B1 06			lda (ln3),y
   206 5D60 29 03			and #$03
   207 5D62 09 08			ora #$08
   208 5D64 91 06			sta (ln3),y
   209 5D66 B1 48			lda (ln36),y
   210 5D68 29 03			and #$03
   211 5D6A 09 08			ora #$08
   212 5D6C 91 48			sta (ln36),y
   213 5D6E B1 04			lda (ln2),y
   214 5D70 29 0F			and #$0F
   215 5D72 09 20			ora #$20
   216 5D74 91 04			sta (ln2),y
   217 5D76 B1 4A			lda (ln37),y
   218 5D78 29 0F			and #$0F
   219 5D7A 09 20			ora #$20
   220 5D7C 91 4A			sta (ln37),y
   221 5D7E B1 02			lda (ln1),y
   222 5D80 29 3F			and #$3F
   223 5D82 09 80			ora #$80
   224 5D84 91 02			sta (ln1),y
   225 5D86 B1 4C			lda (ln38),y
   226 5D88 29 3F			and #$3F
   227 5D8A 09 80			ora #$80
   228 5D8C 91 4C			sta (ln38),y
   229 5D8E A9 00			lda #$00
   230 5D90 91 0C			sta (ln6),y
   231 5D92 91 0E			sta (ln7),y
   232 5D94 91 10			sta (ln8),y
   233 5D96 91 12			sta (ln9),y
   234 5D98 91 14			sta (ln10),y
   235 5D9A 91 16			sta (ln11),y
   236 5D9C 91 18			sta (ln12),y
   237 5D9E 91 1A			sta (ln13),y
   238 5DA0 91 1C			sta (ln14),y
   239 5DA2 91 1E			sta (ln15),y
   240 5DA4 91 20			sta (ln16),y
   241 5DA6 91 22			sta (ln17),y
   242 5DA8 91 24			sta (ln18),y
   243 5DAA 91 26			sta (ln19),y
   244 5DAC 91 28			sta (ln20),y
   245 5DAE 91 2A			sta (ln21),y
   246 5DB0 91 2C			sta (ln22),y
   247 5DB2 91 2E			sta (ln23),y
   248 5DB4 91 30			sta (ln24),y
   249 5DB6 91 32			sta (ln25),y
   250 5DB8 91 34			sta (ln26),y
   251 5DBA 91 36			sta (ln27),y
   252 5DBC 91 38			sta (ln28),y
   253 5DBE A9 02			lda #$02
   254 5DC0 91 08			sta (ln4),y
   255 5DC2 91 0A			sta (ln5),y
   256 5DC4 A9 05			lda #$05
   257 5DC6 91 3A			sta (ln29),y
   258 5DC8 A9 14			lda #$14
   259 5DCA 91 40			sta (ln32),y
   260 5DCC 91 42			sta (ln33),y
   261 5DCE A9 15			lda #$15
   262 5DD0 91 3C			sta (ln30),y
   263 5DD2 91 3E			sta (ln31),y
   264 5DD4 A9 42			lda #$42
   265 5DD6 91 46			sta (ln35),y
   266 5DD8 A9 52			lda #$52
   267 5DDA 91 44			sta (ln34),y
   268 5DDC				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 5DDC 98				tya
     2 5DDD 69 08			adc #8
     3 5DDF A8				tay
Source: kula0.asm
   269 5DE0 B1 16			lda (ln11),y
   270 5DE2 29 03			and #$03
   271 5DE4 09 08			ora #$08
   272 5DE6 91 16			sta (ln11),y
   273 5DE8 B1 18			lda (ln12),y
   274 5DEA 29 03			and #$03
   275 5DEC 09 08			ora #$08
   276 5DEE 91 18			sta (ln12),y
   277 5DF0 B1 1A			lda (ln13),y
   278 5DF2 29 03			and #$03
   279 5DF4 09 08			ora #$08
   280 5DF6 91 1A			sta (ln13),y
   281 5DF8 B1 1C			lda (ln14),y
   282 5DFA 29 03			and #$03
   283 5DFC 09 08			ora #$08
   284 5DFE 91 1C			sta (ln14),y
   285 5E00 B1 1E			lda (ln15),y
   286 5E02 29 03			and #$03
   287 5E04 09 08			ora #$08
   288 5E06 91 1E			sta (ln15),y
   289 5E08 B1 30			lda (ln24),y
   290 5E0A 29 03			and #$03
   291 5E0C 09 08			ora #$08
   292 5E0E 91 30			sta (ln24),y
   293 5E10 B1 32			lda (ln25),y
   294 5E12 29 03			and #$03
   295 5E14 09 08			ora #$08
   296 5E16 91 32			sta (ln25),y
   297 5E18 B1 10			lda (ln8),y
   298 5E1A 29 0F			and #$0F
   299 5E1C 09 20			ora #$20
   300 5E1E 91 10			sta (ln8),y
   301 5E20 B1 12			lda (ln9),y
   302 5E22 29 0F			and #$0F
   303 5E24 09 20			ora #$20
   304 5E26 91 12			sta (ln9),y
   305 5E28 B1 14			lda (ln10),y
   306 5E2A 29 0F			and #$0F
   307 5E2C 09 20			ora #$20
   308 5E2E 91 14			sta (ln10),y
   309 5E30 B1 3A			lda (ln29),y
   310 5E32 29 0F			and #$0F
   311 5E34 09 20			ora #$20
   312 5E36 91 3A			sta (ln29),y
   313 5E38 B1 3C			lda (ln30),y
   314 5E3A 29 0F			and #$0F
   315 5E3C 09 20			ora #$20
   316 5E3E 91 3C			sta (ln30),y
   317 5E40 B1 3E			lda (ln31),y
   318 5E42 29 0F			and #$0F
   319 5E44 09 20			ora #$20
   320 5E46 91 3E			sta (ln31),y
   321 5E48 B1 34			lda (ln26),y
   322 5E4A 29 03			and #$03
   323 5E4C 09 48			ora #$48
   324 5E4E 91 34			sta (ln26),y
   325 5E50 B1 36			lda (ln27),y
   326 5E52 29 03			and #$03
   327 5E54 09 48			ora #$48
   328 5E56 91 36			sta (ln27),y
   329 5E58 B1 38			lda (ln28),y
   330 5E5A 29 03			and #$03
   331 5E5C 09 48			ora #$48
   332 5E5E 91 38			sta (ln28),y
   333 5E60 B1 0C			lda (ln6),y
   334 5E62 29 3F			and #$3F
   335 5E64 09 80			ora #$80
   336 5E66 91 0C			sta (ln6),y
   337 5E68 B1 0E			lda (ln7),y
   338 5E6A 29 3F			and #$3F
   339 5E6C 09 80			ora #$80
   340 5E6E 91 0E			sta (ln7),y
   341 5E70 B1 40			lda (ln32),y
   342 5E72 29 3F			and #$3F
   343 5E74 09 80			ora #$80
   344 5E76 91 40			sta (ln32),y
   345 5E78 B1 42			lda (ln33),y
   346 5E7A 29 3F			and #$3F
   347 5E7C 09 80			ora #$80
   348 5E7E 91 42			sta (ln33),y
   349 5E80 A9 02			lda #$02
   350 5E82 91 20			sta (ln16),y
   351 5E84 91 22			sta (ln17),y
   352 5E86 91 24			sta (ln18),y
   353 5E88 91 26			sta (ln19),y
   354 5E8A 91 28			sta (ln20),y
   355 5E8C 91 2A			sta (ln21),y
   356 5E8E 91 2C			sta (ln22),y
   357 5E90 91 2E			sta (ln23),y
   358 5E92 4C 14 3D			jmp BALL.MINMAX
   359 5E95			_1
   360 5E95 B1 28			lda (ln20),y
   361 5E97 29 C0			and #$C0
   362 5E99 09 20			ora #$20
   363 5E9B 91 28			sta (ln20),y
   364 5E9D B1 2A			lda (ln21),y
   365 5E9F 29 C0			and #$C0
   366 5EA1 09 20			ora #$20
   367 5EA3 91 2A			sta (ln21),y
   368 5EA5 B1 2C			lda (ln22),y
   369 5EA7 29 C0			and #$C0
   370 5EA9 09 20			ora #$20
   371 5EAB 91 2C			sta (ln22),y
   372 5EAD B1 2E			lda (ln23),y
   373 5EAF 29 C0			and #$C0
   374 5EB1 09 20			ora #$20
   375 5EB3 91 2E			sta (ln23),y
   376 5EB5 B1 20			lda (ln16),y
   377 5EB7 29 C0			and #$C0
   378 5EB9 09 21			ora #$21
   379 5EBB 91 20			sta (ln16),y
   380 5EBD B1 22			lda (ln17),y
   381 5EBF 29 C0			and #$C0
   382 5EC1 09 21			ora #$21
   383 5EC3 91 22			sta (ln17),y
   384 5EC5 B1 24			lda (ln18),y
   385 5EC7 29 C0			and #$C0
   386 5EC9 09 21			ora #$21
   387 5ECB 91 24			sta (ln18),y
   388 5ECD B1 26			lda (ln19),y
   389 5ECF 29 C0			and #$C0
   390 5ED1 09 21			ora #$21
   391 5ED3 91 26			sta (ln19),y
   392 5ED5 B1 16			lda (ln11),y
   393 5ED7 29 F0			and #$F0
   394 5ED9 09 08			ora #$08
   395 5EDB 91 16			sta (ln11),y
   396 5EDD B1 18			lda (ln12),y
   397 5EDF 29 F0			and #$F0
   398 5EE1 09 08			ora #$08
   399 5EE3 91 18			sta (ln12),y
   400 5EE5 B1 1A			lda (ln13),y
   401 5EE7 29 F0			and #$F0
   402 5EE9 09 08			ora #$08
   403 5EEB 91 1A			sta (ln13),y
   404 5EED B1 1E			lda (ln15),y
   405 5EEF 29 F0			and #$F0
   406 5EF1 09 08			ora #$08
   407 5EF3 91 1E			sta (ln15),y
   408 5EF5 B1 30			lda (ln24),y
   409 5EF7 29 F0			and #$F0
   410 5EF9 09 08			ora #$08
   411 5EFB 91 30			sta (ln24),y
   412 5EFD B1 32			lda (ln25),y
   413 5EFF 29 F0			and #$F0
   414 5F01 09 08			ora #$08
   415 5F03 91 32			sta (ln25),y
   416 5F05 B1 34			lda (ln26),y
   417 5F07 29 F0			and #$F0
   418 5F09 09 08			ora #$08
   419 5F0B 91 34			sta (ln26),y
   420 5F0D B1 36			lda (ln27),y
   421 5F0F 29 F0			and #$F0
   422 5F11 09 08			ora #$08
   423 5F13 91 36			sta (ln27),y
   424 5F15 B1 38			lda (ln28),y
   425 5F17 29 F0			and #$F0
   426 5F19 09 08			ora #$08
   427 5F1B 91 38			sta (ln28),y
   428 5F1D B1 1C			lda (ln14),y
   429 5F1F 29 F0			and #$F0
   430 5F21 09 09			ora #$09
   431 5F23 91 1C			sta (ln14),y
   432 5F25 B1 10			lda (ln8),y
   433 5F27 29 FC			and #$FC
   434 5F29 09 02			ora #$02
   435 5F2B 91 10			sta (ln8),y
   436 5F2D B1 12			lda (ln9),y
   437 5F2F 29 FC			and #$FC
   438 5F31 09 02			ora #$02
   439 5F33 91 12			sta (ln9),y
   440 5F35 B1 14			lda (ln10),y
   441 5F37 29 FC			and #$FC
   442 5F39 09 02			ora #$02
   443 5F3B 91 14			sta (ln10),y
   444 5F3D B1 3A			lda (ln29),y
   445 5F3F 29 FC			and #$FC
   446 5F41 09 02			ora #$02
   447 5F43 91 3A			sta (ln29),y
   448 5F45 B1 3C			lda (ln30),y
   449 5F47 29 FC			and #$FC
   450 5F49 09 02			ora #$02
   451 5F4B 91 3C			sta (ln30),y
   452 5F4D B1 3E			lda (ln31),y
   453 5F4F 29 FC			and #$FC
   454 5F51 09 02			ora #$02
   455 5F53 91 3E			sta (ln31),y
   456 5F55				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 5F55 98				tya
     2 5F56 69 08			adc #8
     3 5F58 A8				tay
Source: kula0.asm
   457 5F59 B1 08			lda (ln4),y
   458 5F5B 29 C0			and #$C0
   459 5F5D 09 20			ora #$20
   460 5F5F 91 08			sta (ln4),y
   461 5F61 B1 44			lda (ln34),y
   462 5F63 29 C0			and #$C0
   463 5F65 09 20			ora #$20
   464 5F67 91 44			sta (ln34),y
   465 5F69 B1 46			lda (ln35),y
   466 5F6B 29 C0			and #$C0
   467 5F6D 09 20			ora #$20
   468 5F6F 91 46			sta (ln35),y
   469 5F71 B1 0A			lda (ln5),y
   470 5F73 29 C0			and #$C0
   471 5F75 09 21			ora #$21
   472 5F77 91 0A			sta (ln5),y
   473 5F79 B1 06			lda (ln3),y
   474 5F7B 29 F0			and #$F0
   475 5F7D 09 08			ora #$08
   476 5F7F 91 06			sta (ln3),y
   477 5F81 B1 48			lda (ln36),y
   478 5F83 29 F0			and #$F0
   479 5F85 09 08			ora #$08
   480 5F87 91 48			sta (ln36),y
   481 5F89 B1 04			lda (ln2),y
   482 5F8B 29 FC			and #$FC
   483 5F8D 09 02			ora #$02
   484 5F8F 91 04			sta (ln2),y
   485 5F91 B1 4A			lda (ln37),y
   486 5F93 29 FC			and #$FC
   487 5F95 09 02			ora #$02
   488 5F97 91 4A			sta (ln37),y
   489 5F99 A9 00			lda #$00
   490 5F9B 91 2A			sta (ln21),y
   491 5F9D 91 2C			sta (ln22),y
   492 5F9F 91 2E			sta (ln23),y
   493 5FA1 91 30			sta (ln24),y
   494 5FA3 91 32			sta (ln25),y
   495 5FA5 91 34			sta (ln26),y
   496 5FA7 91 36			sta (ln27),y
   497 5FA9 91 38			sta (ln28),y
   498 5FAB 91 3A			sta (ln29),y
   499 5FAD 91 3C			sta (ln30),y
   500 5FAF 91 3E			sta (ln31),y
   501 5FB1 A9 05			lda #$05
   502 5FB3 91 10			sta (ln8),y
   503 5FB5 A9 14			lda #$14
   504 5FB7 91 14			sta (ln10),y
   505 5FB9 A9 15			lda #$15
   506 5FBB 91 12			sta (ln9),y
   507 5FBD A9 40			lda #$40
   508 5FBF 91 20			sta (ln16),y
   509 5FC1 91 24			sta (ln18),y
   510 5FC3 91 26			sta (ln19),y
   511 5FC5 91 28			sta (ln20),y
   512 5FC7 A9 50			lda #$50
   513 5FC9 91 1A			sta (ln13),y
   514 5FCB 91 1C			sta (ln14),y
   515 5FCD 91 1E			sta (ln15),y
   516 5FCF 91 22			sta (ln17),y
   517 5FD1 A9 54			lda #$54
   518 5FD3 91 16			sta (ln11),y
   519 5FD5 91 18			sta (ln12),y
   520 5FD7 A9 80			lda #$80
   521 5FD9 91 40			sta (ln32),y
   522 5FDB 91 42			sta (ln33),y
   523 5FDD A9 81			lda #$81
   524 5FDF 91 0C			sta (ln6),y
   525 5FE1 A9 85			lda #$85
   526 5FE3 91 0E			sta (ln7),y
   527 5FE5				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 5FE5 98				tya
     2 5FE6 69 08			adc #8
     3 5FE8 A8				tay
Source: kula0.asm
   528 5FE9 A9 00			lda #$00
   529 5FEB 91 04			sta (ln2),y
   530 5FED 91 06			sta (ln3),y
   531 5FEF 91 10			sta (ln8),y
   532 5FF1 91 12			sta (ln9),y
   533 5FF3 91 14			sta (ln10),y
   534 5FF5 91 16			sta (ln11),y
   535 5FF7 91 18			sta (ln12),y
   536 5FF9 91 1A			sta (ln13),y
   537 5FFB 91 1C			sta (ln14),y
   538 5FFD 91 1E			sta (ln15),y
   539 5FFF 91 20			sta (ln16),y
   540 6001 91 22			sta (ln17),y
   541 6003 91 24			sta (ln18),y
   542 6005 91 26			sta (ln19),y
   543 6007 91 28			sta (ln20),y
   544 6009 91 2A			sta (ln21),y
   545 600B 91 2C			sta (ln22),y
   546 600D 91 2E			sta (ln23),y
   547 600F 91 30			sta (ln24),y
   548 6011 91 32			sta (ln25),y
   549 6013 91 34			sta (ln26),y
   550 6015 91 36			sta (ln27),y
   551 6017 91 38			sta (ln28),y
   552 6019 91 3A			sta (ln29),y
   553 601B 91 3C			sta (ln30),y
   554 601D 91 3E			sta (ln31),y
   555 601F 91 40			sta (ln32),y
   556 6021 91 42			sta (ln33),y
   557 6023 91 44			sta (ln34),y
   558 6025 91 46			sta (ln35),y
   559 6027 91 48			sta (ln36),y
   560 6029 91 4A			sta (ln37),y
   561 602B A9 40			lda #$40
   562 602D 91 08			sta (ln4),y
   563 602F 91 0E			sta (ln7),y
   564 6031 A9 50			lda #$50
   565 6033 91 0A			sta (ln5),y
   566 6035 91 0C			sta (ln6),y
   567 6037 A9 AA			lda #$AA
   568 6039 91 02			sta (ln1),y
   569 603B 91 4C			sta (ln38),y
   570 603D				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 603D 98				tya
     2 603E 69 08			adc #8
     3 6040 A8				tay
Source: kula0.asm
   571 6041 B1 04			lda (ln2),y
   572 6043 29 03			and #$03
   573 6045 09 08			ora #$08
   574 6047 91 04			sta (ln2),y
   575 6049 B1 4A			lda (ln37),y
   576 604B 29 03			and #$03
   577 604D 09 08			ora #$08
   578 604F 91 4A			sta (ln37),y
   579 6051 B1 02			lda (ln1),y
   580 6053 29 0F			and #$0F
   581 6055 09 A0			ora #$A0
   582 6057 91 02			sta (ln1),y
   583 6059 B1 4C			lda (ln38),y
   584 605B 29 0F			and #$0F
   585 605D 09 A0			ora #$A0
   586 605F 91 4C			sta (ln38),y
   587 6061 A9 00			lda #$00
   588 6063 91 08			sta (ln4),y
   589 6065 91 0A			sta (ln5),y
   590 6067 91 0C			sta (ln6),y
   591 6069 91 0E			sta (ln7),y
   592 606B 91 10			sta (ln8),y
   593 606D 91 12			sta (ln9),y
   594 606F 91 14			sta (ln10),y
   595 6071 91 16			sta (ln11),y
   596 6073 91 18			sta (ln12),y
   597 6075 91 1A			sta (ln13),y
   598 6077 91 1C			sta (ln14),y
   599 6079 91 1E			sta (ln15),y
   600 607B 91 20			sta (ln16),y
   601 607D 91 22			sta (ln17),y
   602 607F 91 24			sta (ln18),y
   603 6081 91 26			sta (ln19),y
   604 6083 91 28			sta (ln20),y
   605 6085 91 2A			sta (ln21),y
   606 6087 91 2C			sta (ln22),y
   607 6089 91 2E			sta (ln23),y
   608 608B 91 30			sta (ln24),y
   609 608D 91 32			sta (ln25),y
   610 608F 91 34			sta (ln26),y
   611 6091 91 36			sta (ln27),y
   612 6093 91 38			sta (ln28),y
   613 6095 A9 01			lda #$01
   614 6097 91 3A			sta (ln29),y
   615 6099 A9 02			lda #$02
   616 609B 91 06			sta (ln3),y
   617 609D 91 48			sta (ln36),y
   618 609F A9 05			lda #$05
   619 60A1 91 3C			sta (ln30),y
   620 60A3 91 3E			sta (ln31),y
   621 60A5 91 40			sta (ln32),y
   622 60A7 91 42			sta (ln33),y
   623 60A9 A9 14			lda #$14
   624 60AB 91 44			sta (ln34),y
   625 60AD A9 50			lda #$50
   626 60AF 91 46			sta (ln35),y
   627 60B1				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 60B1 98				tya
     2 60B2 69 08			adc #8
     3 60B4 A8				tay
Source: kula0.asm
   628 60B5 B1 10			lda (ln8),y
   629 60B7 29 03			and #$03
   630 60B9 09 08			ora #$08
   631 60BB 91 10			sta (ln8),y
   632 60BD B1 12			lda (ln9),y
   633 60BF 29 03			and #$03
   634 60C1 09 08			ora #$08
   635 60C3 91 12			sta (ln9),y
   636 60C5 B1 14			lda (ln10),y
   637 60C7 29 03			and #$03
   638 60C9 09 08			ora #$08
   639 60CB 91 14			sta (ln10),y
   640 60CD B1 0C			lda (ln6),y
   641 60CF 29 0F			and #$0F
   642 60D1 09 20			ora #$20
   643 60D3 91 0C			sta (ln6),y
   644 60D5 B1 0E			lda (ln7),y
   645 60D7 29 0F			and #$0F
   646 60D9 09 20			ora #$20
   647 60DB 91 0E			sta (ln7),y
   648 60DD B1 40			lda (ln32),y
   649 60DF 29 0F			and #$0F
   650 60E1 09 20			ora #$20
   651 60E3 91 40			sta (ln32),y
   652 60E5 B1 42			lda (ln33),y
   653 60E7 29 0F			and #$0F
   654 60E9 09 20			ora #$20
   655 60EB 91 42			sta (ln33),y
   656 60ED B1 3A			lda (ln29),y
   657 60EF 29 03			and #$03
   658 60F1 09 48			ora #$48
   659 60F3 91 3A			sta (ln29),y
   660 60F5 B1 3C			lda (ln30),y
   661 60F7 29 03			and #$03
   662 60F9 09 48			ora #$48
   663 60FB 91 3C			sta (ln30),y
   664 60FD B1 3E			lda (ln31),y
   665 60FF 29 03			and #$03
   666 6101 09 48			ora #$48
   667 6103 91 3E			sta (ln31),y
   668 6105 B1 08			lda (ln4),y
   669 6107 29 3F			and #$3F
   670 6109 09 80			ora #$80
   671 610B 91 08			sta (ln4),y
   672 610D B1 0A			lda (ln5),y
   673 610F 29 3F			and #$3F
   674 6111 09 80			ora #$80
   675 6113 91 0A			sta (ln5),y
   676 6115 B1 44			lda (ln34),y
   677 6117 29 3F			and #$3F
   678 6119 09 80			ora #$80
   679 611B 91 44			sta (ln34),y
   680 611D B1 46			lda (ln35),y
   681 611F 29 3F			and #$3F
   682 6121 09 80			ora #$80
   683 6123 91 46			sta (ln35),y
   684 6125 A9 00			lda #$00
   685 6127 91 20			sta (ln16),y
   686 6129 91 22			sta (ln17),y
   687 612B 91 24			sta (ln18),y
   688 612D 91 26			sta (ln19),y
   689 612F 91 28			sta (ln20),y
   690 6131 91 2A			sta (ln21),y
   691 6133 91 2C			sta (ln22),y
   692 6135 91 2E			sta (ln23),y
   693 6137 A9 02			lda #$02
   694 6139 91 16			sta (ln11),y
   695 613B 91 18			sta (ln12),y
   696 613D 91 1A			sta (ln13),y
   697 613F 91 1C			sta (ln14),y
   698 6141 91 1E			sta (ln15),y
   699 6143 91 30			sta (ln24),y
   700 6145 91 32			sta (ln25),y
   701 6147 A9 12			lda #$12
   702 6149 91 34			sta (ln26),y
   703 614B 91 36			sta (ln27),y
   704 614D 91 38			sta (ln28),y
   705 614F				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 614F 98				tya
     2 6150 69 08			adc #8
     3 6152 A8				tay
Source: kula0.asm
   706 6153 B1 20			lda (ln16),y
   707 6155 29 3F			and #$3F
   708 6157 09 80			ora #$80
   709 6159 91 20			sta (ln16),y
   710 615B B1 22			lda (ln17),y
   711 615D 29 3F			and #$3F
   712 615F 09 80			ora #$80
   713 6161 91 22			sta (ln17),y
   714 6163 B1 24			lda (ln18),y
   715 6165 29 3F			and #$3F
   716 6167 09 80			ora #$80
   717 6169 91 24			sta (ln18),y
   718 616B B1 26			lda (ln19),y
   719 616D 29 3F			and #$3F
   720 616F 09 80			ora #$80
   721 6171 91 26			sta (ln19),y
   722 6173 B1 28			lda (ln20),y
   723 6175 29 3F			and #$3F
   724 6177 09 80			ora #$80
   725 6179 91 28			sta (ln20),y
   726 617B B1 2A			lda (ln21),y
   727 617D 29 3F			and #$3F
   728 617F 09 80			ora #$80
   729 6181 91 2A			sta (ln21),y
   730 6183 B1 2C			lda (ln22),y
   731 6185 29 3F			and #$3F
   732 6187 09 80			ora #$80
   733 6189 91 2C			sta (ln22),y
   734 618B B1 2E			lda (ln23),y
   735 618D 29 3F			and #$3F
   736 618F 09 80			ora #$80
   737 6191 91 2E			sta (ln23),y
   738 6193 4C 14 3D			jmp BALL.MINMAX
   739 6196			_2
   740 6196 B1 20			lda (ln16),y
   741 6198 29 F0			and #$F0
   742 619A 09 08			ora #$08
   743 619C 91 20			sta (ln16),y
   744 619E B1 22			lda (ln17),y
   745 61A0 29 F0			and #$F0
   746 61A2 09 08			ora #$08
   747 61A4 91 22			sta (ln17),y
   748 61A6 B1 24			lda (ln18),y
   749 61A8 29 F0			and #$F0
   750 61AA 09 08			ora #$08
   751 61AC 91 24			sta (ln18),y
   752 61AE B1 26			lda (ln19),y
   753 61B0 29 F0			and #$F0
   754 61B2 09 08			ora #$08
   755 61B4 91 26			sta (ln19),y
   756 61B6 B1 28			lda (ln20),y
   757 61B8 29 F0			and #$F0
   758 61BA 09 08			ora #$08
   759 61BC 91 28			sta (ln20),y
   760 61BE B1 2A			lda (ln21),y
   761 61C0 29 F0			and #$F0
   762 61C2 09 08			ora #$08
   763 61C4 91 2A			sta (ln21),y
   764 61C6 B1 2C			lda (ln22),y
   765 61C8 29 F0			and #$F0
   766 61CA 09 08			ora #$08
   767 61CC 91 2C			sta (ln22),y
   768 61CE B1 2E			lda (ln23),y
   769 61D0 29 F0			and #$F0
   770 61D2 09 08			ora #$08
   771 61D4 91 2E			sta (ln23),y
   772 61D6 B1 16			lda (ln11),y
   773 61D8 29 FC			and #$FC
   774 61DA 09 02			ora #$02
   775 61DC 91 16			sta (ln11),y
   776 61DE B1 18			lda (ln12),y
   777 61E0 29 FC			and #$FC
   778 61E2 09 02			ora #$02
   779 61E4 91 18			sta (ln12),y
   780 61E6 B1 1A			lda (ln13),y
   781 61E8 29 FC			and #$FC
   782 61EA 09 02			ora #$02
   783 61EC 91 1A			sta (ln13),y
   784 61EE B1 1C			lda (ln14),y
   785 61F0 29 FC			and #$FC
   786 61F2 09 02			ora #$02
   787 61F4 91 1C			sta (ln14),y
   788 61F6 B1 1E			lda (ln15),y
   789 61F8 29 FC			and #$FC
   790 61FA 09 02			ora #$02
   791 61FC 91 1E			sta (ln15),y
   792 61FE B1 30			lda (ln24),y
   793 6200 29 FC			and #$FC
   794 6202 09 02			ora #$02
   795 6204 91 30			sta (ln24),y
   796 6206 B1 32			lda (ln25),y
   797 6208 29 FC			and #$FC
   798 620A 09 02			ora #$02
   799 620C 91 32			sta (ln25),y
   800 620E B1 34			lda (ln26),y
   801 6210 29 FC			and #$FC
   802 6212 09 02			ora #$02
   803 6214 91 34			sta (ln26),y
   804 6216 B1 36			lda (ln27),y
   805 6218 29 FC			and #$FC
   806 621A 09 02			ora #$02
   807 621C 91 36			sta (ln27),y
   808 621E B1 38			lda (ln28),y
   809 6220 29 FC			and #$FC
   810 6222 09 02			ora #$02
   811 6224 91 38			sta (ln28),y
   812 6226				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 6226 98				tya
     2 6227 69 08			adc #8
     3 6229 A8				tay
Source: kula0.asm
   813 622A B1 0C			lda (ln6),y
   814 622C 29 C0			and #$C0
   815 622E 09 20			ora #$20
   816 6230 91 0C			sta (ln6),y
   817 6232 B1 40			lda (ln32),y
   818 6234 29 C0			and #$C0
   819 6236 09 20			ora #$20
   820 6238 91 40			sta (ln32),y
   821 623A B1 42			lda (ln33),y
   822 623C 29 C0			and #$C0
   823 623E 09 20			ora #$20
   824 6240 91 42			sta (ln33),y
   825 6242 B1 0E			lda (ln7),y
   826 6244 29 C0			and #$C0
   827 6246 09 21			ora #$21
   828 6248 91 0E			sta (ln7),y
   829 624A B1 08			lda (ln4),y
   830 624C 29 F0			and #$F0
   831 624E 09 08			ora #$08
   832 6250 91 08			sta (ln4),y
   833 6252 B1 0A			lda (ln5),y
   834 6254 29 F0			and #$F0
   835 6256 09 08			ora #$08
   836 6258 91 0A			sta (ln5),y
   837 625A B1 44			lda (ln34),y
   838 625C 29 F0			and #$F0
   839 625E 09 08			ora #$08
   840 6260 91 44			sta (ln34),y
   841 6262 B1 46			lda (ln35),y
   842 6264 29 F0			and #$F0
   843 6266 09 08			ora #$08
   844 6268 91 46			sta (ln35),y
   845 626A B1 06			lda (ln3),y
   846 626C 29 FC			and #$FC
   847 626E 09 02			ora #$02
   848 6270 91 06			sta (ln3),y
   849 6272 B1 48			lda (ln36),y
   850 6274 29 FC			and #$FC
   851 6276 09 02			ora #$02
   852 6278 91 48			sta (ln36),y
   853 627A A9 00			lda #$00
   854 627C 91 2A			sta (ln21),y
   855 627E 91 2C			sta (ln22),y
   856 6280 91 2E			sta (ln23),y
   857 6282 91 30			sta (ln24),y
   858 6284 91 32			sta (ln25),y
   859 6286 91 34			sta (ln26),y
   860 6288 91 36			sta (ln27),y
   861 628A 91 38			sta (ln28),y
   862 628C A9 10			lda #$10
   863 628E 91 28			sta (ln20),y
   864 6290 A9 14			lda #$14
   865 6292 91 1A			sta (ln13),y
   866 6294 91 1E			sta (ln15),y
   867 6296 A9 15			lda #$15
   868 6298 91 16			sta (ln11),y
   869 629A 91 18			sta (ln12),y
   870 629C A9 50			lda #$50
   871 629E 91 20			sta (ln16),y
   872 62A0 91 24			sta (ln18),y
   873 62A2 91 26			sta (ln19),y
   874 62A4 A9 54			lda #$54
   875 62A6 91 1C			sta (ln14),y
   876 62A8 91 22			sta (ln17),y
   877 62AA A9 80			lda #$80
   878 62AC 91 3A			sta (ln29),y
   879 62AE 91 3C			sta (ln30),y
   880 62B0 91 3E			sta (ln31),y
   881 62B2 A9 81			lda #$81
   882 62B4 91 10			sta (ln8),y
   883 62B6 A9 85			lda #$85
   884 62B8 91 12			sta (ln9),y
   885 62BA 91 14			sta (ln10),y
   886 62BC				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 62BC 98				tya
     2 62BD 69 08			adc #8
     3 62BF A8				tay
Source: kula0.asm
   887 62C0 B1 02			lda (ln1),y
   888 62C2 29 C0			and #$C0
   889 62C4 09 2A			ora #$2A
   890 62C6 91 02			sta (ln1),y
   891 62C8 B1 4C			lda (ln38),y
   892 62CA 29 C0			and #$C0
   893 62CC 09 2A			ora #$2A
   894 62CE 91 4C			sta (ln38),y
   895 62D0 A9 00			lda #$00
   896 62D2 91 06			sta (ln3),y
   897 62D4 91 14			sta (ln10),y
   898 62D6 91 16			sta (ln11),y
   899 62D8 91 18			sta (ln12),y
   900 62DA 91 1A			sta (ln13),y
   901 62DC 91 1C			sta (ln14),y
   902 62DE 91 1E			sta (ln15),y
   903 62E0 91 20			sta (ln16),y
   904 62E2 91 22			sta (ln17),y
   905 62E4 91 24			sta (ln18),y
   906 62E6 91 26			sta (ln19),y
   907 62E8 91 28			sta (ln20),y
   908 62EA 91 2A			sta (ln21),y
   909 62EC 91 2C			sta (ln22),y
   910 62EE 91 2E			sta (ln23),y
   911 62F0 91 30			sta (ln24),y
   912 62F2 91 32			sta (ln25),y
   913 62F4 91 34			sta (ln26),y
   914 62F6 91 36			sta (ln27),y
   915 62F8 91 38			sta (ln28),y
   916 62FA 91 3A			sta (ln29),y
   917 62FC 91 3C			sta (ln30),y
   918 62FE 91 3E			sta (ln31),y
   919 6300 91 40			sta (ln32),y
   920 6302 91 42			sta (ln33),y
   921 6304 91 44			sta (ln34),y
   922 6306 91 46			sta (ln35),y
   923 6308 91 48			sta (ln36),y
   924 630A A9 10			lda #$10
   925 630C 91 08			sta (ln4),y
   926 630E A9 40			lda #$40
   927 6310 91 10			sta (ln8),y
   928 6312 91 12			sta (ln9),y
   929 6314 A9 50			lda #$50
   930 6316 91 0E			sta (ln7),y
   931 6318 A9 54			lda #$54
   932 631A 91 0A			sta (ln5),y
   933 631C 91 0C			sta (ln6),y
   934 631E A9 80			lda #$80
   935 6320 91 04			sta (ln2),y
   936 6322 91 4A			sta (ln37),y
   937 6324				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 6324 98				tya
     2 6325 69 08			adc #8
     3 6327 A8				tay
Source: kula0.asm
   938 6328 B1 02			lda (ln1),y
   939 632A 29 03			and #$03
   940 632C 09 A8			ora #$A8
   941 632E 91 02			sta (ln1),y
   942 6330 B1 4C			lda (ln38),y
   943 6332 29 03			and #$03
   944 6334 09 A8			ora #$A8
   945 6336 91 4C			sta (ln38),y
   946 6338 A9 00			lda #$00
   947 633A 91 06			sta (ln3),y
   948 633C 91 08			sta (ln4),y
   949 633E 91 0A			sta (ln5),y
   950 6340 91 0C			sta (ln6),y
   951 6342 91 0E			sta (ln7),y
   952 6344 91 10			sta (ln8),y
   953 6346 91 12			sta (ln9),y
   954 6348 91 14			sta (ln10),y
   955 634A 91 16			sta (ln11),y
   956 634C 91 18			sta (ln12),y
   957 634E 91 1A			sta (ln13),y
   958 6350 91 1C			sta (ln14),y
   959 6352 91 1E			sta (ln15),y
   960 6354 91 20			sta (ln16),y
   961 6356 91 22			sta (ln17),y
   962 6358 91 24			sta (ln18),y
   963 635A 91 26			sta (ln19),y
   964 635C 91 28			sta (ln20),y
   965 635E 91 2A			sta (ln21),y
   966 6360 91 2C			sta (ln22),y
   967 6362 91 2E			sta (ln23),y
   968 6364 91 30			sta (ln24),y
   969 6366 91 32			sta (ln25),y
   970 6368 91 34			sta (ln26),y
   971 636A 91 36			sta (ln27),y
   972 636C 91 38			sta (ln28),y
   973 636E 91 3A			sta (ln29),y
   974 6370 91 48			sta (ln36),y
   975 6372 A9 01			lda #$01
   976 6374 91 3C			sta (ln30),y
   977 6376 91 3E			sta (ln31),y
   978 6378 91 40			sta (ln32),y
   979 637A 91 42			sta (ln33),y
   980 637C A9 02			lda #$02
   981 637E 91 04			sta (ln2),y
   982 6380 91 4A			sta (ln37),y
   983 6382 A9 05			lda #$05
   984 6384 91 44			sta (ln34),y
   985 6386 A9 14			lda #$14
   986 6388 91 46			sta (ln35),y
   987 638A				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 638A 98				tya
     2 638B 69 08			adc #8
     3 638D A8				tay
Source: kula0.asm
   988 638E B1 0C			lda (ln6),y
   989 6390 29 03			and #$03
   990 6392 09 08			ora #$08
   991 6394 91 0C			sta (ln6),y
   992 6396 B1 0E			lda (ln7),y
   993 6398 29 03			and #$03
   994 639A 09 08			ora #$08
   995 639C 91 0E			sta (ln7),y
   996 639E B1 08			lda (ln4),y
   997 63A0 29 0F			and #$0F
   998 63A2 09 20			ora #$20
   999 63A4 91 08			sta (ln4),y
  1000 63A6 B1 0A			lda (ln5),y
  1001 63A8 29 0F			and #$0F
  1002 63AA 09 20			ora #$20
  1003 63AC 91 0A			sta (ln5),y
  1004 63AE B1 44			lda (ln34),y
  1005 63B0 29 0F			and #$0F
  1006 63B2 09 20			ora #$20
  1007 63B4 91 44			sta (ln34),y
  1008 63B6 B1 46			lda (ln35),y
  1009 63B8 29 0F			and #$0F
  1010 63BA 09 20			ora #$20
  1011 63BC 91 46			sta (ln35),y
  1012 63BE B1 40			lda (ln32),y
  1013 63C0 29 03			and #$03
  1014 63C2 09 48			ora #$48
  1015 63C4 91 40			sta (ln32),y
  1016 63C6 B1 42			lda (ln33),y
  1017 63C8 29 03			and #$03
  1018 63CA 09 48			ora #$48
  1019 63CC 91 42			sta (ln33),y
  1020 63CE B1 06			lda (ln3),y
  1021 63D0 29 3F			and #$3F
  1022 63D2 09 80			ora #$80
  1023 63D4 91 06			sta (ln3),y
  1024 63D6 B1 48			lda (ln36),y
  1025 63D8 29 3F			and #$3F
  1026 63DA 09 80			ora #$80
  1027 63DC 91 48			sta (ln36),y
  1028 63DE A9 00			lda #$00
  1029 63E0 91 16			sta (ln11),y
  1030 63E2 91 18			sta (ln12),y
  1031 63E4 91 1A			sta (ln13),y
  1032 63E6 91 1C			sta (ln14),y
  1033 63E8 91 1E			sta (ln15),y
  1034 63EA 91 20			sta (ln16),y
  1035 63EC 91 22			sta (ln17),y
  1036 63EE 91 24			sta (ln18),y
  1037 63F0 91 26			sta (ln19),y
  1038 63F2 91 28			sta (ln20),y
  1039 63F4 91 2A			sta (ln21),y
  1040 63F6 91 2C			sta (ln22),y
  1041 63F8 91 2E			sta (ln23),y
  1042 63FA 91 30			sta (ln24),y
  1043 63FC 91 32			sta (ln25),y
  1044 63FE A9 02			lda #$02
  1045 6400 91 10			sta (ln8),y
  1046 6402 91 12			sta (ln9),y
  1047 6404 91 14			sta (ln10),y
  1048 6406 A9 04			lda #$04
  1049 6408 91 34			sta (ln26),y
  1050 640A 91 36			sta (ln27),y
  1051 640C 91 38			sta (ln28),y
  1052 640E A9 52			lda #$52
  1053 6410 91 3A			sta (ln29),y
  1054 6412 91 3C			sta (ln30),y
  1055 6414 91 3E			sta (ln31),y
  1056 6416				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 6416 98				tya
     2 6417 69 08			adc #8
     3 6419 A8				tay
Source: kula0.asm
  1057 641A B1 20			lda (ln16),y
  1058 641C 29 0F			and #$0F
  1059 641E 09 20			ora #$20
  1060 6420 91 20			sta (ln16),y
  1061 6422 B1 22			lda (ln17),y
  1062 6424 29 0F			and #$0F
  1063 6426 09 20			ora #$20
  1064 6428 91 22			sta (ln17),y
  1065 642A B1 24			lda (ln18),y
  1066 642C 29 0F			and #$0F
  1067 642E 09 20			ora #$20
  1068 6430 91 24			sta (ln18),y
  1069 6432 B1 26			lda (ln19),y
  1070 6434 29 0F			and #$0F
  1071 6436 09 20			ora #$20
  1072 6438 91 26			sta (ln19),y
  1073 643A B1 28			lda (ln20),y
  1074 643C 29 0F			and #$0F
  1075 643E 09 20			ora #$20
  1076 6440 91 28			sta (ln20),y
  1077 6442 B1 2A			lda (ln21),y
  1078 6444 29 0F			and #$0F
  1079 6446 09 20			ora #$20
  1080 6448 91 2A			sta (ln21),y
  1081 644A B1 2C			lda (ln22),y
  1082 644C 29 0F			and #$0F
  1083 644E 09 20			ora #$20
  1084 6450 91 2C			sta (ln22),y
  1085 6452 B1 2E			lda (ln23),y
  1086 6454 29 0F			and #$0F
  1087 6456 09 20			ora #$20
  1088 6458 91 2E			sta (ln23),y
  1089 645A B1 16			lda (ln11),y
  1090 645C 29 3F			and #$3F
  1091 645E 09 80			ora #$80
  1092 6460 91 16			sta (ln11),y
  1093 6462 B1 18			lda (ln12),y
  1094 6464 29 3F			and #$3F
  1095 6466 09 80			ora #$80
  1096 6468 91 18			sta (ln12),y
  1097 646A B1 1A			lda (ln13),y
  1098 646C 29 3F			and #$3F
  1099 646E 09 80			ora #$80
  1100 6470 91 1A			sta (ln13),y
  1101 6472 B1 1C			lda (ln14),y
  1102 6474 29 3F			and #$3F
  1103 6476 09 80			ora #$80
  1104 6478 91 1C			sta (ln14),y
  1105 647A B1 1E			lda (ln15),y
  1106 647C 29 3F			and #$3F
  1107 647E 09 80			ora #$80
  1108 6480 91 1E			sta (ln15),y
  1109 6482 B1 30			lda (ln24),y
  1110 6484 29 3F			and #$3F
  1111 6486 09 80			ora #$80
  1112 6488 91 30			sta (ln24),y
  1113 648A B1 32			lda (ln25),y
  1114 648C 29 3F			and #$3F
  1115 648E 09 80			ora #$80
  1116 6490 91 32			sta (ln25),y
  1117 6492 B1 34			lda (ln26),y
  1118 6494 29 3F			and #$3F
  1119 6496 09 80			ora #$80
  1120 6498 91 34			sta (ln26),y
  1121 649A B1 36			lda (ln27),y
  1122 649C 29 3F			and #$3F
  1123 649E 09 80			ora #$80
  1124 64A0 91 36			sta (ln27),y
  1125 64A2 B1 38			lda (ln28),y
  1126 64A4 29 3F			and #$3F
  1127 64A6 09 80			ora #$80
  1128 64A8 91 38			sta (ln28),y
  1129 64AA 4C 14 3D			jmp BALL.MINMAX
  1130 64AD			_3
  1131 64AD B1 20			lda (ln16),y
  1132 64AF 29 FC			and #$FC
  1133 64B1 09 02			ora #$02
  1134 64B3 91 20			sta (ln16),y
  1135 64B5 B1 22			lda (ln17),y
  1136 64B7 29 FC			and #$FC
  1137 64B9 09 02			ora #$02
  1138 64BB 91 22			sta (ln17),y
  1139 64BD B1 24			lda (ln18),y
  1140 64BF 29 FC			and #$FC
  1141 64C1 09 02			ora #$02
  1142 64C3 91 24			sta (ln18),y
  1143 64C5 B1 26			lda (ln19),y
  1144 64C7 29 FC			and #$FC
  1145 64C9 09 02			ora #$02
  1146 64CB 91 26			sta (ln19),y
  1147 64CD B1 28			lda (ln20),y
  1148 64CF 29 FC			and #$FC
  1149 64D1 09 02			ora #$02
  1150 64D3 91 28			sta (ln20),y
  1151 64D5 B1 2A			lda (ln21),y
  1152 64D7 29 FC			and #$FC
  1153 64D9 09 02			ora #$02
  1154 64DB 91 2A			sta (ln21),y
  1155 64DD B1 2C			lda (ln22),y
  1156 64DF 29 FC			and #$FC
  1157 64E1 09 02			ora #$02
  1158 64E3 91 2C			sta (ln22),y
  1159 64E5 B1 2E			lda (ln23),y
  1160 64E7 29 FC			and #$FC
  1161 64E9 09 02			ora #$02
  1162 64EB 91 2E			sta (ln23),y
  1163 64ED				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 64ED 98				tya
     2 64EE 69 08			adc #8
     3 64F0 A8				tay
Source: kula0.asm
  1164 64F1 B1 10			lda (ln8),y
  1165 64F3 29 C0			and #$C0
  1166 64F5 09 20			ora #$20
  1167 64F7 91 10			sta (ln8),y
  1168 64F9 B1 3A			lda (ln29),y
  1169 64FB 29 C0			and #$C0
  1170 64FD 09 20			ora #$20
  1171 64FF 91 3A			sta (ln29),y
  1172 6501 B1 3C			lda (ln30),y
  1173 6503 29 C0			and #$C0
  1174 6505 09 20			ora #$20
  1175 6507 91 3C			sta (ln30),y
  1176 6509 B1 3E			lda (ln31),y
  1177 650B 29 C0			and #$C0
  1178 650D 09 20			ora #$20
  1179 650F 91 3E			sta (ln31),y
  1180 6511 B1 12			lda (ln9),y
  1181 6513 29 C0			and #$C0
  1182 6515 09 21			ora #$21
  1183 6517 91 12			sta (ln9),y
  1184 6519 B1 14			lda (ln10),y
  1185 651B 29 C0			and #$C0
  1186 651D 09 21			ora #$21
  1187 651F 91 14			sta (ln10),y
  1188 6521 B1 0C			lda (ln6),y
  1189 6523 29 F0			and #$F0
  1190 6525 09 08			ora #$08
  1191 6527 91 0C			sta (ln6),y
  1192 6529 B1 0E			lda (ln7),y
  1193 652B 29 F0			and #$F0
  1194 652D 09 08			ora #$08
  1195 652F 91 0E			sta (ln7),y
  1196 6531 B1 40			lda (ln32),y
  1197 6533 29 F0			and #$F0
  1198 6535 09 08			ora #$08
  1199 6537 91 40			sta (ln32),y
  1200 6539 B1 42			lda (ln33),y
  1201 653B 29 F0			and #$F0
  1202 653D 09 08			ora #$08
  1203 653F 91 42			sta (ln33),y
  1204 6541 B1 08			lda (ln4),y
  1205 6543 29 FC			and #$FC
  1206 6545 09 02			ora #$02
  1207 6547 91 08			sta (ln4),y
  1208 6549 B1 0A			lda (ln5),y
  1209 654B 29 FC			and #$FC
  1210 654D 09 02			ora #$02
  1211 654F 91 0A			sta (ln5),y
  1212 6551 B1 44			lda (ln34),y
  1213 6553 29 FC			and #$FC
  1214 6555 09 02			ora #$02
  1215 6557 91 44			sta (ln34),y
  1216 6559 B1 46			lda (ln35),y
  1217 655B 29 FC			and #$FC
  1218 655D 09 02			ora #$02
  1219 655F 91 46			sta (ln35),y
  1220 6561 A9 00			lda #$00
  1221 6563 91 2A			sta (ln21),y
  1222 6565 91 2C			sta (ln22),y
  1223 6567 91 2E			sta (ln23),y
  1224 6569 A9 04			lda #$04
  1225 656B 91 28			sta (ln20),y
  1226 656D A9 14			lda #$14
  1227 656F 91 20			sta (ln16),y
  1228 6571 91 24			sta (ln18),y
  1229 6573 91 26			sta (ln19),y
  1230 6575 A9 15			lda #$15
  1231 6577 91 22			sta (ln17),y
  1232 6579 A9 80			lda #$80
  1233 657B 91 30			sta (ln24),y
  1234 657D 91 32			sta (ln25),y
  1235 657F 91 34			sta (ln26),y
  1236 6581 91 36			sta (ln27),y
  1237 6583 91 38			sta (ln28),y
  1238 6585 A9 85			lda #$85
  1239 6587 91 16			sta (ln11),y
  1240 6589 91 18			sta (ln12),y
  1241 658B 91 1A			sta (ln13),y
  1242 658D 91 1E			sta (ln15),y
  1243 658F A9 95			lda #$95
  1244 6591 91 1C			sta (ln14),y
  1245 6593				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 6593 98				tya
     2 6594 69 08			adc #8
     3 6596 A8				tay
Source: kula0.asm
  1246 6597 B1 04			lda (ln2),y
  1247 6599 29 C0			and #$C0
  1248 659B 09 20			ora #$20
  1249 659D 91 04			sta (ln2),y
  1250 659F B1 4A			lda (ln37),y
  1251 65A1 29 C0			and #$C0
  1252 65A3 09 20			ora #$20
  1253 65A5 91 4A			sta (ln37),y
  1254 65A7 B1 02			lda (ln1),y
  1255 65A9 29 F0			and #$F0
  1256 65AB 09 0A			ora #$0A
  1257 65AD 91 02			sta (ln1),y
  1258 65AF B1 4C			lda (ln38),y
  1259 65B1 29 F0			and #$F0
  1260 65B3 09 0A			ora #$0A
  1261 65B5 91 4C			sta (ln38),y
  1262 65B7 A9 00			lda #$00
  1263 65B9 91 1A			sta (ln13),y
  1264 65BB 91 1C			sta (ln14),y
  1265 65BD 91 1E			sta (ln15),y
  1266 65BF 91 20			sta (ln16),y
  1267 65C1 91 22			sta (ln17),y
  1268 65C3 91 24			sta (ln18),y
  1269 65C5 91 26			sta (ln19),y
  1270 65C7 91 28			sta (ln20),y
  1271 65C9 91 2A			sta (ln21),y
  1272 65CB 91 2C			sta (ln22),y
  1273 65CD 91 2E			sta (ln23),y
  1274 65CF 91 30			sta (ln24),y
  1275 65D1 91 32			sta (ln25),y
  1276 65D3 91 34			sta (ln26),y
  1277 65D5 91 36			sta (ln27),y
  1278 65D7 91 38			sta (ln28),y
  1279 65D9 91 3A			sta (ln29),y
  1280 65DB 91 3C			sta (ln30),y
  1281 65DD 91 3E			sta (ln31),y
  1282 65DF 91 40			sta (ln32),y
  1283 65E1 91 42			sta (ln33),y
  1284 65E3 91 44			sta (ln34),y
  1285 65E5 91 46			sta (ln35),y
  1286 65E7 A9 04			lda #$04
  1287 65E9 91 08			sta (ln4),y
  1288 65EB A9 15			lda #$15
  1289 65ED 91 0A			sta (ln5),y
  1290 65EF 91 0C			sta (ln6),y
  1291 65F1 A9 40			lda #$40
  1292 65F3 91 14			sta (ln10),y
  1293 65F5 91 16			sta (ln11),y
  1294 65F7 91 18			sta (ln12),y
  1295 65F9 A9 50			lda #$50
  1296 65FB 91 10			sta (ln8),y
  1297 65FD 91 12			sta (ln9),y
  1298 65FF A9 54			lda #$54
  1299 6601 91 0E			sta (ln7),y
  1300 6603 A9 80			lda #$80
  1301 6605 91 06			sta (ln3),y
  1302 6607 91 48			sta (ln36),y
  1303 6609				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 6609 98				tya
     2 660A 69 08			adc #8
     3 660C A8				tay
Source: kula0.asm
  1304 660D A9 00			lda #$00
  1305 660F 91 04			sta (ln2),y
  1306 6611 91 06			sta (ln3),y
  1307 6613 91 08			sta (ln4),y
  1308 6615 91 0A			sta (ln5),y
  1309 6617 91 0C			sta (ln6),y
  1310 6619 91 0E			sta (ln7),y
  1311 661B 91 10			sta (ln8),y
  1312 661D 91 12			sta (ln9),y
  1313 661F 91 14			sta (ln10),y
  1314 6621 91 16			sta (ln11),y
  1315 6623 91 18			sta (ln12),y
  1316 6625 91 1A			sta (ln13),y
  1317 6627 91 1C			sta (ln14),y
  1318 6629 91 1E			sta (ln15),y
  1319 662B 91 20			sta (ln16),y
  1320 662D 91 22			sta (ln17),y
  1321 662F 91 24			sta (ln18),y
  1322 6631 91 26			sta (ln19),y
  1323 6633 91 28			sta (ln20),y
  1324 6635 91 2A			sta (ln21),y
  1325 6637 91 2C			sta (ln22),y
  1326 6639 91 2E			sta (ln23),y
  1327 663B 91 30			sta (ln24),y
  1328 663D 91 32			sta (ln25),y
  1329 663F 91 34			sta (ln26),y
  1330 6641 91 36			sta (ln27),y
  1331 6643 91 38			sta (ln28),y
  1332 6645 91 3A			sta (ln29),y
  1333 6647 91 3C			sta (ln30),y
  1334 6649 91 3E			sta (ln31),y
  1335 664B 91 40			sta (ln32),y
  1336 664D 91 42			sta (ln33),y
  1337 664F 91 48			sta (ln36),y
  1338 6651 91 4A			sta (ln37),y
  1339 6653 A9 01			lda #$01
  1340 6655 91 44			sta (ln34),y
  1341 6657 A9 05			lda #$05
  1342 6659 91 46			sta (ln35),y
  1343 665B A9 AA			lda #$AA
  1344 665D 91 02			sta (ln1),y
  1345 665F 91 4C			sta (ln38),y
  1346 6661				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 6661 98				tya
     2 6662 69 08			adc #8
     3 6664 A8				tay
Source: kula0.asm
  1347 6665 B1 08			lda (ln4),y
  1348 6667 29 03			and #$03
  1349 6669 09 08			ora #$08
  1350 666B 91 08			sta (ln4),y
  1351 666D B1 0A			lda (ln5),y
  1352 666F 29 03			and #$03
  1353 6671 09 08			ora #$08
  1354 6673 91 0A			sta (ln5),y
  1355 6675 B1 46			lda (ln35),y
  1356 6677 29 03			and #$03
  1357 6679 09 08			ora #$08
  1358 667B 91 46			sta (ln35),y
  1359 667D B1 06			lda (ln3),y
  1360 667F 29 0F			and #$0F
  1361 6681 09 20			ora #$20
  1362 6683 91 06			sta (ln3),y
  1363 6685 B1 48			lda (ln36),y
  1364 6687 29 0F			and #$0F
  1365 6689 09 20			ora #$20
  1366 668B 91 48			sta (ln36),y
  1367 668D B1 44			lda (ln34),y
  1368 668F 29 03			and #$03
  1369 6691 09 48			ora #$48
  1370 6693 91 44			sta (ln34),y
  1371 6695 B1 04			lda (ln2),y
  1372 6697 29 3F			and #$3F
  1373 6699 09 80			ora #$80
  1374 669B 91 04			sta (ln2),y
  1375 669D B1 4A			lda (ln37),y
  1376 669F 29 3F			and #$3F
  1377 66A1 09 80			ora #$80
  1378 66A3 91 4A			sta (ln37),y
  1379 66A5 A9 00			lda #$00
  1380 66A7 91 10			sta (ln8),y
  1381 66A9 91 12			sta (ln9),y
  1382 66AB 91 14			sta (ln10),y
  1383 66AD 91 16			sta (ln11),y
  1384 66AF 91 18			sta (ln12),y
  1385 66B1 91 1A			sta (ln13),y
  1386 66B3 91 1C			sta (ln14),y
  1387 66B5 91 1E			sta (ln15),y
  1388 66B7 91 20			sta (ln16),y
  1389 66B9 91 22			sta (ln17),y
  1390 66BB 91 24			sta (ln18),y
  1391 66BD 91 26			sta (ln19),y
  1392 66BF 91 28			sta (ln20),y
  1393 66C1 91 2A			sta (ln21),y
  1394 66C3 91 2C			sta (ln22),y
  1395 66C5 91 2E			sta (ln23),y
  1396 66C7 91 30			sta (ln24),y
  1397 66C9 91 32			sta (ln25),y
  1398 66CB A9 01			lda #$01
  1399 66CD 91 34			sta (ln26),y
  1400 66CF 91 36			sta (ln27),y
  1401 66D1 91 38			sta (ln28),y
  1402 66D3 A9 02			lda #$02
  1403 66D5 91 0C			sta (ln6),y
  1404 66D7 91 0E			sta (ln7),y
  1405 66D9 A9 14			lda #$14
  1406 66DB 91 3A			sta (ln29),y
  1407 66DD A9 52			lda #$52
  1408 66DF 91 40			sta (ln32),y
  1409 66E1 91 42			sta (ln33),y
  1410 66E3 A9 54			lda #$54
  1411 66E5 91 3C			sta (ln30),y
  1412 66E7 91 3E			sta (ln31),y
  1413 66E9				@@INC inck0
Macro: @@INC [Source: pang_chars.asm]
     1 66E9 98				tya
     2 66EA 69 08			adc #8
     3 66EC A8				tay
Source: kula0.asm
  1414 66ED B1 20			lda (ln16),y
  1415 66EF 29 03			and #$03
  1416 66F1 09 08			ora #$08
  1417 66F3 91 20			sta (ln16),y
  1418 66F5 B1 22			lda (ln17),y
  1419 66F7 29 03			and #$03
  1420 66F9 09 08			ora #$08
  1421 66FB 91 22			sta (ln17),y
  1422 66FD B1 24			lda (ln18),y
  1423 66FF 29 03			and #$03
  1424 6701 09 08			ora #$08
  1425 6703 91 24			sta (ln18),y
  1426 6705 B1 26			lda (ln19),y
  1427 6707 29 03			and #$03
  1428 6709 09 08			ora #$08
  1429 670B 91 26			sta (ln19),y
  1430 670D B1 28			lda (ln20),y
  1431 670F 29 03			and #$03
  1432 6711 09 08			ora #$08
  1433 6713 91 28			sta (ln20),y
  1434 6715 B1 2A			lda (ln21),y
  1435 6717 29 03			and #$03
  1436 6719 09 08			ora #$08
  1437 671B 91 2A			sta (ln21),y
  1438 671D B1 2C			lda (ln22),y
  1439 671F 29 03			and #$03
  1440 6721 09 08			ora #$08
  1441 6723 91 2C			sta (ln22),y
  1442 6725 B1 2E			lda (ln23),y
  1443 6727 29 03			and #$03
  1444 6729 09 08			ora #$08
  1445 672B 91 2E			sta (ln23),y
  1446 672D B1 16			lda (ln11),y
  1447 672F 29 0F			and #$0F
  1448 6731 09 20			ora #$20
  1449 6733 91 16			sta (ln11),y
  1450 6735 B1 18			lda (ln12),y
  1451 6737 29 0F			and #$0F
  1452 6739 09 20			ora #$20
  1453 673B 91 18			sta (ln12),y
  1454 673D B1 1A			lda (ln13),y
  1455 673F 29 0F			and #$0F
  1456 6741 09 20			ora #$20
  1457 6743 91 1A			sta (ln13),y
  1458 6745 B1 1C			lda (ln14),y
  1459 6747 29 0F			and #$0F
  1460 6749 09 20			ora #$20
  1461 674B 91 1C			sta (ln14),y
  1462 674D B1 1E			lda (ln15),y
  1463 674F 29 0F			and #$0F
  1464 6751 09 20			ora #$20
  1465 6753 91 1E			sta (ln15),y
  1466 6755 B1 30			lda (ln24),y
  1467 6757 29 0F			and #$0F
  1468 6759 09 20			ora #$20
  1469 675B 91 30			sta (ln24),y
  1470 675D B1 32			lda (ln25),y
  1471 675F 29 0F			and #$0F
  1472 6761 09 20			ora #$20
  1473 6763 91 32			sta (ln25),y
  1474 6765 B1 34			lda (ln26),y
  1475 6767 29 0F			and #$0F
  1476 6769 09 20			ora #$20
  1477 676B 91 34			sta (ln26),y
  1478 676D B1 36			lda (ln27),y
  1479 676F 29 0F			and #$0F
  1480 6771 09 20			ora #$20
  1481 6773 91 36			sta (ln27),y
  1482 6775 B1 38			lda (ln28),y
  1483 6777 29 0F			and #$0F
  1484 6779 09 20			ora #$20
  1485 677B 91 38			sta (ln28),y
  1486 677D B1 10			lda (ln8),y
  1487 677F 29 3F			and #$3F
  1488 6781 09 80			ora #$80
  1489 6783 91 10			sta (ln8),y
  1490 6785 B1 12			lda (ln9),y
  1491 6787 29 3F			and #$3F
  1492 6789 09 80			ora #$80
  1493 678B 91 12			sta (ln9),y
  1494 678D B1 14			lda (ln10),y
  1495 678F 29 3F			and #$3F
  1496 6791 09 80			ora #$80
  1497 6793 91 14			sta (ln10),y
  1498 6795 B1 3A			lda (ln29),y
  1499 6797 29 3F			and #$3F
  1500 6799 09 80			ora #$80
  1501 679B 91 3A			sta (ln29),y
  1502 679D B1 3C			lda (ln30),y
  1503 679F 29 3F			and #$3F
  1504 67A1 09 80			ora #$80
  1505 67A3 91 3C			sta (ln30),y
  1506 67A5 B1 3E			lda (ln31),y
  1507 67A7 29 3F			and #$3F
  1508 67A9 09 80			ora #$80
  1509 67AB 91 3E			sta (ln31),y
  1510 67AD 4C 14 3D			jmp BALL.MINMAX
  1511 				.end
  1365 67B0				icl '_PC\asm-kule_2\kula1.asm'
Source: kula1.asm
     1 67B0			.local	k1
     2 67B0			_0
     3 67B0 B1 28			lda (ln20),y
     4 67B2 29 C0			and #$C0
     5 67B4 09 20			ora #$20
     6 67B6 91 28			sta (ln20),y
     7 67B8 B1 2A			lda (ln21),y
     8 67BA 29 C0			and #$C0
     9 67BC 09 20			ora #$20
    10 67BE 91 2A			sta (ln21),y
    11 67C0 B1 2C			lda (ln22),y
    12 67C2 29 C0			and #$C0
    13 67C4 09 20			ora #$20
    14 67C6 91 2C			sta (ln22),y
    15 67C8 B1 2E			lda (ln23),y
    16 67CA 29 C0			and #$C0
    17 67CC 09 20			ora #$20
    18 67CE 91 2E			sta (ln23),y
    19 67D0 B1 10			lda (ln8),y
    20 67D2 29 C0			and #$C0
    21 67D4 09 21			ora #$21
    22 67D6 91 10			sta (ln8),y
    23 67D8 B1 12			lda (ln9),y
    24 67DA 29 C0			and #$C0
    25 67DC 09 21			ora #$21
    26 67DE 91 12			sta (ln9),y
    27 67E0 B1 14			lda (ln10),y
    28 67E2 29 C0			and #$C0
    29 67E4 09 21			ora #$21
    30 67E6 91 14			sta (ln10),y
    31 67E8 B1 16			lda (ln11),y
    32 67EA 29 C0			and #$C0
    33 67EC 09 21			ora #$21
    34 67EE 91 16			sta (ln11),y
    35 67F0 B1 0C			lda (ln6),y
    36 67F2 29 F0			and #$F0
    37 67F4 09 08			ora #$08
    38 67F6 91 0C			sta (ln6),y
    39 67F8 B1 0E			lda (ln7),y
    40 67FA 29 F0			and #$F0
    41 67FC 09 08			ora #$08
    42 67FE 91 0E			sta (ln7),y
    43 6800 B1 30			lda (ln24),y
    44 6802 29 F0			and #$F0
    45 6804 09 08			ora #$08
    46 6806 91 30			sta (ln24),y
    47 6808 B1 32			lda (ln25),y
    48 680A 29 F0			and #$F0
    49 680C 09 08			ora #$08
    50 680E 91 32			sta (ln25),y
    51 6810 B1 08			lda (ln4),y
    52 6812 29 FC			and #$FC
    53 6814 09 02			ora #$02
    54 6816 91 08			sta (ln4),y
    55 6818 B1 0A			lda (ln5),y
    56 681A 29 FC			and #$FC
    57 681C 09 02			ora #$02
    58 681E 91 0A			sta (ln5),y
    59 6820 B1 34			lda (ln26),y
    60 6822 29 FC			and #$FC
    61 6824 09 02			ora #$02
    62 6826 91 34			sta (ln26),y
    63 6828 B1 36			lda (ln27),y
    64 682A 29 FC			and #$FC
    65 682C 09 02			ora #$02
    66 682E 91 36			sta (ln27),y
    67 6830 A9 80			lda #$80
    68 6832 91 20			sta (ln16),y
    69 6834 91 22			sta (ln17),y
    70 6836 91 24			sta (ln18),y
    71 6838 91 26			sta (ln19),y
    72 683A A9 85			lda #$85
    73 683C 91 18			sta (ln12),y
    74 683E 91 1A			sta (ln13),y
    75 6840 91 1C			sta (ln14),y
    76 6842 91 1E			sta (ln15),y
    77 6844				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6844 98				tya
     2 6845 69 08			adc #8
     3 6847 A8				tay
Source: kula1.asm
    78 6848 B1 04			lda (ln2),y
    79 684A 29 C0			and #$C0
    80 684C 09 20			ora #$20
    81 684E 91 04			sta (ln2),y
    82 6850 B1 3A			lda (ln29),y
    83 6852 29 C0			and #$C0
    84 6854 09 20			ora #$20
    85 6856 91 3A			sta (ln29),y
    86 6858 B1 02			lda (ln1),y
    87 685A 29 F0			and #$F0
    88 685C 09 0A			ora #$0A
    89 685E 91 02			sta (ln1),y
    90 6860 B1 3C			lda (ln30),y
    91 6862 29 F0			and #$F0
    92 6864 09 0A			ora #$0A
    93 6866 91 3C			sta (ln30),y
    94 6868 A9 00			lda #$00
    95 686A 91 08			sta (ln4),y
    96 686C 91 16			sta (ln11),y
    97 686E 91 1A			sta (ln13),y
    98 6870 91 1C			sta (ln14),y
    99 6872 91 1E			sta (ln15),y
   100 6874 91 20			sta (ln16),y
   101 6876 91 22			sta (ln17),y
   102 6878 91 24			sta (ln18),y
   103 687A 91 26			sta (ln19),y
   104 687C 91 28			sta (ln20),y
   105 687E 91 2A			sta (ln21),y
   106 6880 91 2C			sta (ln22),y
   107 6882 91 2E			sta (ln23),y
   108 6884 91 30			sta (ln24),y
   109 6886 91 32			sta (ln25),y
   110 6888 91 34			sta (ln26),y
   111 688A 91 36			sta (ln27),y
   112 688C A9 10			lda #$10
   113 688E 91 0A			sta (ln5),y
   114 6890 A9 40			lda #$40
   115 6892 91 10			sta (ln8),y
   116 6894 91 12			sta (ln9),y
   117 6896 91 14			sta (ln10),y
   118 6898 91 18			sta (ln12),y
   119 689A A9 50			lda #$50
   120 689C 91 0E			sta (ln7),y
   121 689E A9 54			lda #$54
   122 68A0 91 0C			sta (ln6),y
   123 68A2 A9 80			lda #$80
   124 68A4 91 06			sta (ln3),y
   125 68A6 91 38			sta (ln28),y
   126 68A8				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 68A8 98				tya
     2 68A9 69 08			adc #8
     3 68AB A8				tay
Source: kula1.asm
   127 68AC B1 04			lda (ln2),y
   128 68AE 29 03			and #$03
   129 68B0 09 08			ora #$08
   130 68B2 91 04			sta (ln2),y
   131 68B4 B1 3A			lda (ln29),y
   132 68B6 29 03			and #$03
   133 68B8 09 08			ora #$08
   134 68BA 91 3A			sta (ln29),y
   135 68BC B1 02			lda (ln1),y
   136 68BE 29 0F			and #$0F
   137 68C0 09 A0			ora #$A0
   138 68C2 91 02			sta (ln1),y
   139 68C4 B1 3C			lda (ln30),y
   140 68C6 29 0F			and #$0F
   141 68C8 09 A0			ora #$A0
   142 68CA 91 3C			sta (ln30),y
   143 68CC A9 00			lda #$00
   144 68CE 91 08			sta (ln4),y
   145 68D0 91 0A			sta (ln5),y
   146 68D2 91 0C			sta (ln6),y
   147 68D4 91 0E			sta (ln7),y
   148 68D6 91 10			sta (ln8),y
   149 68D8 91 12			sta (ln9),y
   150 68DA 91 14			sta (ln10),y
   151 68DC 91 16			sta (ln11),y
   152 68DE 91 18			sta (ln12),y
   153 68E0 91 1A			sta (ln13),y
   154 68E2 91 1C			sta (ln14),y
   155 68E4 91 1E			sta (ln15),y
   156 68E6 91 20			sta (ln16),y
   157 68E8 91 22			sta (ln17),y
   158 68EA 91 24			sta (ln18),y
   159 68EC 91 26			sta (ln19),y
   160 68EE 91 28			sta (ln20),y
   161 68F0 91 2A			sta (ln21),y
   162 68F2 91 2C			sta (ln22),y
   163 68F4 A9 01			lda #$01
   164 68F6 91 2E			sta (ln23),y
   165 68F8 A9 02			lda #$02
   166 68FA 91 06			sta (ln3),y
   167 68FC 91 38			sta (ln28),y
   168 68FE A9 04			lda #$04
   169 6900 91 34			sta (ln26),y
   170 6902 A9 05			lda #$05
   171 6904 91 30			sta (ln24),y
   172 6906 91 32			sta (ln25),y
   173 6908 A9 10			lda #$10
   174 690A 91 36			sta (ln27),y
   175 690C				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 690C 98				tya
     2 690D 69 08			adc #8
     3 690F A8				tay
Source: kula1.asm
   176 6910 B1 10			lda (ln8),y
   177 6912 29 03			and #$03
   178 6914 09 08			ora #$08
   179 6916 91 10			sta (ln8),y
   180 6918 B1 12			lda (ln9),y
   181 691A 29 03			and #$03
   182 691C 09 08			ora #$08
   183 691E 91 12			sta (ln9),y
   184 6920 B1 14			lda (ln10),y
   185 6922 29 03			and #$03
   186 6924 09 08			ora #$08
   187 6926 91 14			sta (ln10),y
   188 6928 B1 16			lda (ln11),y
   189 692A 29 03			and #$03
   190 692C 09 08			ora #$08
   191 692E 91 16			sta (ln11),y
   192 6930 B1 28			lda (ln20),y
   193 6932 29 03			and #$03
   194 6934 09 08			ora #$08
   195 6936 91 28			sta (ln20),y
   196 6938 B1 0C			lda (ln6),y
   197 693A 29 0F			and #$0F
   198 693C 09 20			ora #$20
   199 693E 91 0C			sta (ln6),y
   200 6940 B1 0E			lda (ln7),y
   201 6942 29 0F			and #$0F
   202 6944 09 20			ora #$20
   203 6946 91 0E			sta (ln7),y
   204 6948 B1 30			lda (ln24),y
   205 694A 29 0F			and #$0F
   206 694C 09 20			ora #$20
   207 694E 91 30			sta (ln24),y
   208 6950 B1 32			lda (ln25),y
   209 6952 29 0F			and #$0F
   210 6954 09 20			ora #$20
   211 6956 91 32			sta (ln25),y
   212 6958 B1 2A			lda (ln21),y
   213 695A 29 03			and #$03
   214 695C 09 48			ora #$48
   215 695E 91 2A			sta (ln21),y
   216 6960 B1 2C			lda (ln22),y
   217 6962 29 03			and #$03
   218 6964 09 48			ora #$48
   219 6966 91 2C			sta (ln22),y
   220 6968 B1 2E			lda (ln23),y
   221 696A 29 03			and #$03
   222 696C 09 48			ora #$48
   223 696E 91 2E			sta (ln23),y
   224 6970 B1 08			lda (ln4),y
   225 6972 29 3F			and #$3F
   226 6974 09 80			ora #$80
   227 6976 91 08			sta (ln4),y
   228 6978 B1 0A			lda (ln5),y
   229 697A 29 3F			and #$3F
   230 697C 09 80			ora #$80
   231 697E 91 0A			sta (ln5),y
   232 6980 B1 34			lda (ln26),y
   233 6982 29 3F			and #$3F
   234 6984 09 80			ora #$80
   235 6986 91 34			sta (ln26),y
   236 6988 B1 36			lda (ln27),y
   237 698A 29 3F			and #$3F
   238 698C 09 80			ora #$80
   239 698E 91 36			sta (ln27),y
   240 6990 A9 02			lda #$02
   241 6992 91 18			sta (ln12),y
   242 6994 91 1A			sta (ln13),y
   243 6996 91 1C			sta (ln14),y
   244 6998 91 1E			sta (ln15),y
   245 699A 91 20			sta (ln16),y
   246 699C 91 22			sta (ln17),y
   247 699E 91 24			sta (ln18),y
   248 69A0 91 26			sta (ln19),y
   249 69A2 4C 14 3D			jmp BALL.MINMAX
   250 69A5			_1
   251 69A5 B1 20			lda (ln16),y
   252 69A7 29 C0			and #$C0
   253 69A9 09 20			ora #$20
   254 69AB 91 20			sta (ln16),y
   255 69AD B1 22			lda (ln17),y
   256 69AF 29 C0			and #$C0
   257 69B1 09 20			ora #$20
   258 69B3 91 22			sta (ln17),y
   259 69B5 B1 24			lda (ln18),y
   260 69B7 29 C0			and #$C0
   261 69B9 09 20			ora #$20
   262 69BB 91 24			sta (ln18),y
   263 69BD B1 26			lda (ln19),y
   264 69BF 29 C0			and #$C0
   265 69C1 09 20			ora #$20
   266 69C3 91 26			sta (ln19),y
   267 69C5 B1 18			lda (ln12),y
   268 69C7 29 C0			and #$C0
   269 69C9 09 21			ora #$21
   270 69CB 91 18			sta (ln12),y
   271 69CD B1 1A			lda (ln13),y
   272 69CF 29 C0			and #$C0
   273 69D1 09 21			ora #$21
   274 69D3 91 1A			sta (ln13),y
   275 69D5 B1 1C			lda (ln14),y
   276 69D7 29 C0			and #$C0
   277 69D9 09 21			ora #$21
   278 69DB 91 1C			sta (ln14),y
   279 69DD B1 1E			lda (ln15),y
   280 69DF 29 C0			and #$C0
   281 69E1 09 21			ora #$21
   282 69E3 91 1E			sta (ln15),y
   283 69E5 B1 10			lda (ln8),y
   284 69E7 29 F0			and #$F0
   285 69E9 09 08			ora #$08
   286 69EB 91 10			sta (ln8),y
   287 69ED B1 12			lda (ln9),y
   288 69EF 29 F0			and #$F0
   289 69F1 09 08			ora #$08
   290 69F3 91 12			sta (ln9),y
   291 69F5 B1 14			lda (ln10),y
   292 69F7 29 F0			and #$F0
   293 69F9 09 08			ora #$08
   294 69FB 91 14			sta (ln10),y
   295 69FD B1 16			lda (ln11),y
   296 69FF 29 F0			and #$F0
   297 6A01 09 08			ora #$08
   298 6A03 91 16			sta (ln11),y
   299 6A05 B1 28			lda (ln20),y
   300 6A07 29 F0			and #$F0
   301 6A09 09 08			ora #$08
   302 6A0B 91 28			sta (ln20),y
   303 6A0D B1 2A			lda (ln21),y
   304 6A0F 29 F0			and #$F0
   305 6A11 09 08			ora #$08
   306 6A13 91 2A			sta (ln21),y
   307 6A15 B1 2C			lda (ln22),y
   308 6A17 29 F0			and #$F0
   309 6A19 09 08			ora #$08
   310 6A1B 91 2C			sta (ln22),y
   311 6A1D B1 2E			lda (ln23),y
   312 6A1F 29 F0			and #$F0
   313 6A21 09 08			ora #$08
   314 6A23 91 2E			sta (ln23),y
   315 6A25 B1 0C			lda (ln6),y
   316 6A27 29 FC			and #$FC
   317 6A29 09 02			ora #$02
   318 6A2B 91 0C			sta (ln6),y
   319 6A2D B1 0E			lda (ln7),y
   320 6A2F 29 FC			and #$FC
   321 6A31 09 02			ora #$02
   322 6A33 91 0E			sta (ln7),y
   323 6A35 B1 30			lda (ln24),y
   324 6A37 29 FC			and #$FC
   325 6A39 09 02			ora #$02
   326 6A3B 91 30			sta (ln24),y
   327 6A3D B1 32			lda (ln25),y
   328 6A3F 29 FC			and #$FC
   329 6A41 09 02			ora #$02
   330 6A43 91 32			sta (ln25),y
   331 6A45				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6A45 98				tya
     2 6A46 69 08			adc #8
     3 6A48 A8				tay
Source: kula1.asm
   332 6A49 B1 06			lda (ln3),y
   333 6A4B 29 C0			and #$C0
   334 6A4D 09 20			ora #$20
   335 6A4F 91 06			sta (ln3),y
   336 6A51 B1 38			lda (ln28),y
   337 6A53 29 C0			and #$C0
   338 6A55 09 20			ora #$20
   339 6A57 91 38			sta (ln28),y
   340 6A59 B1 04			lda (ln2),y
   341 6A5B 29 F0			and #$F0
   342 6A5D 09 08			ora #$08
   343 6A5F 91 04			sta (ln2),y
   344 6A61 B1 3A			lda (ln29),y
   345 6A63 29 F0			and #$F0
   346 6A65 09 08			ora #$08
   347 6A67 91 3A			sta (ln29),y
   348 6A69 B1 02			lda (ln1),y
   349 6A6B 29 FC			and #$FC
   350 6A6D 09 02			ora #$02
   351 6A6F 91 02			sta (ln1),y
   352 6A71 B1 3C			lda (ln30),y
   353 6A73 29 FC			and #$FC
   354 6A75 09 02			ora #$02
   355 6A77 91 3C			sta (ln30),y
   356 6A79 A9 00			lda #$00
   357 6A7B 91 20			sta (ln16),y
   358 6A7D 91 22			sta (ln17),y
   359 6A7F 91 24			sta (ln18),y
   360 6A81 91 26			sta (ln19),y
   361 6A83 91 28			sta (ln20),y
   362 6A85 91 2A			sta (ln21),y
   363 6A87 91 2C			sta (ln22),y
   364 6A89 91 2E			sta (ln23),y
   365 6A8B 91 30			sta (ln24),y
   366 6A8D 91 32			sta (ln25),y
   367 6A8F A9 14			lda #$14
   368 6A91 91 0E			sta (ln7),y
   369 6A93 A9 15			lda #$15
   370 6A95 91 0C			sta (ln6),y
   371 6A97 A9 40			lda #$40
   372 6A99 91 16			sta (ln11),y
   373 6A9B 91 1A			sta (ln13),y
   374 6A9D 91 1C			sta (ln14),y
   375 6A9F 91 1E			sta (ln15),y
   376 6AA1 A9 50			lda #$50
   377 6AA3 91 10			sta (ln8),y
   378 6AA5 91 12			sta (ln9),y
   379 6AA7 91 14			sta (ln10),y
   380 6AA9 91 18			sta (ln12),y
   381 6AAB A9 80			lda #$80
   382 6AAD 91 08			sta (ln4),y
   383 6AAF 91 34			sta (ln26),y
   384 6AB1 91 36			sta (ln27),y
   385 6AB3 A9 84			lda #$84
   386 6AB5 91 0A			sta (ln5),y
   387 6AB7				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6AB7 98				tya
     2 6AB8 69 08			adc #8
     3 6ABA A8				tay
Source: kula1.asm
   388 6ABB B1 02			lda (ln1),y
   389 6ABD 29 03			and #$03
   390 6ABF 09 A8			ora #$A8
   391 6AC1 91 02			sta (ln1),y
   392 6AC3 B1 3C			lda (ln30),y
   393 6AC5 29 03			and #$03
   394 6AC7 09 A8			ora #$A8
   395 6AC9 91 3C			sta (ln30),y
   396 6ACB A9 00			lda #$00
   397 6ACD 91 06			sta (ln3),y
   398 6ACF 91 08			sta (ln4),y
   399 6AD1 91 0A			sta (ln5),y
   400 6AD3 91 0C			sta (ln6),y
   401 6AD5 91 0E			sta (ln7),y
   402 6AD7 91 10			sta (ln8),y
   403 6AD9 91 12			sta (ln9),y
   404 6ADB 91 14			sta (ln10),y
   405 6ADD 91 16			sta (ln11),y
   406 6ADF 91 18			sta (ln12),y
   407 6AE1 91 1A			sta (ln13),y
   408 6AE3 91 1C			sta (ln14),y
   409 6AE5 91 1E			sta (ln15),y
   410 6AE7 91 20			sta (ln16),y
   411 6AE9 91 22			sta (ln17),y
   412 6AEB 91 24			sta (ln18),y
   413 6AED 91 26			sta (ln19),y
   414 6AEF 91 28			sta (ln20),y
   415 6AF1 91 2A			sta (ln21),y
   416 6AF3 91 2C			sta (ln22),y
   417 6AF5 91 2E			sta (ln23),y
   418 6AF7 91 38			sta (ln28),y
   419 6AF9 A9 01			lda #$01
   420 6AFB 91 30			sta (ln24),y
   421 6AFD 91 32			sta (ln25),y
   422 6AFF 91 34			sta (ln26),y
   423 6B01 A9 02			lda #$02
   424 6B03 91 04			sta (ln2),y
   425 6B05 91 3A			sta (ln29),y
   426 6B07 A9 04			lda #$04
   427 6B09 91 36			sta (ln27),y
   428 6B0B				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6B0B 98				tya
     2 6B0C 69 08			adc #8
     3 6B0E A8				tay
Source: kula1.asm
   429 6B0F B1 0C			lda (ln6),y
   430 6B11 29 03			and #$03
   431 6B13 09 08			ora #$08
   432 6B15 91 0C			sta (ln6),y
   433 6B17 B1 0E			lda (ln7),y
   434 6B19 29 03			and #$03
   435 6B1B 09 08			ora #$08
   436 6B1D 91 0E			sta (ln7),y
   437 6B1F B1 08			lda (ln4),y
   438 6B21 29 0F			and #$0F
   439 6B23 09 20			ora #$20
   440 6B25 91 08			sta (ln4),y
   441 6B27 B1 0A			lda (ln5),y
   442 6B29 29 0F			and #$0F
   443 6B2B 09 20			ora #$20
   444 6B2D 91 0A			sta (ln5),y
   445 6B2F B1 34			lda (ln26),y
   446 6B31 29 0F			and #$0F
   447 6B33 09 20			ora #$20
   448 6B35 91 34			sta (ln26),y
   449 6B37 B1 36			lda (ln27),y
   450 6B39 29 0F			and #$0F
   451 6B3B 09 20			ora #$20
   452 6B3D 91 36			sta (ln27),y
   453 6B3F B1 30			lda (ln24),y
   454 6B41 29 03			and #$03
   455 6B43 09 48			ora #$48
   456 6B45 91 30			sta (ln24),y
   457 6B47 B1 32			lda (ln25),y
   458 6B49 29 03			and #$03
   459 6B4B 09 48			ora #$48
   460 6B4D 91 32			sta (ln25),y
   461 6B4F B1 06			lda (ln3),y
   462 6B51 29 3F			and #$3F
   463 6B53 09 80			ora #$80
   464 6B55 91 06			sta (ln3),y
   465 6B57 B1 38			lda (ln28),y
   466 6B59 29 3F			and #$3F
   467 6B5B 09 80			ora #$80
   468 6B5D 91 38			sta (ln28),y
   469 6B5F A9 00			lda #$00
   470 6B61 91 18			sta (ln12),y
   471 6B63 91 1A			sta (ln13),y
   472 6B65 91 1C			sta (ln14),y
   473 6B67 91 1E			sta (ln15),y
   474 6B69 91 20			sta (ln16),y
   475 6B6B 91 22			sta (ln17),y
   476 6B6D 91 24			sta (ln18),y
   477 6B6F 91 26			sta (ln19),y
   478 6B71 A9 02			lda #$02
   479 6B73 91 10			sta (ln8),y
   480 6B75 91 12			sta (ln9),y
   481 6B77 91 14			sta (ln10),y
   482 6B79 91 16			sta (ln11),y
   483 6B7B 91 28			sta (ln20),y
   484 6B7D A9 12			lda #$12
   485 6B7F 91 2A			sta (ln21),y
   486 6B81 91 2C			sta (ln22),y
   487 6B83 A9 52			lda #$52
   488 6B85 91 2E			sta (ln23),y
   489 6B87				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6B87 98				tya
     2 6B88 69 08			adc #8
     3 6B8A A8				tay
Source: kula1.asm
   490 6B8B B1 18			lda (ln12),y
   491 6B8D 29 3F			and #$3F
   492 6B8F 09 80			ora #$80
   493 6B91 91 18			sta (ln12),y
   494 6B93 B1 1A			lda (ln13),y
   495 6B95 29 3F			and #$3F
   496 6B97 09 80			ora #$80
   497 6B99 91 1A			sta (ln13),y
   498 6B9B B1 1C			lda (ln14),y
   499 6B9D 29 3F			and #$3F
   500 6B9F 09 80			ora #$80
   501 6BA1 91 1C			sta (ln14),y
   502 6BA3 B1 1E			lda (ln15),y
   503 6BA5 29 3F			and #$3F
   504 6BA7 09 80			ora #$80
   505 6BA9 91 1E			sta (ln15),y
   506 6BAB B1 20			lda (ln16),y
   507 6BAD 29 3F			and #$3F
   508 6BAF 09 80			ora #$80
   509 6BB1 91 20			sta (ln16),y
   510 6BB3 B1 22			lda (ln17),y
   511 6BB5 29 3F			and #$3F
   512 6BB7 09 80			ora #$80
   513 6BB9 91 22			sta (ln17),y
   514 6BBB B1 24			lda (ln18),y
   515 6BBD 29 3F			and #$3F
   516 6BBF 09 80			ora #$80
   517 6BC1 91 24			sta (ln18),y
   518 6BC3 B1 26			lda (ln19),y
   519 6BC5 29 3F			and #$3F
   520 6BC7 09 80			ora #$80
   521 6BC9 91 26			sta (ln19),y
   522 6BCB 4C 14 3D			jmp BALL.MINMAX
   523 6BCE			_2
   524 6BCE B1 18			lda (ln12),y
   525 6BD0 29 F0			and #$F0
   526 6BD2 09 08			ora #$08
   527 6BD4 91 18			sta (ln12),y
   528 6BD6 B1 1A			lda (ln13),y
   529 6BD8 29 F0			and #$F0
   530 6BDA 09 08			ora #$08
   531 6BDC 91 1A			sta (ln13),y
   532 6BDE B1 1C			lda (ln14),y
   533 6BE0 29 F0			and #$F0
   534 6BE2 09 08			ora #$08
   535 6BE4 91 1C			sta (ln14),y
   536 6BE6 B1 1E			lda (ln15),y
   537 6BE8 29 F0			and #$F0
   538 6BEA 09 08			ora #$08
   539 6BEC 91 1E			sta (ln15),y
   540 6BEE B1 20			lda (ln16),y
   541 6BF0 29 F0			and #$F0
   542 6BF2 09 08			ora #$08
   543 6BF4 91 20			sta (ln16),y
   544 6BF6 B1 22			lda (ln17),y
   545 6BF8 29 F0			and #$F0
   546 6BFA 09 08			ora #$08
   547 6BFC 91 22			sta (ln17),y
   548 6BFE B1 24			lda (ln18),y
   549 6C00 29 F0			and #$F0
   550 6C02 09 08			ora #$08
   551 6C04 91 24			sta (ln18),y
   552 6C06 B1 26			lda (ln19),y
   553 6C08 29 F0			and #$F0
   554 6C0A 09 08			ora #$08
   555 6C0C 91 26			sta (ln19),y
   556 6C0E B1 10			lda (ln8),y
   557 6C10 29 FC			and #$FC
   558 6C12 09 02			ora #$02
   559 6C14 91 10			sta (ln8),y
   560 6C16 B1 12			lda (ln9),y
   561 6C18 29 FC			and #$FC
   562 6C1A 09 02			ora #$02
   563 6C1C 91 12			sta (ln9),y
   564 6C1E B1 14			lda (ln10),y
   565 6C20 29 FC			and #$FC
   566 6C22 09 02			ora #$02
   567 6C24 91 14			sta (ln10),y
   568 6C26 B1 16			lda (ln11),y
   569 6C28 29 FC			and #$FC
   570 6C2A 09 02			ora #$02
   571 6C2C 91 16			sta (ln11),y
   572 6C2E B1 28			lda (ln20),y
   573 6C30 29 FC			and #$FC
   574 6C32 09 02			ora #$02
   575 6C34 91 28			sta (ln20),y
   576 6C36 B1 2A			lda (ln21),y
   577 6C38 29 FC			and #$FC
   578 6C3A 09 02			ora #$02
   579 6C3C 91 2A			sta (ln21),y
   580 6C3E B1 2C			lda (ln22),y
   581 6C40 29 FC			and #$FC
   582 6C42 09 02			ora #$02
   583 6C44 91 2C			sta (ln22),y
   584 6C46 B1 2E			lda (ln23),y
   585 6C48 29 FC			and #$FC
   586 6C4A 09 02			ora #$02
   587 6C4C 91 2E			sta (ln23),y
   588 6C4E				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6C4E 98				tya
     2 6C4F 69 08			adc #8
     3 6C51 A8				tay
Source: kula1.asm
   589 6C52 B1 08			lda (ln4),y
   590 6C54 29 C0			and #$C0
   591 6C56 09 20			ora #$20
   592 6C58 91 08			sta (ln4),y
   593 6C5A B1 34			lda (ln26),y
   594 6C5C 29 C0			and #$C0
   595 6C5E 09 20			ora #$20
   596 6C60 91 34			sta (ln26),y
   597 6C62 B1 36			lda (ln27),y
   598 6C64 29 C0			and #$C0
   599 6C66 09 20			ora #$20
   600 6C68 91 36			sta (ln27),y
   601 6C6A B1 0A			lda (ln5),y
   602 6C6C 29 C0			and #$C0
   603 6C6E 09 21			ora #$21
   604 6C70 91 0A			sta (ln5),y
   605 6C72 B1 06			lda (ln3),y
   606 6C74 29 F0			and #$F0
   607 6C76 09 08			ora #$08
   608 6C78 91 06			sta (ln3),y
   609 6C7A B1 38			lda (ln28),y
   610 6C7C 29 F0			and #$F0
   611 6C7E 09 08			ora #$08
   612 6C80 91 38			sta (ln28),y
   613 6C82 B1 04			lda (ln2),y
   614 6C84 29 FC			and #$FC
   615 6C86 09 02			ora #$02
   616 6C88 91 04			sta (ln2),y
   617 6C8A B1 3A			lda (ln29),y
   618 6C8C 29 FC			and #$FC
   619 6C8E 09 02			ora #$02
   620 6C90 91 3A			sta (ln29),y
   621 6C92 A9 00			lda #$00
   622 6C94 91 20			sta (ln16),y
   623 6C96 91 22			sta (ln17),y
   624 6C98 91 24			sta (ln18),y
   625 6C9A 91 26			sta (ln19),y
   626 6C9C 91 28			sta (ln20),y
   627 6C9E 91 2A			sta (ln21),y
   628 6CA0 91 2C			sta (ln22),y
   629 6CA2 91 2E			sta (ln23),y
   630 6CA4 A9 10			lda #$10
   631 6CA6 91 16			sta (ln11),y
   632 6CA8 A9 14			lda #$14
   633 6CAA 91 10			sta (ln8),y
   634 6CAC 91 12			sta (ln9),y
   635 6CAE 91 14			sta (ln10),y
   636 6CB0 A9 50			lda #$50
   637 6CB2 91 1A			sta (ln13),y
   638 6CB4 91 1C			sta (ln14),y
   639 6CB6 91 1E			sta (ln15),y
   640 6CB8 A9 54			lda #$54
   641 6CBA 91 18			sta (ln12),y
   642 6CBC A9 80			lda #$80
   643 6CBE 91 30			sta (ln24),y
   644 6CC0 91 32			sta (ln25),y
   645 6CC2 A9 85			lda #$85
   646 6CC4 91 0C			sta (ln6),y
   647 6CC6 91 0E			sta (ln7),y
   648 6CC8				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6CC8 98				tya
     2 6CC9 69 08			adc #8
     3 6CCB A8				tay
Source: kula1.asm
   649 6CCC A9 00			lda #$00
   650 6CCE 91 04			sta (ln2),y
   651 6CD0 91 06			sta (ln3),y
   652 6CD2 91 08			sta (ln4),y
   653 6CD4 91 0A			sta (ln5),y
   654 6CD6 91 0E			sta (ln7),y
   655 6CD8 91 10			sta (ln8),y
   656 6CDA 91 12			sta (ln9),y
   657 6CDC 91 14			sta (ln10),y
   658 6CDE 91 16			sta (ln11),y
   659 6CE0 91 18			sta (ln12),y
   660 6CE2 91 1A			sta (ln13),y
   661 6CE4 91 1C			sta (ln14),y
   662 6CE6 91 1E			sta (ln15),y
   663 6CE8 91 20			sta (ln16),y
   664 6CEA 91 22			sta (ln17),y
   665 6CEC 91 24			sta (ln18),y
   666 6CEE 91 26			sta (ln19),y
   667 6CF0 91 28			sta (ln20),y
   668 6CF2 91 2A			sta (ln21),y
   669 6CF4 91 2C			sta (ln22),y
   670 6CF6 91 2E			sta (ln23),y
   671 6CF8 91 30			sta (ln24),y
   672 6CFA 91 32			sta (ln25),y
   673 6CFC 91 34			sta (ln26),y
   674 6CFE 91 38			sta (ln28),y
   675 6D00 91 3A			sta (ln29),y
   676 6D02 A9 01			lda #$01
   677 6D04 91 36			sta (ln27),y
   678 6D06 A9 40			lda #$40
   679 6D08 91 0C			sta (ln6),y
   680 6D0A A9 AA			lda #$AA
   681 6D0C 91 02			sta (ln1),y
   682 6D0E 91 3C			sta (ln30),y
   683 6D10				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6D10 98				tya
     2 6D11 69 08			adc #8
     3 6D13 A8				tay
Source: kula1.asm
   684 6D14 B1 08			lda (ln4),y
   685 6D16 29 03			and #$03
   686 6D18 09 08			ora #$08
   687 6D1A 91 08			sta (ln4),y
   688 6D1C B1 0A			lda (ln5),y
   689 6D1E 29 03			and #$03
   690 6D20 09 08			ora #$08
   691 6D22 91 0A			sta (ln5),y
   692 6D24 B1 36			lda (ln27),y
   693 6D26 29 03			and #$03
   694 6D28 09 08			ora #$08
   695 6D2A 91 36			sta (ln27),y
   696 6D2C B1 06			lda (ln3),y
   697 6D2E 29 0F			and #$0F
   698 6D30 09 20			ora #$20
   699 6D32 91 06			sta (ln3),y
   700 6D34 B1 38			lda (ln28),y
   701 6D36 29 0F			and #$0F
   702 6D38 09 20			ora #$20
   703 6D3A 91 38			sta (ln28),y
   704 6D3C B1 34			lda (ln26),y
   705 6D3E 29 03			and #$03
   706 6D40 09 48			ora #$48
   707 6D42 91 34			sta (ln26),y
   708 6D44 B1 04			lda (ln2),y
   709 6D46 29 3F			and #$3F
   710 6D48 09 80			ora #$80
   711 6D4A 91 04			sta (ln2),y
   712 6D4C B1 3A			lda (ln29),y
   713 6D4E 29 3F			and #$3F
   714 6D50 09 80			ora #$80
   715 6D52 91 3A			sta (ln29),y
   716 6D54 A9 00			lda #$00
   717 6D56 91 10			sta (ln8),y
   718 6D58 91 12			sta (ln9),y
   719 6D5A 91 14			sta (ln10),y
   720 6D5C 91 16			sta (ln11),y
   721 6D5E 91 18			sta (ln12),y
   722 6D60 91 1A			sta (ln13),y
   723 6D62 91 1C			sta (ln14),y
   724 6D64 91 1E			sta (ln15),y
   725 6D66 91 20			sta (ln16),y
   726 6D68 91 22			sta (ln17),y
   727 6D6A 91 24			sta (ln18),y
   728 6D6C 91 26			sta (ln19),y
   729 6D6E 91 28			sta (ln20),y
   730 6D70 A9 02			lda #$02
   731 6D72 91 0C			sta (ln6),y
   732 6D74 91 0E			sta (ln7),y
   733 6D76 A9 04			lda #$04
   734 6D78 91 2A			sta (ln21),y
   735 6D7A 91 2C			sta (ln22),y
   736 6D7C A9 14			lda #$14
   737 6D7E 91 2E			sta (ln23),y
   738 6D80 A9 52			lda #$52
   739 6D82 91 30			sta (ln24),y
   740 6D84 91 32			sta (ln25),y
   741 6D86				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6D86 98				tya
     2 6D87 69 08			adc #8
     3 6D89 A8				tay
Source: kula1.asm
   742 6D8A B1 18			lda (ln12),y
   743 6D8C 29 0F			and #$0F
   744 6D8E 09 20			ora #$20
   745 6D90 91 18			sta (ln12),y
   746 6D92 B1 1A			lda (ln13),y
   747 6D94 29 0F			and #$0F
   748 6D96 09 20			ora #$20
   749 6D98 91 1A			sta (ln13),y
   750 6D9A B1 1C			lda (ln14),y
   751 6D9C 29 0F			and #$0F
   752 6D9E 09 20			ora #$20
   753 6DA0 91 1C			sta (ln14),y
   754 6DA2 B1 1E			lda (ln15),y
   755 6DA4 29 0F			and #$0F
   756 6DA6 09 20			ora #$20
   757 6DA8 91 1E			sta (ln15),y
   758 6DAA B1 20			lda (ln16),y
   759 6DAC 29 0F			and #$0F
   760 6DAE 09 20			ora #$20
   761 6DB0 91 20			sta (ln16),y
   762 6DB2 B1 22			lda (ln17),y
   763 6DB4 29 0F			and #$0F
   764 6DB6 09 20			ora #$20
   765 6DB8 91 22			sta (ln17),y
   766 6DBA B1 24			lda (ln18),y
   767 6DBC 29 0F			and #$0F
   768 6DBE 09 20			ora #$20
   769 6DC0 91 24			sta (ln18),y
   770 6DC2 B1 26			lda (ln19),y
   771 6DC4 29 0F			and #$0F
   772 6DC6 09 20			ora #$20
   773 6DC8 91 26			sta (ln19),y
   774 6DCA B1 10			lda (ln8),y
   775 6DCC 29 3F			and #$3F
   776 6DCE 09 80			ora #$80
   777 6DD0 91 10			sta (ln8),y
   778 6DD2 B1 12			lda (ln9),y
   779 6DD4 29 3F			and #$3F
   780 6DD6 09 80			ora #$80
   781 6DD8 91 12			sta (ln9),y
   782 6DDA B1 14			lda (ln10),y
   783 6DDC 29 3F			and #$3F
   784 6DDE 09 80			ora #$80
   785 6DE0 91 14			sta (ln10),y
   786 6DE2 B1 16			lda (ln11),y
   787 6DE4 29 3F			and #$3F
   788 6DE6 09 80			ora #$80
   789 6DE8 91 16			sta (ln11),y
   790 6DEA B1 28			lda (ln20),y
   791 6DEC 29 3F			and #$3F
   792 6DEE 09 80			ora #$80
   793 6DF0 91 28			sta (ln20),y
   794 6DF2 B1 2A			lda (ln21),y
   795 6DF4 29 3F			and #$3F
   796 6DF6 09 80			ora #$80
   797 6DF8 91 2A			sta (ln21),y
   798 6DFA B1 2C			lda (ln22),y
   799 6DFC 29 3F			and #$3F
   800 6DFE 09 80			ora #$80
   801 6E00 91 2C			sta (ln22),y
   802 6E02 B1 2E			lda (ln23),y
   803 6E04 29 3F			and #$3F
   804 6E06 09 80			ora #$80
   805 6E08 91 2E			sta (ln23),y
   806 6E0A 4C 14 3D			jmp BALL.MINMAX
   807 6E0D			_3
   808 6E0D B1 18			lda (ln12),y
   809 6E0F 29 FC			and #$FC
   810 6E11 09 02			ora #$02
   811 6E13 91 18			sta (ln12),y
   812 6E15 B1 1A			lda (ln13),y
   813 6E17 29 FC			and #$FC
   814 6E19 09 02			ora #$02
   815 6E1B 91 1A			sta (ln13),y
   816 6E1D B1 1C			lda (ln14),y
   817 6E1F 29 FC			and #$FC
   818 6E21 09 02			ora #$02
   819 6E23 91 1C			sta (ln14),y
   820 6E25 B1 1E			lda (ln15),y
   821 6E27 29 FC			and #$FC
   822 6E29 09 02			ora #$02
   823 6E2B 91 1E			sta (ln15),y
   824 6E2D B1 20			lda (ln16),y
   825 6E2F 29 FC			and #$FC
   826 6E31 09 02			ora #$02
   827 6E33 91 20			sta (ln16),y
   828 6E35 B1 22			lda (ln17),y
   829 6E37 29 FC			and #$FC
   830 6E39 09 02			ora #$02
   831 6E3B 91 22			sta (ln17),y
   832 6E3D B1 24			lda (ln18),y
   833 6E3F 29 FC			and #$FC
   834 6E41 09 02			ora #$02
   835 6E43 91 24			sta (ln18),y
   836 6E45 B1 26			lda (ln19),y
   837 6E47 29 FC			and #$FC
   838 6E49 09 02			ora #$02
   839 6E4B 91 26			sta (ln19),y
   840 6E4D				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6E4D 98				tya
     2 6E4E 69 08			adc #8
     3 6E50 A8				tay
Source: kula1.asm
   841 6E51 B1 30			lda (ln24),y
   842 6E53 29 C0			and #$C0
   843 6E55 09 20			ora #$20
   844 6E57 91 30			sta (ln24),y
   845 6E59 B1 32			lda (ln25),y
   846 6E5B 29 C0			and #$C0
   847 6E5D 09 20			ora #$20
   848 6E5F 91 32			sta (ln25),y
   849 6E61 B1 0C			lda (ln6),y
   850 6E63 29 C0			and #$C0
   851 6E65 09 21			ora #$21
   852 6E67 91 0C			sta (ln6),y
   853 6E69 B1 0E			lda (ln7),y
   854 6E6B 29 C0			and #$C0
   855 6E6D 09 21			ora #$21
   856 6E6F 91 0E			sta (ln7),y
   857 6E71 B1 08			lda (ln4),y
   858 6E73 29 F0			and #$F0
   859 6E75 09 08			ora #$08
   860 6E77 91 08			sta (ln4),y
   861 6E79 B1 0A			lda (ln5),y
   862 6E7B 29 F0			and #$F0
   863 6E7D 09 08			ora #$08
   864 6E7F 91 0A			sta (ln5),y
   865 6E81 B1 34			lda (ln26),y
   866 6E83 29 F0			and #$F0
   867 6E85 09 08			ora #$08
   868 6E87 91 34			sta (ln26),y
   869 6E89 B1 36			lda (ln27),y
   870 6E8B 29 F0			and #$F0
   871 6E8D 09 08			ora #$08
   872 6E8F 91 36			sta (ln27),y
   873 6E91 B1 06			lda (ln3),y
   874 6E93 29 FC			and #$FC
   875 6E95 09 02			ora #$02
   876 6E97 91 06			sta (ln3),y
   877 6E99 B1 38			lda (ln28),y
   878 6E9B 29 FC			and #$FC
   879 6E9D 09 02			ora #$02
   880 6E9F 91 38			sta (ln28),y
   881 6EA1 A9 00			lda #$00
   882 6EA3 91 20			sta (ln16),y
   883 6EA5 91 22			sta (ln17),y
   884 6EA7 91 24			sta (ln18),y
   885 6EA9 91 26			sta (ln19),y
   886 6EAB A9 14			lda #$14
   887 6EAD 91 1A			sta (ln13),y
   888 6EAF 91 1C			sta (ln14),y
   889 6EB1 91 1E			sta (ln15),y
   890 6EB3 A9 15			lda #$15
   891 6EB5 91 18			sta (ln12),y
   892 6EB7 A9 80			lda #$80
   893 6EB9 91 28			sta (ln20),y
   894 6EBB 91 2A			sta (ln21),y
   895 6EBD 91 2C			sta (ln22),y
   896 6EBF 91 2E			sta (ln23),y
   897 6EC1 A9 84			lda #$84
   898 6EC3 91 16			sta (ln11),y
   899 6EC5 A9 85			lda #$85
   900 6EC7 91 10			sta (ln8),y
   901 6EC9 91 12			sta (ln9),y
   902 6ECB 91 14			sta (ln10),y
   903 6ECD				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6ECD 98				tya
     2 6ECE 69 08			adc #8
     3 6ED0 A8				tay
Source: kula1.asm
   904 6ED1 B1 02			lda (ln1),y
   905 6ED3 29 C0			and #$C0
   906 6ED5 09 2A			ora #$2A
   907 6ED7 91 02			sta (ln1),y
   908 6ED9 B1 3C			lda (ln30),y
   909 6EDB 29 C0			and #$C0
   910 6EDD 09 2A			ora #$2A
   911 6EDF 91 3C			sta (ln30),y
   912 6EE1 A9 00			lda #$00
   913 6EE3 91 06			sta (ln3),y
   914 6EE5 91 08			sta (ln4),y
   915 6EE7 91 10			sta (ln8),y
   916 6EE9 91 12			sta (ln9),y
   917 6EEB 91 14			sta (ln10),y
   918 6EED 91 16			sta (ln11),y
   919 6EEF 91 18			sta (ln12),y
   920 6EF1 91 1A			sta (ln13),y
   921 6EF3 91 1C			sta (ln14),y
   922 6EF5 91 1E			sta (ln15),y
   923 6EF7 91 20			sta (ln16),y
   924 6EF9 91 22			sta (ln17),y
   925 6EFB 91 24			sta (ln18),y
   926 6EFD 91 26			sta (ln19),y
   927 6EFF 91 28			sta (ln20),y
   928 6F01 91 2A			sta (ln21),y
   929 6F03 91 2C			sta (ln22),y
   930 6F05 91 2E			sta (ln23),y
   931 6F07 91 30			sta (ln24),y
   932 6F09 91 32			sta (ln25),y
   933 6F0B 91 34			sta (ln26),y
   934 6F0D 91 36			sta (ln27),y
   935 6F0F 91 38			sta (ln28),y
   936 6F11 A9 40			lda #$40
   937 6F13 91 0A			sta (ln5),y
   938 6F15 91 0E			sta (ln7),y
   939 6F17 A9 50			lda #$50
   940 6F19 91 0C			sta (ln6),y
   941 6F1B A9 80			lda #$80
   942 6F1D 91 04			sta (ln2),y
   943 6F1F 91 3A			sta (ln29),y
   944 6F21				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6F21 98				tya
     2 6F22 69 08			adc #8
     3 6F24 A8				tay
Source: kula1.asm
   945 6F25 B1 06			lda (ln3),y
   946 6F27 29 03			and #$03
   947 6F29 09 08			ora #$08
   948 6F2B 91 06			sta (ln3),y
   949 6F2D B1 38			lda (ln28),y
   950 6F2F 29 03			and #$03
   951 6F31 09 08			ora #$08
   952 6F33 91 38			sta (ln28),y
   953 6F35 B1 04			lda (ln2),y
   954 6F37 29 0F			and #$0F
   955 6F39 09 20			ora #$20
   956 6F3B 91 04			sta (ln2),y
   957 6F3D B1 3A			lda (ln29),y
   958 6F3F 29 0F			and #$0F
   959 6F41 09 20			ora #$20
   960 6F43 91 3A			sta (ln29),y
   961 6F45 B1 02			lda (ln1),y
   962 6F47 29 3F			and #$3F
   963 6F49 09 80			ora #$80
   964 6F4B 91 02			sta (ln1),y
   965 6F4D B1 3C			lda (ln30),y
   966 6F4F 29 3F			and #$3F
   967 6F51 09 80			ora #$80
   968 6F53 91 3C			sta (ln30),y
   969 6F55 A9 00			lda #$00
   970 6F57 91 0C			sta (ln6),y
   971 6F59 91 0E			sta (ln7),y
   972 6F5B 91 10			sta (ln8),y
   973 6F5D 91 12			sta (ln9),y
   974 6F5F 91 14			sta (ln10),y
   975 6F61 91 16			sta (ln11),y
   976 6F63 91 18			sta (ln12),y
   977 6F65 91 1A			sta (ln13),y
   978 6F67 91 1C			sta (ln14),y
   979 6F69 91 1E			sta (ln15),y
   980 6F6B 91 20			sta (ln16),y
   981 6F6D 91 22			sta (ln17),y
   982 6F6F 91 24			sta (ln18),y
   983 6F71 91 26			sta (ln19),y
   984 6F73 91 28			sta (ln20),y
   985 6F75 A9 01			lda #$01
   986 6F77 91 2A			sta (ln21),y
   987 6F79 91 2C			sta (ln22),y
   988 6F7B A9 02			lda #$02
   989 6F7D 91 08			sta (ln4),y
   990 6F7F 91 0A			sta (ln5),y
   991 6F81 A9 05			lda #$05
   992 6F83 91 2E			sta (ln23),y
   993 6F85 A9 12			lda #$12
   994 6F87 91 34			sta (ln26),y
   995 6F89 A9 14			lda #$14
   996 6F8B 91 30			sta (ln24),y
   997 6F8D 91 32			sta (ln25),y
   998 6F8F A9 42			lda #$42
   999 6F91 91 36			sta (ln27),y
  1000 6F93				@@INC inck1
Macro: @@INC [Source: pang_chars.asm]
     1 6F93 98				tya
     2 6F94 69 08			adc #8
     3 6F96 A8				tay
Source: kula1.asm
  1001 6F97 B1 18			lda (ln12),y
  1002 6F99 29 03			and #$03
  1003 6F9B 09 08			ora #$08
  1004 6F9D 91 18			sta (ln12),y
  1005 6F9F B1 1A			lda (ln13),y
  1006 6FA1 29 03			and #$03
  1007 6FA3 09 08			ora #$08
  1008 6FA5 91 1A			sta (ln13),y
  1009 6FA7 B1 1C			lda (ln14),y
  1010 6FA9 29 03			and #$03
  1011 6FAB 09 08			ora #$08
  1012 6FAD 91 1C			sta (ln14),y
  1013 6FAF B1 1E			lda (ln15),y
  1014 6FB1 29 03			and #$03
  1015 6FB3 09 08			ora #$08
  1016 6FB5 91 1E			sta (ln15),y
  1017 6FB7 B1 20			lda (ln16),y
  1018 6FB9 29 03			and #$03
  1019 6FBB 09 08			ora #$08
  1020 6FBD 91 20			sta (ln16),y
  1021 6FBF B1 22			lda (ln17),y
  1022 6FC1 29 03			and #$03
  1023 6FC3 09 08			ora #$08
  1024 6FC5 91 22			sta (ln17),y
  1025 6FC7 B1 24			lda (ln18),y
  1026 6FC9 29 03			and #$03
  1027 6FCB 09 08			ora #$08
  1028 6FCD 91 24			sta (ln18),y
  1029 6FCF B1 26			lda (ln19),y
  1030 6FD1 29 03			and #$03
  1031 6FD3 09 08			ora #$08
  1032 6FD5 91 26			sta (ln19),y
  1033 6FD7 B1 10			lda (ln8),y
  1034 6FD9 29 0F			and #$0F
  1035 6FDB 09 20			ora #$20
  1036 6FDD 91 10			sta (ln8),y
  1037 6FDF B1 12			lda (ln9),y
  1038 6FE1 29 0F			and #$0F
  1039 6FE3 09 20			ora #$20
  1040 6FE5 91 12			sta (ln9),y
  1041 6FE7 B1 14			lda (ln10),y
  1042 6FE9 29 0F			and #$0F
  1043 6FEB 09 20			ora #$20
  1044 6FED 91 14			sta (ln10),y
  1045 6FEF B1 16			lda (ln11),y
  1046 6FF1 29 0F			and #$0F
  1047 6FF3 09 20			ora #$20
  1048 6FF5 91 16			sta (ln11),y
  1049 6FF7 B1 28			lda (ln20),y
  1050 6FF9 29 0F			and #$0F
  1051 6FFB 09 20			ora #$20
  1052 6FFD 91 28			sta (ln20),y
  1053 6FFF B1 2A			lda (ln21),y
  1054 7001 29 0F			and #$0F
  1055 7003 09 20			ora #$20
  1056 7005 91 2A			sta (ln21),y
  1057 7007 B1 2C			lda (ln22),y
  1058 7009 29 0F			and #$0F
  1059 700B 09 20			ora #$20
  1060 700D 91 2C			sta (ln22),y
  1061 700F B1 2E			lda (ln23),y
  1062 7011 29 0F			and #$0F
  1063 7013 09 20			ora #$20
  1064 7015 91 2E			sta (ln23),y
  1065 7017 B1 0C			lda (ln6),y
  1066 7019 29 3F			and #$3F
  1067 701B 09 80			ora #$80
  1068 701D 91 0C			sta (ln6),y
  1069 701F B1 0E			lda (ln7),y
  1070 7021 29 3F			and #$3F
  1071 7023 09 80			ora #$80
  1072 7025 91 0E			sta (ln7),y
  1073 7027 B1 30			lda (ln24),y
  1074 7029 29 3F			and #$3F
  1075 702B 09 80			ora #$80
  1076 702D 91 30			sta (ln24),y
  1077 702F B1 32			lda (ln25),y
  1078 7031 29 3F			and #$3F
  1079 7033 09 80			ora #$80
  1080 7035 91 32			sta (ln25),y
  1081 7037 4C 14 3D			jmp BALL.MINMAX
  1082 				.end
  1366
  1367 703A				icl 'collisions.asm'
Source: collisions.asm
     1
     2 				/* ----------------------------------------------------------------------- */
     3 				/* 				COLLISIONS                                 */
     4 				/* ----------------------------------------------------------------------- */
     5
     6 703A			.proc	COLLISIONS
     7
     8 703A A9 BC 8D D4 70		mva #{ldy ttype,x}	DETECT.HARP0		; przywracamy test kolizji HARPUN/KULE
     9 703F A9 00 8D D5 70 A9 + 	mwa #ttype		DETECT.HARP0+1
    10
    11 7049 A9 00		tnt	lda #0
    12 704B F0 1F			beq _no
    13
    14 704D EE 4A 70			inc tnt+1
    15 7050 10 07			bpl __tnt
    16
    17 7052 A9 00 8D 4A 70		mva #0 tnt+1
    18 7057 F0 13			beq _no
    19
    20 7059 29 0F		__tnt	and #$0f
    21 705B D0 0F			bne _no
    22
    23 705D A9 4C 8D D4 70		mva #{jmp*}		DETECT.HARP0
    24 7062 A9 8F 8D D5 70 A9 + 	mwa #DETECT._splash	DETECT.HARP0+1
    25 706C			_no
    26
    27 				// wspó³rzêdne A,B,C,D okreœlaj¹ czworok¹t wpisany w bohatera
    28
    29 706C A5 7B			lda hposx
    30 706E 38 E9 2C			sub #48+2-4-2
    31
    32 7071 8D 2A 71			sta DETECT.hero.dx0
    33 7074 8D 35 71			sta DETECT.hero.dx1
    34 7077 18 69 06			add #10-4			; szerokosc bohatera
    35 707A 8D 2E 71			sta DETECT.hero.cx0
    36 707D 8D 39 71			sta DETECT.hero.cx1
    37
    38 7080 A5 7C			lda hposy			; górna krawedz bohatera
    39 				;	sta DETECT.ay0
    40 7082 69 03			adc #3
    41 7084 8D 20 71			sta DETECT.hero.ay1
    42 7087 8D 15 71			sta DETECT.hero.ay2
    43
    44 708A 69 1C			adc #31-3			; wysokosc bohatera
    45 				;	sta DETECT.dy0
    46 708C 8D 1C 71			sta DETECT.hero.dy1
    47 708F 8D 11 71			sta DETECT.hero.dy2
    48
    49
    50 				// wspó³rzêdne A,B,C,D okreœlaj¹ czworok¹t wpisany w harpun #0
    51
    52 7092 A5 93			lda harp0.x
    53 7094 F0 29			beq DETECT
    54
    55 7096 38 E9 2E			sub #48+4-2-4
    56
    57 7099 8D F8 70			sta DETECT.harp0.dx0
    58 709C 8D 03 71			sta DETECT.harp0.dx1
    59 709F 18 69 01			add #1				; szerokosc harpunu
    60 70A2 8D FC 70			sta DETECT.harp0.cx0
    61 70A5 8D 07 71			sta DETECT.harp0.cx1
    62
    63 70A8 A5 94			lda harp0.y			; górna krawedz harpunu
    64 70AA 38 E9 5A			sub #dolnakrawedz-scrhig*8+2	; +2 aby trafiæ najmniejsz¹ kulê przyleg³¹ do sufitu
    65 				;	sta DETECT.ay0
    66 70AD 8D EE 70			sta DETECT.harp0.ay1
    67 70B0 8D E3 70			sta DETECT.harp0.ay2
    68
    69 70B3 A5 96			lda harp0.start			; dolna krawedz harpunu
    70 				;	sta DETECT.dy0
    71 70B5 8D EA 70			sta DETECT.harp0.dy1
    72 70B8 8D DF 70			sta DETECT.harp0.dy2
    73
    74 70BB A9 00			lda #0
    75 70BD 85 6C			sta harpun
    76
    77 				/* ------------------------------------------- */
    78 				/*		     DETECT		       */
    79 				/* ------------------------------------------- */
    80 70BF			DETECT	.local
    81
    82 70BF A6 7F			ldx objects
    83 70C1 CA				dex
    84
    85 70C2 B5 B7		LOOP	lda active,x
    86 70C4 10 0A			bpl nxt
    87
    88 70C6 BD 20 02			lda switch,x
    89 70C9 F0 09			beq HARP0
    90
    91 70CB A9 00			lda #0
    92 70CD 9D 20 02			sta switch,x
    93
    94 70D0 CA			nxt	dex
    95 70D1 10 EF			bpl LOOP
    96 70D3 60				rts
    97
    98 				/* ------------------------------------------- */
    99 				/*	DETEKCJA KOLIZJI KUL Z HARPUNEM #0     */
   100 				/* ------------------------------------------- */
   101 70D4			HARP0	.local
   102
   103 70D4 BC 00 02			ldy ttype,x		; typ kuli 0..4
   104
   105 70D7 A5 93			lda harp0.x
   106 70D9 F0 32			beq _nxt
   107
   108 70DB BD 80 02			lda posy,x		; = g.y
   109
   110 70DE C9 00			cmp #0			; if g.y < d.y
   111 = 70DF			dy2	equ *-1
   112 70E0 B0 04			bcs skip
   113
   114 70E2 C9 00			cmp #0			; if g.y >= a.y
   115 = 70E3			ay2	equ *-1
   116 70E4 B0 0B			bcs _OK_
   117
   118
   119 70E6 79 9A 39		skip	adc theightm1,y		; = e.y
   120
   121 70E9 C9 00			cmp #0			; if e.y < d.y
   122 = 70EA			dy1	equ *-1
   123 70EB B0 20			bcs _nxt
   124
   125 70ED C9 00			cmp #0			; if e.y >= a.y
   126 = 70EE			ay1	equ *-1
   127 70EF 90 1C			bcc _nxt
   128
   129
   130 70F1 BD 40 02		_OK_	lda posx,x
   131 70F4 79 9F 39			adc twidthm1,y		; = f.x
   132 								; if f.x >= d.x
   133 70F7 C9 00			cmp #0
   134 = 70F8			dx0	equ *-1
   135 70F9 90 12			bcc _nxt
   136
   137 70FB C9 00			cmp #0			; if f.x < c.x
   138 = 70FC			cx0	equ *-1
   139 70FD 90 0B			bcc KOLIZJA
   140
   141 70FF BD 40 02			lda posx,x		; = e.x
   142 7102 C9 00			cmp #0			; if e.x < d.x
   143 = 7103			dx1	equ *-1
   144 7104 90 04			bcc KOLIZJA
   145
   146 7106 C9 00			cmp #0			; if e.x < c.x
   147 = 7107			cx1	equ *-1
   148 7108 B0 03			bcs _nxt
   149
   150 710A 4C 80 72		KOLIZJA	jmp SPLASH
   151
   152 710D			_nxt
   153 					.endl
   154
   155 				/* ------------------------------------------- */
   156 				/*	DETEKCJA KOLIZJI KUL Z BOHATEREM       */
   157 				/* ------------------------------------------- */
   158
   159 710D			HERO	.local
   160
   161 710D BD 80 02			lda posy,x		; = g.y
   162
   163 				;	ldy ttype,x		; typ kuli 0..4
   164
   165 				// !!! rejestr Y musi byæ odpowiednio ustawiony (LDY TTYPE,X) zanim nast¹pi skok do HERO !!!
   166
   167 7110 C9 00			cmp #0			; if g.y < d.y
   168 = 7111			dy2	equ *-1
   169 7112 B0 04			bcs skip
   170
   171 7114 C9 00			cmp #0			; if g.y >= a.y
   172 = 7115			ay2	equ *-1
   173 7116 B0 0B			bcs _OK_
   174
   175
   176 7118 79 9A 39		skip	adc theightm1,y
   177
   178 711B C9 00			cmp #0
   179 = 711C			dy1	equ *-1
   180 711D B0 1D			bcs _nxt
   181
   182 711F C9 00			cmp #0
   183 = 7120			ay1	equ *-1
   184 7121 90 19			bcc _nxt
   185
   186 7123 BD 40 02		_OK_	lda posx,x
   187 7126 79 9F 39			adc twidthm1,y
   188
   189 7129 C9 00			cmp #0
   190 = 712A			dx0	equ *-1
   191 712B 90 0F			bcc _nxt
   192
   193 712D C9 00			cmp #0
   194 = 712E			cx0	equ *-1
   195 712F 90 14			bcc ENERGY
   196
   197 7131 BD 40 02			lda posx,x
   198 7134 C9 00			cmp #0
   199 = 7135			dx1	equ *-1
   200 7136 90 0D			bcc ENERGY
   201
   202 7138 C9 00			cmp #0
   203 = 7139			cx1	equ *-1
   204 713A 90 09			bcc ENERGY
   205
   206 713C			_nxt
   207 					.endl
   208
   209
   210 713C CA			_nxt	dex
   211 713D 10 83			bpl LOOP
   212 713F 60				rts
   213
   214 				;----------------------------------------------------------------------
   215 				// trafienie gracza kul¹ (!!! nie modyfikowaæ rejestru X !!!)
   216
   217 7140 06 05 04 03 02	energy_max	dta 6,5,4,3,2
   218
   219 7145			ENERGY	.local
   220
   221 7145 BC 00 02			ldy ttype,x		; typ kuli 0..4
   222
   223 7148 AD 9F 71			lda power
   224 714B D9 40 71			cmp energy_max,y
   225 714E 90 09			bcc nopower
   226
   227 				;	lda power
   228 7150 38 F9 40 71			sub energy_max,y
   229 7154 8D 9F 71			sta power
   230 7157 D0 1C			bne skip
   231
   232 7159			nopower
   233 				;	ldy INIT.lives
   234 				;	seq
   235 				;	dey
   236 				;	sty INIT.lives		; zmniejszamy liczbe zyc
   237
   238 					PlaySfx #ton_g4 #sfxDie
   238 				 MVA #TON_G4 PLAYSFX.NOTE\ MVA #SFXDIE PLAYSFX.FX\ JSR PLAYSFX
   238 7159 A9 2B 8D 3D 84	 MVA #TON_G4 PLAYSFX.NOTE
   238 715E A9 11 8D 3E 84	 MVA #SFXDIE PLAYSFX.FX
   238 7163 20 17 84		 JSR PLAYSFX
   239
   240 7166 A9 01			lda #deathCode.no_power
   241 7168 8D C8 9A			sta GameEnd.reason
   242
   243 716B A0 01			ldy #1
   244 716D 84 7F			sty objects		; wymuszamy koniec dzia³ania silnika
   245 716F 84 B7			sty active
   246
   247 7171 88				dey			; Y = 0
   248 7172 8C 9F 71			sty power
   249 7175			skip
   250 7175 20 9E 71			jsr update_energy
   251
   252 7178 4C 3C 71			jmp _nxt
   253
   254 				/* -------------------------------------------- */
   255 				/*			MORE			*/
   256 				/* -------------------------------------------- */
   257
   258 717B AD 9F 71 18 69 19 + more	adb power #25
   259 7184 C9 60			cmp #energy_len*8
   260 7186 90 02			scc
   261 7188 A9 60			lda #energy_len*8
   262
   263 718A 4A 4A 4A			:3 lsr @
   264 718D A8				tay
   265 718E F0 0E			beq update_energy
   266
   267 7190 88				dey
   268
   269 7191 A9 54		loop	lda #energy_up				; gorny znak paska energii
   270 7193 99 44 39			sta energy_bar,y
   271
   272 7196 A9 5D			lda #energy_dw				; dolny znak paska energii
   273 7198 99 6C 39			sta energy_bar+40,y
   274 719B 88				dey
   275 719C 10 F3			bpl loop
   276
   277 719E			update_energy
   278
   279 719E A0 00			ldy #0
   280 = 719F			power	equ *-1
   281 71A0 F0 21			beq null
   282
   283 71A2 C0 60			cpy #energy_len*8
   284 71A4 B0 2A			bcs stop
   285
   286 71A6 98				tya
   287
   288 71A7 4A 4A 4A			:3 lsr @
   289
   290 71AA A8				tay
   291
   292 71AB AD 9F 71			lda power
   293 71AE 29 07			and #7
   294 71B0 48				pha
   295
   296 71B1 18 69 4D			add #energy_up_first
   297 71B4 99 44 39			sta energy_bar,y
   298
   299 71B7 68				pla
   300 71B8 18 69 56			add #energy_dw_first
   301 71BB 99 6C 39			sta energy_bar+40,y
   302
   303 71BE C8			plop	iny
   304 71BF C0 0C			cpy #energy_len
   305 71C1 B0 0D			bcs stop
   306 71C3			null
   307 71C3 A9 4C			lda #energy_up_first-1
   308 71C5 99 44 39			sta energy_bar,y
   309
   310 71C8 A9 55			lda #energy_dw_first-1
   311 71CA 99 6C 39			sta energy_bar+40,y
   312
   313 71CD 4C BE 71			jmp plop
   314
   315 71D0 60			stop	rts
   316
   317
   318 				/* -------------------------------------------- */
   319 				/*			INIT			*/
   320 				/* -------------------------------------------- */
   321 71D1 A9 60 8D 9F 71	init	mva #energy_len*8 power
   322
   323 71D6 A9 54			lda #energy_up				; gorny znak paska energi
   324 71D8 8D 44 39 8D 45 39 + 	:energy_len sta energy_bar+#
   325
   326 71FC A9 5D			lda #energy_dw				; dolny znak paska energi
   327 71FE 8D 6C 39 8D 6D 39 + 	:energy_len sta energy_bar+40+#
   328
   329 7222 60				rts
   330
   331 					.endl
   332
   333 				;----------------------------------------------------------------------
   334
   335 7223			.local	hitBall
   336
   337 7223 A9 00			lda #0
   338 = 7224			level	equ *-1
   339
   340 7225 C9 48			cmp #level_len*8
   341 7227 B0 17			bcs stop
   342
   343 7229 4A 4A 4A			:3 lsr @
   344
   345 722C A8				tay
   346
   347 722D AD 24 72			lda level
   348 7230 29 07			and #7
   349 7232 48				pha
   350
   351 7233 18 69 4D			add #energy_up_first
   352 7236 99 55 39			sta level_bar,y
   353
   354 7239 68				pla
   355 723A 18 69 56			add #energy_dw_first
   356 723D 99 7D 39			sta level_bar+40,y
   357
   358 7240 EE 24 72		stop	inc level
   359 7243 60				rts
   360 				.endl
   361
   362 				;----------------------------------------------------------------------
   363 				// trafienie harpunu w kule (!!! nie modyfikowaæ rejestru X !!!)
   364
   365 7244 AD 4A 70		_kill	lda tnt+1
   366 7247 D0 23			bne no_hit
   367
   368 7249 B9 6F 72			lda t_note,y
   369
   370 					PlaySfx @ #sfxBum
   370 				 STA PLAYSFX.NOTE\ MVA #SFXBUM PLAYSFX.FX\ JSR PLAYSFX
   370 724C 8D 3D 84		 STA PLAYSFX.NOTE
   370 724F A9 10 8D 3E 84	 MVA #SFXBUM PLAYSFX.FX
   370 7254 20 17 84		 JSR PLAYSFX
   371 					NewScore #0 #5
   371 				 MVA #0 NEWSCORE._10\ MVA #5 NEWSCORE._1\ JSR NEWSCORE
   371 7257 A9 00 8D 8D 93	 MVA #0 NEWSCORE._10
   371 725C A9 05 8D 78 93	 MVA #5 NEWSCORE._1
   371 7261 20 77 93		 JSR NEWSCORE
   372
   373 7264 B5 B7			lda active,x
   374 7266 29 7F			and #$7f
   375 7268 95 B7			sta active,x
   376
   377 726A C6 91			dec lbcount		; licznik kul levelu	(PANIC MODE)
   378
   379 726C 4C 0D 71		no_hit	jmp HERO
   380
   381 726F 24 30 2B 1F 11	t_note	dta ton_C4, ton_C5, ton_G4, ton_G3, ton_G2
   382 7274 00 01 01 02		h_score	dta 0,1,1,2
   383 7278 05 00 05 00		l_score	dta 5,0,5,0
   384
   385 727C 30 30 20 20		add_energy dta 48,48,32,32
   386
   387 7280 A5 93		SPLASH	lda harp0.x
   388 7282 85 6C			sta harpun	; zaznaczamy u¿yty harpun aby potem móc go usun¹æ z obrazu
   389
   390 7284 20 23 72		panic	jsr hitBall
   391
   392 7287 A5 7A			lda explose	; zapamiêtujemy tylko pierwsz¹ wykryt¹ eksplozje, dla pozostalych nie mamy tyle gwiazdek
   393 7289 C9 FF			cmp #$ff
   394 728B D0 02			sne
   395 728D 86 7A			stx explose
   396
   397 728F BC 00 02		_splash	ldy ttype,x
   398
   399 7292 C0 04			cpy #4
   400 7294 B0 AE			bcs _kill	; kula musi znikn¹æ
   401
   402 7296 B9 74 72 8D 8D 93		mva h_score,y	NewScore._10
   403 729C B9 78 72 8D 78 93		mva l_score,y	NewScore._1
   404 72A2 20 77 93			jsr NewScore
   405
   406 72A5 FE 00 02			inc ttype,x
   407
   408 72A8 AD 0A D2			lda $d20a
   409 72AB 10 0E			bpl lewa
   410
   411 72AD B9 7C 72 8D 37 93	prawa	mva add_energy,y ADD_NEW_BALL.new0+1	; dodatkowa energia kul po trafieniu harpunem
   412 72B3 E9 05			sbc #5
   413 72B5 8D 47 93			sta ADD_NEW_BALL.new1+1
   414
   415 72B8 4C C6 72			jmp skip
   416
   417 72BB B9 7C 72 8D 47 93	lewa	mva add_energy,y ADD_NEW_BALL.new1+1	; dodatkowa energia kul po trafieniu harpunem
   418 72C1 E9 07			sbc #7
   419 72C3 8D 37 93			sta ADD_NEW_BALL.new0+1
   420
   421 72C6			skip
   422 72C6 B9 6F 72			lda t_note,y
   423
   424 					PlaySfx @ #sfxBum
   424 				 STA PLAYSFX.NOTE\ MVA #SFXBUM PLAYSFX.FX\ JSR PLAYSFX
   424 72C9 8D 3D 84		 STA PLAYSFX.NOTE
   424 72CC A9 10 8D 3E 84	 MVA #SFXBUM PLAYSFX.FX
   424 72D1 20 17 84		 JSR PLAYSFX
   425
   426 					.rept mobjects
   427 					LDY ACTIVE+#
   428 					BPL FOUND
   429 					.endr
Source: REPT
   427 72D4 A4 B7			LDY ACTIVE+#
   427 72D6 10 7E			BPL FOUND
   427 72D8 A4 B8			LDY ACTIVE+#
   427 72DA 10 7A			BPL FOUND
   427 72DC A4 B9			LDY ACTIVE+#
   427 72DE 10 76			BPL FOUND
   427 72E0 A4 BA			LDY ACTIVE+#
   427 72E2 10 72			BPL FOUND
   427 72E4 A4 BB			LDY ACTIVE+#
   427 72E6 10 6E			BPL FOUND
   427 72E8 A4 BC			LDY ACTIVE+#
   427 72EA 10 6A			BPL FOUND
   427 72EC A4 BD			LDY ACTIVE+#
   427 72EE 10 66			BPL FOUND
   427 72F0 A4 BE			LDY ACTIVE+#
   427 72F2 10 62			BPL FOUND
   427 72F4 A4 BF			LDY ACTIVE+#
   427 72F6 10 5E			BPL FOUND
   427 72F8 A4 C0			LDY ACTIVE+#
   427 72FA 10 5A			BPL FOUND
   427 72FC A4 C1			LDY ACTIVE+#
   427 72FE 10 56			BPL FOUND
   427 7300 A4 C2			LDY ACTIVE+#
   427 7302 10 52			BPL FOUND
   427 7304 A4 C3			LDY ACTIVE+#
   427 7306 10 4E			BPL FOUND
   427 7308 A4 C4			LDY ACTIVE+#
   427 730A 10 4A			BPL FOUND
   427 730C A4 C5			LDY ACTIVE+#
   427 730E 10 46			BPL FOUND
   427 7310 A4 C6			LDY ACTIVE+#
   427 7312 10 42			BPL FOUND
   427 7314 A4 C7			LDY ACTIVE+#
   427 7316 10 3E			BPL FOUND
   427 7318 A4 C8			LDY ACTIVE+#
   427 731A 10 3A			BPL FOUND
   427 731C A4 C9			LDY ACTIVE+#
   427 731E 10 36			BPL FOUND
   427 7320 A4 CA			LDY ACTIVE+#
   427 7322 10 32			BPL FOUND
   427 7324 A4 CB			LDY ACTIVE+#
   427 7326 10 2E			BPL FOUND
   427 7328 A4 CC			LDY ACTIVE+#
   427 732A 10 2A			BPL FOUND
   427 732C A4 CD			LDY ACTIVE+#
   427 732E 10 26			BPL FOUND
   427 7330 A4 CE			LDY ACTIVE+#
   427 7332 10 22			BPL FOUND
   427 7334 A4 CF			LDY ACTIVE+#
   427 7336 10 1E			BPL FOUND
   427 7338 A4 D0			LDY ACTIVE+#
   427 733A 10 1A			BPL FOUND
   427 733C A4 D1			LDY ACTIVE+#
   427 733E 10 16			BPL FOUND
   427 7340 A4 D2			LDY ACTIVE+#
   427 7342 10 12			BPL FOUND
   427 7344 A4 D3			LDY ACTIVE+#
   427 7346 10 0E			BPL FOUND
   427 7348 A4 D4			LDY ACTIVE+#
   427 734A 10 0A			BPL FOUND
   427 734C A4 D5			LDY ACTIVE+#
   427 734E 10 06			BPL FOUND
   427 7350 A4 D6			LDY ACTIVE+#
   427 7352 10 02			BPL FOUND
Source: collisions.asm
   430
   431 				;	lda active+63
   432 				;	bne _skp				; i to w³aœciwie nie ma prawa siê wydarzyæ
   433 7354 A0 20			ldy #mobjects
   434 7356 C4 7F		found	cpy objects
   435 7358 90 02			scc
   436 735A 84 7F			sty objects
   437
   438 735C 88				dey
   439
   440 735D 20 07 93			ADD_NEW_BALL			; dodajemy now¹ kulê pod indeksem z rejestru Y
   441
   442 				/* ---------------------------------------- */
   443 				/*	      losujemy BONUS               */
   444 				/* ---------------------------------------- */
   445 				; rejestry X, Y pozostaj¹ nienaruszone
   446
   447 7360 A5 72			lda bonus.x			; jeœli jakiœ bonus jest w u¿yciu to BONUS.X > 0
   448 7362 0D 4A 70			ora tnt+1			; gdy kule wybuchaj¹ nie bêdzie bonusów
   449 7365 0D 89 90			ora BALL_COLLISION.stop+1	; gdy kule stoj¹ nie bêdzie bonusów
   450 7368 D0 49			bne quit
   451
   452 736A 85 74			sta bonus.tim		; = 0
   453
   454 736C AD 0A D2			lda $d20a
   455 736F 4A				lsr @
   456 7370 29 0F			and #$0f
   457 7372 A8				tay
   458
   459 7373 B9 B9 73			lda cnt_bonus,y		; ograniczona liczba wyst¹pieñ bonusu
   460 7376 C9 02			cmp #max_bonus_counter
   461 7378 B0 39			bcs quit
   462
   463 737A 18 69 01			add #1
   464 737D 99 B9 73			sta cnt_bonus,y
   465
   466 7380 B9 C9 73		mode	lda typ_bonus,y
   467 7383 F0 2E			beq quit
   468 7385 C9 FF			cmp #$ff		; bonusy nie bêd¹ siê powtarza³y
   469 = 7386			old_bonus equ *-1
   470 7387 F0 2A			beq quit
   471
   472 7389 85 75			sta bonus.typ
   473
   474 738B 8D 86 73			sta old_bonus
   475
   476 738E BD 80 02			lda posy,x
   477 7391 4A 4A 4A			:3 lsr @
   478 7394 D0 03			sne
   479 7396 18 69 01			add #1
   480
   481 7399 C9 11			cmp #scrhig-2
   482 739B 90 02			scc
   483 739D A9 10			lda #scrhig-3
   484
   485 739F 85 73			sta bonus.y
   486
   487 73A1 A4 93			ldy harp0.x
   488 73A3 B9 00 0B			lda min52div4,y
   489 73A6 85 72			sta bonus.x
   490
   491 73A8 20 9E 92			jsr GO_BONUS.testXY
   492 73AB C0 00			cpy #0
   493 73AD F0 04			beq quit
   494
   495 73AF A9 00 85 72			mva #0 bonus.x
   496
   497 73B3			quit
   498 73B3 BC 00 02			ldy ttype,x
   499
   500 73B6 4C 0D 71			jmp HERO
   501
   502 					.endl DETECT
   503
   504 = 73B9			cnt_bonus	.ds 16
   505
   506 73C9				.array	typ_bonus [16] .byte
   507  [0001] 01			[1]	= bonusCode.heart
   508  [0004] 03			[4]	= bonusCode.clock
   509  [0006] 02			[6]	= bonusCode.shield
   510  [0009] 06			[9]	= bonusCode.tnt
   511  [000B] 05			[11]	= bonusCode.harpun
   512  [000E] 04			[14]	= bonusCode.harpun_h
   513 					.enda
   514
   515 73D9				.array	typ_bonus_panic [36] .byte
   516  [0002] 01			[2]	= bonusCode.heart
   517  [0005] 02			[5]	= bonusCode.shield
   518  [0007] 01			[7]	= bonusCode.heart
   519  [000A] 02			[10]	= bonusCode.shield
   520  [000C] 02			[12]	= bonusCode.shield
   521  [000D] 01			[13]	= bonusCode.heart
   522  [000E] 01			[14]	= bonusCode.heart
   523  [0011] 01			[17]	= bonusCode.heart
   524 					.enda
   525
   526 				.endp COLLISIONS
  1368
  1369 				* ---------------------------
  1370 				* ---	INIT
  1371 				* ---------------------------
  1372 73FD			.proc	INIT
  1373
  1374 73FD A9 B0 8D 1D 3C A9 + 	mwa #LOOP LOOP.napisy	; wy³¹czenie napisów PAUSE i TIME OUT
  1375
  1376 7407 20 BC 88			jsr CLRHARP.setPMClear	; wywo³aæ przed zerowaniem strony zerowej
  1377
  1378 					CLRPAGES >$000 #1 #0	; koniecznie zerujemy ca³¹ stronê zerow¹
  1378 				 LDY >$000\ LDX# 1\ LDA# 0\ JSR CLRPAGES
  1378 740A A0 00		 LDY >$000
  1378 740C A2 01		 LDX# 1
  1378 740E A9 00		 LDA# 0
  1378 7410 20 14 89		 JSR CLRPAGES
  1379
  1380 				.nowarn	CLRPAGES >$200 #1	; strone 2 te¿ czyœcimy (regA = 0)
  1380 				 LDY >$200\ LDX# 1\ JSR CLRPAGES
  1380 7413 A0 02		 LDY >$200
  1380 7415 A2 01		 LDX# 1
  1380 7417 20 14 89		 JSR CLRPAGES
  1381
  1382 741A A9 7C 85 7B			mva #48+4+72	hposx	; inicjalizacja pozycji poziomej i pionowej
  1383 741E A9 78 85 7C			mva #scrhig*8-32 hposy	; bohatera wymagana dla PANIC MODE
  1384
  1385 7422 85 7D			sta yB1old
  1386 7424 85 7E			sta yB2old
  1387
  1388 				;	mva #$ff	HERO.blkh1	; harpun #1 zablokowany
  1389
  1390 7426 20 09 99			jsr SetDLI.init
  1391
  1392 7429 A9 2C 8D 56 98		mva #{bit}	dliDeath
  1393
  1394 742E A9 02 8D 3C 88		mva #=frmR	PLAYER.direct
  1395
  1396 7433 A9 00 8D D3 85		mva #$00	HERO.blkh0		; harpun #0 odblokowany
  1397
  1398 7438 8D C3 82			sta NMI._dmactl
  1399
  1400 743B 8D 51 83			sta NMI.old_joy
  1401 743E 8D FD 82			sta NMI.starsExplosion			; animacja gwiazdek zablokowana
  1402 7441 8D 50 83			sta NMI.vbltim				; uruchamiamy zegar
  1403 7444 8D 56 83			sta NMI.second
  1404 7447 8D 58 83			sta NMI.timer+1
  1405 744A 8D 59 83			sta NMI.timer+2
  1406
  1407 744D 8D F7 88			sta CLRHARP.clrPMB1+1
  1408 7450 8D 06 89			sta CLRHARP.clrPMB2+1
  1409
  1410 7453 85 90			sta ledder
  1411
  1412 7455 85 68			sta hr0
  1413
  1414 7457 85 72			sta bonus.x
  1415
  1416 7459 8D 4A 70			sta COLLISIONS.tnt+1			; wy³¹czenie TNT
  1417
  1418 745C 8D 89 90			sta BALL_COLLISION.stop+1		; wy³¹czenie blokady ruchu kul
  1419 745F 8D 11 90			sta BALL_COLLISION_PANIC.stop+1
  1420
  1421 7462 8D 2A 86			sta PLAYERB1.blink			; wy³¹czamy mruganie
  1422
  1423 7465 8D DF 89			sta clrWALL.skip+1			; umo¿liwienie testu rozbijanego murku
  1424
  1425
  1426 				;	mva #1 harp0.hook
  1427
  1428 7468 A9 64			lda #100
  1429 746A 8D B1 8F			sta stars.dataStar[0].py		; inicjujemy poprzednia pozycje Y gwiazdek
  1430 746D 8D B6 8F			sta stars.dataStar[1].py
  1431 7470 8D BB 8F			sta stars.dataStar[2].py
  1432 7473 8D C0 8F			sta stars.dataStar[3].py
  1433
  1434 7476 8D A0 85			sta HERO.r_d010				; FIRE nie zosta³ naciœniêty
  1435
  1436 7479 A9 FF 85 7A			mva #$ff explose			; wartosc =$ff wylacza animacje eksplozji kuli
  1437
  1438 747D 8D 86 73			sta COLLISIONS.DETECT.old_bonus		; reset OLD_BONUS, ka¿da wartoœæ > 6
  1439
  1440 7480 A9 01 8D 54 83		mva #delay_joy_default_value	NMI.delay_joy
  1441 7485 A9 FF 8D 55 83		mva #delay_trig_default_value	NMI.delay_trig
  1442
  1443 				;	mva	#defaultPrior	gtia+1
  1444 748A A9 08 8D B1 80		mva	#colm3Harpun	__colpm3	; przywracamy kolor harpunu
  1445
  1446 748F A9 C7 8D C5 8E		mva	<stars.frm1	stars.anm+1
  1447
  1448 7494 A9 02 8D 7D 98		mva #colpm0Hero	chero0+1			; przywracamy kolory bohatera
  1449 7499 A9 78 8D 82 98		mva #colpm1Hero	chero1+1
  1450 749E A9 18 8D 87 98		mva #colpm2Hero	chero2+1
  1451
  1452 74A3 A9 BD 8D 0D 71		mva #{lda posy,x}	COLLISIONS.DETECT.HERO
  1453 74A8 A9 80 8D 0E 71 A9 + 	mwa #posy		COLLISIONS.DETECT.HERO+1
  1454
  1455 				// liczba ¿yæ na znakach
  1456
  1457 74B2 A9 00			lda #0				;lives
  1458 = 74B3			lives	equ *-1
  1459 74B4 D0 08			bne lskp
  1460
  1461 74B6 20 FB 8B			jsr ResetScore
  1462
  1463 74B9 A9 03 8D B3 74		mva #3 lives			; pocz¹tkowa liczba zyc
  1464
  1465 74BE			lskp
  1466 				;		mva #$f2 $00	; dla testow
  1467
  1468
  1469 				// czyœcimy pamiêæ $D800..$DFFF, PMG+$0300..$07FF
  1470
  1471 					CLRPAGES	>scr1		#4 #pustak
  1471 				 LDY >SCR1\ LDX# 4\ LDA# PUSTAK\ JSR CLRPAGES
  1471 74BE A0 D8		 LDY >SCR1
  1471 74C0 A2 04		 LDX# 4
  1471 74C2 A9 28		 LDA# PUSTAK
  1471 74C4 20 14 89		 JSR CLRPAGES
  1472 					CLRPAGES	>scr2		#4 #pustak
  1472 				 LDY >SCR2\ LDX# 4\ LDA# PUSTAK\ JSR CLRPAGES
  1472 74C7 A0 DC		 LDY >SCR2
  1472 74C9 A2 04		 LDX# 4
  1472 74CB A9 28		 LDA# PUSTAK
  1472 74CD 20 14 89		 JSR CLRPAGES
  1473
  1474 					CLRPAGES	>pmgB1+$300	#5 #0	; regA = 0
  1474 				 LDY >PMGB1+$300\ LDX# 5\ LDA# 0\ JSR CLRPAGES
  1474 74D0 A0 03		 LDY >PMGB1+$300
  1474 74D2 A2 05		 LDX# 5
  1474 74D4 A9 00		 LDA# 0
  1474 74D6 20 14 89		 JSR CLRPAGES
  1475 				.nowarn	CLRPAGES	>pmgB2+$300	#5	; regA = 0
  1475 				 LDY >PMGB2+$300\ LDX# 5\ JSR CLRPAGES
  1475 74D9 A0 23		 LDY >PMGB2+$300
  1475 74DB A2 05		 LDX# 5
  1475 74DD 20 14 89		 JSR CLRPAGES
  1476
  1477 				.nowarn	CLRPAGES	>killWall	#1	; regA = 0
  1477 				 LDY >KILLWALL\ LDX# 1\ JSR CLRPAGES
  1477 74E0 A0 09		 LDY >KILLWALL
  1477 74E2 A2 01		 LDX# 1
  1477 74E4 20 14 89		 JSR CLRPAGES
  1478
  1479 				.nowarn	CLRPAGES	>clrWallIDX	#1	; regA = 0
  1479 				 LDY >CLRWALLIDX\ LDX# 1\ JSR CLRPAGES
  1479 74E7 A0 08		 LDY >CLRWALLIDX
  1479 74E9 A2 01		 LDX# 1
  1479 74EB 20 14 89		 JSR CLRPAGES
  1480
  1481 				.nowarn	CLRPAGES	>drabin		#4	; regA = 0
  1481 				 LDY >DRABIN\ LDX# 4\ JSR CLRPAGES
  1481 74EE A0 0C		 LDY >DRABIN
  1481 74F0 A2 04		 LDX# 4
  1481 74F2 20 14 89		 JSR CLRPAGES
  1482
  1483
  1484 74F5 A2 1F			ldx #mobjects-1
  1485 74F7 8A			fact	txa
  1486 74F8 18 69 01			add #1
  1487 74FB 95 B7			sta active,x
  1488 74FD CA				dex
  1489 74FE 10 F7			bpl fact
  1490
  1491
  1492 7500 20 D1 71			jsr COLLISIONS.DETECT.ENERGY.init
  1493
  1494 7503 A9 D0 85 5C A9 D8 + 	:6 mva <(bonus0+#)*8 bd0+#*2	; sta³e wartoœci m³odszych bajtów adresu (BD)
  1495
  1496 751B 20 0C 98			jsr init2
  1497
  1498
  1499 				// inicjujemy tablice LINV, HINV, LDRABIN, HDRABIN
  1500
  1501 751E A9 04 85 00 A9 B3 + 	mwa #invers+4 ln0
  1502 7526 A9 04 85 02 A9 0C + 	mwa #drabin+4 ln1
  1503
  1504 752E A2 00			ldx #0
  1505 7530 A5 00 9D 50 F7	iinv	mva	ln0	linv,x
  1506 7535 A5 01 9D 70 F7		mva	ln0+1	hinv,x
  1507
  1508 753A A5 02 9D 90 F7		mva	ln1	ldrabin,x
  1509 753F A5 03 9D B0 F7		mva	ln1+1	hdrabin,x
  1510
  1511 7544 18 A5 00 69 30 85 + 	adw ln0 #scrwid
  1512 754F 18 A5 02 69 30 85 + 	adw ln1 #scrwid
  1513
  1514 755A E8				inx
  1515 755B E0 20			cpx #32
  1516 755D D0 D1			bne iinv
  1517
  1518
  1519 				// inicjujemy tablice CLRIDX, TMINY, TMAXY
  1520
  1521 755F A2 4F			ldx #79
  1522 7561 A9 FF 9D 50 13	f0	mva	#$ff		clridx,x
  1523 7566 A9 00 9D 50 17		mva	#$00		tminy,x
  1524 756B A9 97 9D 50 1B		mva	#scrhig*8-1	tmaxy,x
  1525 7570 CA				dex
  1526 7571 10 EE			bpl f0
  1527
  1528
  1529 				// inicjujemy tablice YPATH
  1530
  1531 7573 A0 00			ldy #0
  1532 7575 8C 7E 75			sty oldpthy
  1533
  1534 7578 BE B2 7E		ipth	ldx _ypath,y
  1535
  1536 757B 8A				txa
  1537 757C 38 E9 00			sub #0
  1538 = 757E			oldpthy	equ *-1
  1539
  1540 757F 8E 7E 75			stx oldpthy
  1541
  1542 7582 9D 50 FB		ilp	sta ypath,x		; przyrost pozycji Y dla najmniejszych kul (#4)
  1543 7585 48				pha
  1544 7586 C9 07			cmp #7
  1545 7588 90 02			scc
  1546 758A A9 06			lda #7-1
  1547
  1548 758C 9D 50 FF			sta ypath_4,x		; przyrost pozycji Y kuli #4
  1549 758F 68				pla
  1550 7590 E8				inx
  1551 7591 E0 98			cpx #scrhig*8
  1552 7593 D0 ED			bne ilp
  1553
  1554 7595 C8				iny
  1555 7596 C0 19			cpy #.len(_ypath)
  1556 7598 D0 DE			bne ipth
  1557
  1558 759A AD 51 FB 8D 50 FB		mva ypath+1 ypath
  1559 75A0 AD 51 FF 8D 50 FF		mva ypath_4+1 ypath_4
  1560
  1561
  1562 				// inicjujemy tablice HADR1, HADR2
  1563
  1564 75A6 A0 00			ldy #0
  1565 75A8 98			fntlp	tya
  1566 75A9 4A 4A 4A			:3 lsr @
  1567 75AC AA				tax
  1568
  1569 75AD BD 9F 7E		tf	lda tfonts,x
  1570
  1571 75B0 99 50 EF			sta hadr1,y
  1572 75B3 18 69 02			add #2
  1573 75B6 99 50 F3			sta hadr2,y
  1574
  1575 75B9 C8				iny
  1576 75BA C0 98			cpy #scrhig*8
  1577 75BC D0 EA			bne fntlp
  1578
  1579
  1580 				// inicjujemy tablice LFILLB1, HFILLB1, _LFILLB1, _HFILLB1, LFILLB2, HFILLB2, _LFILLB2, _HFILLB2
  1581
  1582 75BE A9 EB 85 00 A9 4C + 	mwa #CLEARB1.FILLB1	ln0
  1583 75C6 A9 7C 85 02 A9 50 + 	mwa #CLEARB1._FILLB1	ln1
  1584
  1585 75CE A9 A2 85 04 A9 54 + 	mwa #CLEARB2.FILLB2	ln2
  1586 75D6 A9 33 85 06 A9 58 + 	mwa #CLEARB2._FILLB2	ln3
  1587
  1588 75DE A0 00			ldy #0
  1589 75E0 A5 00 99 50 1F	lplh	mva	ln0	lfillb1,y
  1590 75E5 A5 01 99 50 C3		mva	ln0+1	hfillb1,y
  1591
  1592 75EA A5 02 99 50 C7		mva	ln1	_lfillb1,y
  1593 75EF A5 03 99 50 CB		mva	ln1+1	_hfillb1,y
  1594
  1595 75F4 A5 04 99 50 CF		mva	ln2	lfillb2,y
  1596 75F9 A5 05 99 50 E3		mva	ln2+1	hfillb2,y
  1597
  1598 75FE A5 06 99 50 E7		mva	ln3	_lfillb2,y
  1599 7603 A5 07 99 50 EB		mva	ln3+1	_hfillb2,y
  1600
  1601 7608 18 A5 00 69 06 85 + 	adw ln0 #6
  1602 7613 18 A5 02 69 06 85 + 	adw ln1 #6
  1603 761E 18 A5 04 69 06 85 + 	adw ln2 #6
  1604 7629 18 A5 06 69 06 85 + 	adw ln3 #6
  1605
  1606 7634 C8				iny
  1607 7635 C0 99			cpy #scrhig*8+1
  1608 7637 D0 A7			bne lplh
  1609
  1610
  1611 7639 20 F7 7E			PLAYFIELD		; tworzymy pole gry
  1612
  1613
  1614 				// rozpoznajemy tryb rozgrywki
  1615
  1616 763C A2 77			ldx #40*3-1
  1617 763E A9 0F			lda #spacja
  1618 7640 9D 14 39 CA 10 FA		sta:rpl panel,x-
  1619
  1620 7646 A2 0D			ldx #13
  1621 7648 BD B3 39 9D 1B 39	ebar	mva energy0,x energy_bar-40-1,x
  1622 764E BD C1 39 9D 43 39		mva energy1,x energy_bar-1,x
  1623 7654 BD CF 39 9D 6B 39		mva energy2,x energy_bar+40-1,x
  1624 765A CA				dex
  1625 765B 10 EB			bpl ebar
  1626
  1627
  1628 765D AD B3 74			lda lives
  1629 7660 A0 01			ldy #1
  1630 7662 20 1A 9A			jsr Digit
  1631
  1632 7665 AD E9 FF			lda select
  1633 7668 D0 03 4C F4 76		jeq arcade
  1634
  1635 				/*	---------------------
  1636 					 P A N I C   M O D E
  1637 					---------------------
  1638 				*/
  1638
  1639
  1640 766D			panic
  1641 766D A2 0D			ldx #13
  1642 766F BD F2 39 9D 2C 39	lbar	mva level0,x level_bar-40-1,x
  1643 7675 BD 31 3C 9D 54 39		mva level1,x level_bar-1,x
  1644 767B BD 3F 3C 9D 7C 39		mva level2,x level_bar+40-1,x
  1645 7681 CA				dex
  1646 7682 10 EB			bpl lbar
  1647
  1648 7684 A2 01			ldx #1
  1649 = 7685			level_panic equ *-1
  1650
  1651 				.nowarn	div #10
  1651 				 LDA# 10\ JSR DIV
  1651 7686 A9 0A		 LDA# 10
  1651 7688 20 03 9A		 JSR DIV
  1652 768B AA				tax
  1653
  1654 768C A0 00			ldy #0
  1655
  1656 768E A5 9A			lda div.ACC
  1657 7690 F0 04			beq s0
  1658
  1659 7692 99 34 39			sta level_bar-40+7,y
  1660 7695 C8				iny
  1661 7696			s0
  1662 7696 8A				txa
  1663 7697 99 34 39			sta level_bar-40+7,y
  1664
  1665
  1666 769A A9 0F			lda #spacja
  1667 769C A0 09			ldy #9
  1668 769E 99 92 3A 88 10 FA		sta:rpl sstage,y-
  1669
  1670 76A4 A9 00 8D 24 72		mva #0 COLLISIONS.DETECT.hitBall.level
  1671
  1672 76A9 A9 00			lda #0
  1673 = 76AA			ground	equ *-1
  1674
  1675 				.nowarn	GROUND_MOVEUP		; przesuniecie pod³ogi do góry (max #9)
  1675 76AB 20 1E 94		 JSR GROUND_MOVEUP
  1676
  1677 76AE A9 10			lda #16			; 16 = najwieksza kula
  1678 76B0 85 91			sta lbcount
  1679
  1680 76B2 A9 28			lda #40
  1681 76B4 38 E5 91			sub lbcount
  1682 76B7 85 92			sta lblimit
  1683
  1684 76B9 A9 04 8D C8 9A		mva #deathCode.panic_stop GameEnd.reason
  1685
  1686 76BE A9 7F 8D 16 84		mva #127 ADD_PANIC_BALL.delay
  1687
  1688 76C3 8D 9A 8D			sta INTRO.nxtLvl
  1689 					
  1690
  1691 76C6 A9 2C			lda #{bit*}
  1692 76C8 8D D0 3B			sta LOOP.wall0
  1693 76CB 8D 06 3C			sta LOOP.wall1
  1694 				;	sta LOOP.wall2
  1695 				;	sta LOOP.wall3
  1696
  1697 76CE A9 0E 8D 21 92 A9 + 	mwa #BALL_COLLISION_PANIC	ENGINE.mode+1
  1698 					
  1699 76D8 AD 85 76			lda INIT.level_panic		; stopien trudnosci dla PANIC
  1700 76DB 0A				asl @
  1701 76DC 18 69 D9			add <COLLISIONS.typ_bonus_panic
  1702 76DF 8D 81 73			sta COLLISIONS.DETECT.mode+1
  1703 76E2 A9 00			lda #0
  1704 76E4 69 73			adc >COLLISIONS.typ_bonus_panic
  1705 76E6 8D 82 73			sta COLLISIONS.DETECT.mode+2
  1706
  1707 76E9 A9 20 8D 84 72		mva #{jsr*} COLLISIONS.DETECT.panic
  1708 					
  1709 76EE 20 53 99			GET_LEVEL	; #0
  1710
  1711 76F1 4C 49 77			jmp skip
  1712
  1713
  1714 				/*	---------------------
  1715 					 T O U R     M O D E
  1716 					---------------------
  1717 				*/
  1717
  1718
  1719 76F4			arcade
  1720
  1721 				// inicjowanie obiektów, w obszarze INVERS zapiszemy informacje o grupach obiektów
  1722
  1723 				; t[0]:=objList[i].g;
  1724 				; t[1]:=objList[i].o;
  1725
  1726 				; t[0]:=objList[i].x;
  1727 				; t[1]:=objList[i].y;
  1728 				; t[2]:=objList[i].p;
  1729
  1730 76F4 A9 00			lda #0			; time 000
  1731 76F6 A0 1F			ldy #31
  1732 76F8 20 1A 9A			jsr Digit
  1733
  1734 76FB A9 00			lda #0
  1735 76FD A0 22			ldy #34
  1736 76FF 20 1A 9A			jsr Digit
  1737
  1738 7702 A9 00			lda #0
  1739 7704 A0 25			ldy #37
  1740 7706 20 1A 9A			jsr Digit
  1741
  1742 7709 A2 06			ldx #6
  1743 770B BD DD 39 9D 2B 39	tbar	mva time0,x energy_bar-40-1+16,x
  1744 7711 BD E4 39 9D 53 39		mva time1,x energy_bar-1+16,x
  1745 7717 BD EB 39 9D 7B 39		mva time2,x energy_bar+40-1+16,x
  1746 771D CA				dex
  1747 771E 10 EB			bpl tbar
  1748
  1749 					GROUND_MOVEUP #0	; przesuniecie pod³ogi do góry (max #9)
  1749 				 LDA# 0\ JSR GROUND_MOVEUP
  1749 7720 A9 00		 LDA# 0
  1749 7722 20 1E 94		 JSR GROUND_MOVEUP
  1750
  1751 7725 A9 20			lda #{jsr*}
  1752 7727 8D D0 3B			sta LOOP.wall0
  1753 772A 8D 06 3C			sta LOOP.wall1
  1754 				;	sta LOOP.wall2
  1755 				;	sta LOOP.wall3
  1756
  1757 772D A9 7B 8D 21 92 A9 + 	mwa #BALL_COLLISION	ENGINE.mode+1
  1758
  1759 7737 A9 C9 8D 81 73 A9 + 	mwa #COLLISIONS.typ_bonus	COLLISIONS.DETECT.mode+1
  1760
  1761 7741 A9 2C 8D 84 72		mva #{bit*} COLLISIONS.DETECT.panic
  1762
  1763 				;	ldx level?
  1764
  1765 7746 20 53 99		.nowarn	GET_LEVEL
  1766
  1767 				;	@prawy_nawias #4
  1768
  1769 				/*	zdekodowanie levelu	*/
  1770
  1771 7749 A9 00 85 6A A9 20 + skip	mwa #inflate_data hlp
  1772
  1773 7751 A2 00			ldx #0
  1774
  1775 7753 4C 9E 77			jmp cpLVL
  1776
  1777 7756 E6 6A D0 02 E6 6B	kula_	inw hlp
  1778
  1779 775C A0 00		kula	ldy #0
  1780 775E B1 6A			lda (hlp),y
  1781 7760 30 36			bmi next
  1782
  1783 7762 9D 00 02			sta ttype,x
  1784
  1785 7765 B5 B7			lda active,x
  1786 7767 09 80			ora #$80
  1787 7769 95 B7			sta active,x
  1788
  1789 776B A9 01 9D A0 02		mva #$01 addy,x
  1790
  1791 7770 A0 03			ldy #3		; parametr kuli, czyli kierunek ruchu w poziomie
  1792 7772 B1 6A			lda (hlp),y
  1793 7774 9D 60 02			sta addx,x
  1794
  1795 7777 A0 01			ldy #1		; pozycja poziomia kuli
  1796 7779 B1 6A			lda (hlp),y
  1797 777B 0A 0A			:2 asl @
  1798 777D 9D 40 02			sta posx,x
  1799
  1800 7780 C8				iny		; pozycja pionowa kuli
  1801 7781 B1 6A			lda (hlp),y
  1802 7783 0A 0A 0A			:3 asl @
  1803 7786 9D 80 02			sta posy,x
  1804
  1805 7789 E8				inx
  1806
  1807 778A 18 A5 6A 69 04 85 + 	adw hlp #4
  1808 7795 4C 5C 77			jmp kula
  1809
  1810
  1811 7798 E6 6A D0 02 E6 6B	next	inw hlp
  1812
  1813 779E A0 00		cpLVL	ldy #0
  1814 77A0 B1 6A			lda (hlp),y
  1815 77A2 F0 B2			beq kula_
  1816
  1817 77A4 C9 FF			cmp #$ff
  1818 77A6 D0 03 4C E1 79		jeq CPlvlQ
  1819
  1820 77AB E6 6A D0 02 E6 6B		inw hlp
  1821
  1822 77B1 8D 51 78			sta group
  1823
  1824 77B4 A0 00		others	ldy #0		; obiekt inny ni¿ kula (5..)
  1825 77B6 B1 6A			lda (hlp),y
  1826 77B8 8D EC 77			sta testObj
  1827
  1828 77BB C9 06		oskp3	cmp #6
  1829 77BD D0 04			bne oskp0
  1830
  1831 77BF A9 E8			lda #murek1
  1832 77C1 D0 0B			bne oskp2
  1833
  1834 77C3 C9 07		oskp0	cmp #7
  1835 77C5 D0 04			bne oskp1
  1836
  1837 77C7 A9 E9			lda #murek2
  1838 77C9 D0 03			bne oskp2
  1839
  1840 77CB 18 69 A4		oskp1	add #murek0-5
  1841 77CE 8D 4B 78		oskp2	sta char
  1842
  1843 77D1 E6 6A D0 02 E6 6B		inw hlp
  1844
  1845 77D7 A0 00		othLOOP	ldy #0
  1846 77D9 B1 6A			lda (hlp),y
  1847 77DB 30 BB			bmi next
  1848
  1849 77DD C8				iny		; Y
  1850 77DE B1 6A			lda (hlp),y
  1851 77E0 A8				tay
  1852
  1853 77E1 B9 0F 38 85 4E		mva lmul48,y ln39
  1854 77E6 B9 23 38 85 4F		mva hmul48,y ln39+1
  1855
  1856 77EB A9 00			lda #0
  1857 = 77EC			testObj	equ *-1
  1858 77ED C9 08			cmp #8			; kod obiektu odpowiadaj¹cy DRABINCE
  1859 77EF F0 71			beq drabinka
  1860 77F1 90 06			bcc skp
  1861
  1862 77F3 18 69 A1			add #murL0-9
  1863 77F6 8D 4B 78			sta char
  1864
  1865 77F9 18 A5 4E 69 00 85 + skp	adw ln39 #scr1 ln0
  1866 7806 18 A5 4E 69 00 85 + 	adw ln39 #scr2 ln1
  1867 7813 18 A5 4E 69 00 85 + 	adw ln39 #invers ln2
  1868
  1869 7820 A0 00			ldy #0		; X
  1870 7822 B1 6A			lda (hlp),y
  1871 7824 18 69 04			add #4
  1872 7827 A8				tay
  1873
  1874 7828 AD EC 77			lda testObj
  1875 782B C9 19			cmp #25
  1876 782D 90 1B			bcc skpChar
  1877
  1878 782F 18 69 5F			add #120-25
  1879 7832 8D 51 78			sta group
  1880
  1881 7835 C9 7C			cmp #124	; OBJECT 29
  1882 7837 F0 03			beq invOK
  1883 7839 A9 00			lda #0
  1884 783B 2C				dta {bit*}
  1885 783C A9 80		invOK	lda #$80
  1886
  1887 783E 8D 46 78			sta cinv
  1888
  1889 7841 B1 00			lda (ln0),y
  1890 7843 29 7F			and #$7f
  1891 7845 09 00			ora #0
  1892 = 7846			cinv	equ *-1
  1893 				;	sta (ln0),y
  1894 				;	sta (ln1),y
  1895
  1896 7847 4C 4C 78			jmp cskp
  1897
  1898 784A A9 00		skpChar	lda #0
  1899 = 784B			char	equ *-1
  1900 784C 91 00		cskp	sta (ln0),y
  1901 784E 91 02			sta (ln1),y
  1902
  1903 7850 A9 00			lda #0
  1904 = 7851			group	equ *-1
  1905 7852 91 04			sta (ln2),y
  1906 7854			continue
  1907 7854 18 A5 6A 69 02 85 + 	adw hlp #2
  1908 785F 4C D7 77			jmp othLOOP
  1909
  1910 7862			drabinka
  1911 7862 8E C0 79			stx oldX
  1912
  1913 7865 B9 07 7E 85 00		mva lmul40,y	ln0
  1914 786A B9 1B 7E 85 01		mva hmul40,y	ln0+1
  1915
  1916 786F 18 A5 4E 69 00 85 + 	adw ln39 #drabin ln1
  1917
  1918 787C A0 00			ldy #0		; X
  1919 787E B1 6A			lda (hlp),y
  1920
  1921 7880 18 65 00			add ln0
  1922 7883 85 00			sta ln0
  1923 7885 90 02			scc
  1924 7887 E6 01			inc ln0+1
  1925
  1926 				; obliczymy adresy 3-ech kolejnych znaków
  1927
  1928 7889 A9 E8 8D 48 79 A9 + 	mwa #inflate_data+$2e8	chr0+1		// !!! w INFLATE_DATA znajduje siê tak¿e aktualny level !!!
  1929 7893 A9 F0 8D 54 79 A9 + 	mwa #inflate_data+$2f0	chr1+1		// !!! dane levelu nie mog¹ byæ d³u¿sze ni¿ $2e8 bajtów !!!
  1930 789D A9 F8 8D 60 79 A9 + 	mwa #inflate_data+$2f8	chr2+1
  1931
  1932 78A7 A5 00 85 04 A5 01 + 	mwa ln0 ln2
  1933
  1934 78AF A2 00			ldx #0
  1935 78B1 A0 00		cpChr	ldy #0
  1936 78B3 B1 04 9D E8 22		mva (ln2),y	inflate_data+$2e8,x
  1937 78B8 C8				iny
  1938 78B9 B1 04 9D F0 22		mva (ln2),y	inflate_data+$2f0,x
  1939 78BE C8				iny
  1940 78BF B1 04 9D F8 22		mva (ln2),y	inflate_data+$2f8,x
  1941
  1942 78C4 18 A5 04 69 28 85 + 	adw ln2 #40
  1943 78CF E8				inx
  1944 78D0 E0 08			cpx #8
  1945 78D2 D0 DD			bne cpChr
  1946
  1947 78D4 18 A5 4E 69 00 85 + 	adw ln39 #scr1 ln2
  1948
  1949 78E1 A0 00			ldy #0
  1950 78E3 B1 6A			lda (hlp),y	; X
  1951
  1952 78E5 18 65 04			add ln2
  1953 78E8 85 04			sta ln2
  1954 78EA 90 02			scc
  1955 78EC E6 05			inc ln2+1
  1956
  1957 78EE 18 A5 4E 69 04 85 + 	adw ln39 #invers+4 ln8
  1958
  1959 78FB 8D 8E 79			sta ledSkip
  1960
  1961 78FE B1 6A			lda (hlp),y
  1962 7900 A8				tay
  1963 7901 B1 10			lda (ln8),y
  1964 7903 30 3E			bmi skp2		; jeœli murek miêkki to drabinka pod nim
  1965
  1966 7905 A9 00 8D 8E 79		mva #0 ledSkip
  1967
  1968 790A A0 04			ldy #4
  1969 790C B1 04			lda (ln2),y
  1970 790E 29 7F			and #$7f
  1971 7910 C9 28			cmp #pustak
  1972 7912 90 09			bcc skp0
  1973 7914 20 67 7D			jsr charAdr
  1974 7917 8E 48 79			stx chr0+1
  1975 791A 8D 49 79			sta chr0+2
  1976
  1977 791D A0 05		skp0	ldy #5
  1978 791F B1 04			lda (ln2),y
  1979 7921 29 7F			and #$7f
  1980 7923 C9 28			cmp #pustak
  1981 7925 90 09			bcc skp1
  1982 7927 20 67 7D			jsr charAdr
  1983 792A 8E 54 79			stx chr1+1
  1984 792D 8D 55 79			sta chr1+2
  1985
  1986 7930 A0 06		skp1	ldy #6
  1987 7932 B1 04			lda (ln2),y
  1988 7934 29 7F			and #$7f
  1989 7936 C9 28			cmp #pustak
  1990 7938 90 09			bcc skp2
  1991 793A 20 67 7D			jsr charAdr
  1992 793D 8E 60 79			stx chr2+1
  1993 7940 8D 61 79			sta chr2+2
  1994
  1995 7943 A2 00		skp2	ldx #0
  1996
  1997 7945 A0 00		dlp	ldy #0
  1998 7947 BD FF FF		chr0	lda $ffff,x
  1999 794A 3D 47 7E			and mdrabin,x
  2000 794D 1D 2F 7E			ora ddrabin,x
  2001 7950 91 00			sta (ln0),y
  2002
  2003 7952 C8				iny
  2004 7953 BD FF FF		chr1	lda $ffff,x
  2005 7956 3D 4F 7E			and mdrabin+8,x
  2006 7959 1D 37 7E			ora ddrabin+8,x
  2007 795C 91 00			sta (ln0),y
  2008
  2009 795E C8				iny
  2010 795F BD FF FF		chr2	lda $ffff,x
  2011 7962 3D 57 7E			and mdrabin+16,x
  2012 7965 1D 3F 7E			ora ddrabin+16,x
  2013 7968 91 00			sta (ln0),y
  2014
  2015 796A 18 A5 00 69 28 85 + 	adw ln0 #40
  2016
  2017 7975 E8				inx
  2018 7976 E0 08			cpx #8
  2019 7978 D0 CB			bne dlp
  2020
  2021
  2022 797A A0 00			ldy #0		; X
  2023 797C B1 6A			lda (hlp),y
  2024 797E 18 69 04			add #4
  2025 7981 A8				tay
  2026
  2027 7982 AD 51 78			lda group
  2028 7985 91 02			sta (ln1),y
  2029 7987 C8				iny
  2030 7988 91 02			sta (ln1),y
  2031 798A C8				iny
  2032 798B 91 02			sta (ln1),y
  2033
  2034 798D A9 00			lda #0
  2035 = 798E			ledSkip	equ *-1
  2036 798F D0 2E			bne _skLD
  2037
  2038 7991 18 A5 4E 69 00 85 + 	adw ln39 #scr1 ln8		; wstawienie znaków reprezentujacych drabinke
  2039 799E 18 A5 4E 69 00 85 + 	adw ln39 #scr2 ln9
  2040
  2041 79AB A0 00			ldy #0		; X
  2042 79AD B1 6A			lda (hlp),y
  2043 79AF 8D E0 79			sta putChar.px
  2044 79B2 18 69 04			add #4
  2045 79B5 A8				tay
  2046
  2047 79B6 20 C4 79 20 C4 79 + 	:3 jsr putChar
  2048 79BF			_skLD
  2049 79BF A2 00			ldx #0
  2050 = 79C0			oldX	equ *-1
  2051
  2052 79C1 4C 54 78			jmp continue
  2053
  2054
  2055 79C4			.local	putChar
  2056
  2057 79C4 A2 00			ldx #0
  2058 79C6 B1 10			lda (ln8),y
  2059 79C8 10 02			spl
  2060 79CA A2 80			ldx #$80
  2061
  2062 79CC 8E D3 79			stx inv
  2063
  2064 79CF AD E0 79			lda px
  2065 79D2 09 00			ora #0
  2066 = 79D3			inv	equ *-1
  2067 79D4 91 10			sta (ln8),y
  2068 79D6 18 69 40			add #64
  2069 79D9 91 12			sta (ln9),y
  2070
  2071 79DB EE E0 79			inc px
  2072 79DE C8				iny
  2073 79DF 60				rts
  2074
  2075 79E0 00			px	brk
  2076 				.endl
  2077
  2078 				*---
  2079 79E1			CPlvlQ
  2080 79E1 86 7F			stx objects		; aktualna liczba obiektów
  2081
  2082 79E3 AD E9 FF			lda select
  2083 79E6 F0 03 4C EE 7A		jne lvlCol		; dla PANIC MODE pozosta³e parametry nie istotne
  2084
  2085 79EB A9 00			lda #0
  2086 79ED A2 0F			ldx #15
  2087 79EF 9D C9 73		clrbon	sta COLLISIONS.typ_bonus,x
  2088 79F2 9D B9 73			sta COLLISIONS.cnt_bonus,x
  2089 79F5 CA				dex
  2090 79F6 10 F7			bpl clrbon
  2091
  2092 79F8 C8				iny
  2093 79F9 B1 6A			lda (hlp),y
  2094 79FB 49 FF			eor #$ff
  2095
  2096 79FD 10 05			spl
  2097 79FF A2 01 8E CA 73		mvx #bonusCode.heart	COLLISIONS.typ_bonus+1
  2098
  2099 7A04 0A				asl @
  2100 7A05 10 05			spl
  2101 7A07 A2 02 8E CF 73		mvx #bonusCode.shield	COLLISIONS.typ_bonus+6
  2102
  2103 7A0C 0A				asl @
  2104 7A0D 10 05			spl
  2105 7A0F A2 03 8E CD 73		mvx #bonusCode.clock	COLLISIONS.typ_bonus+4
  2106
  2107 7A14 0A				asl @
  2108 7A15 10 05			spl
  2109 7A17 A2 04 8E D7 73		mvx #bonusCode.harpun_h	COLLISIONS.typ_bonus+14
  2110
  2111 7A1C 0A				asl @
  2112 7A1D 10 05			spl
  2113 7A1F A2 05 8E D4 73		mvx #bonusCode.harpun	COLLISIONS.typ_bonus+11
  2114
  2115 7A24 0A				asl @
  2116 7A25 10 05			spl
  2117 7A27 A2 06 8E D2 73		mvx #bonusCode.tnt	COLLISIONS.typ_bonus+9
  2118
  2119 7A2C C8				iny
  2120 7A2D B1 6A			lda (hlp),y
  2121 7A2F 0A 0A			:2 asl @
  2122 7A31 18 69 30			add #48	;+4
  2123 7A34 85 7B			sta hposx		; pozycja pozioma bohatera
  2124
  2125 7A36 C8				iny
  2126 7A37 A9 13			lda #scrhig
  2127 7A39 38 F1 6A			sub (hlp),y
  2128 7A3C 0A 0A 0A			:3 asl @
  2129 7A3F 8D 46 7A			sta _sb+1
  2130
  2131 7A42 A9 98			lda #scrhig*8
  2132 7A44 38				sec
  2133 7A45 E9 00		_sb	sbc #0
  2134 7A47 85 7C			sta hposy		; pozycja pionowa bohatera
  2135
  2136 7A49 85 7D			sta yB1old
  2137 7A4B 85 7E			sta yB2old
  2138
  2139 7A4D C8				iny
  2140 7A4E B1 6A			lda (hlp),y		; limit czasu
  2141 7A50 48				pha
  2142 7A51 29 03			and #3
  2143 7A53 AA				tax			; minuty
  2144 7A54 BD 91 39			lda mul60,x
  2145 7A57 8D 5F 7A			sta tim
  2146
  2147 7A5A 68				pla			; sekundy
  2148 7A5B 4A 4A			:2 lsr @
  2149 7A5D 18 69 00			add #0
  2150 = 7A5F			tim	equ *-1
  2151
  2152 7A60 8C 7C 7A			sty tY
  2153
  2154 7A63 A0 FF			ldy #$ff		; digit
  2155 7A65 A2 0A			ldx #10
  2156 7A67 38				sec
  2157 7A68 C8			@	iny
  2158 7A69 E9 64			sbc #100
  2159 7A6B B0 FB			bcs @-
  2160 7A6D CA			@	dex
  2161 7A6E 69 0A			adc #10
  2162 7A70 30 FB			bmi @-
  2163
  2164 7A72 8C 57 83			sty NMI.timer
  2165 7A75 8E 58 83			stx NMI.timer+1
  2166 7A78 8D 59 83			sta NMI.timer+2
  2167
  2168 7A7B A0 00			ldy #0
  2169 = 7A7C			tY	equ *-1
  2170
  2171 7A7D C8				iny
  2172 7A7E B1 6A			lda (hlp),y
  2173
  2174 7A80 8D 8F 7B			sta OverlayHeight
  2175
  2176 7A83 F0 69			beq lvlCol		; brak Overlaya
  2177
  2178 7A85 29 0F			and #$0f
  2179 7A87 AA				tax
  2180
  2181 7A88 8D 8F 7B			sta OverlayHeight
  2182
  2183 7A8B C8				iny
  2184 7A8C B1 6A			lda (hlp),y
  2185 7A8E 8D AB 98			sta OvrCol0+1
  2186 7A91 C8				iny
  2187 7A92 B1 6A			lda (hlp),y
  2188 7A94 8D B0 98			sta OvrCol1+1
  2189 7A97 C8				iny
  2190 7A98 B1 6A			lda (hlp),y
  2191 7A9A 8D B5 98			sta OvrCol2+1
  2192
  2193 7A9D C8				iny
  2194 7A9E B1 6A			lda (hlp),y
  2195 7AA0 8D BA 98			sta OvrPly0+1
  2196 7AA3 C8				iny
  2197 7AA4 B1 6A			lda (hlp),y
  2198 7AA6 8D BF 98			sta OvrPly1+1
  2199 7AA9 C8				iny
  2200 7AAA B1 6A			lda (hlp),y
  2201 7AAC 8D C4 98			sta OvrPly2+1
  2202
  2203 7AAF C8				iny
  2204 7AB0 B1 6A			lda (hlp),y
  2205 7AB2 8D C9 98			sta OvrMis0+1
  2206 7AB5 C8				iny
  2207 7AB6 B1 6A			lda (hlp),y
  2208 7AB8 8D CE 98			sta OvrMis1+1
  2209 7ABB C8				iny
  2210 7ABC B1 6A			lda (hlp),y
  2211 7ABE 8D D3 98			sta OvrMis2+1
  2212
  2213 7AC1 A9 04			lda >pmgB1+pmHero0
  2214 7AC3 20 D6 7D			jsr fillOverlay
  2215 7AC6 A9 05			lda >pmgB1+pmHero1
  2216 7AC8 20 D6 7D			jsr fillOverlay
  2217 7ACB A9 06			lda >pmgB1+pmHero2
  2218 7ACD 20 D6 7D			jsr fillOverlay
  2219 7AD0 A9 03			lda >pmgB1+$300
  2220 7AD2 20 D6 7D			jsr fillOverlay
  2221
  2222 7AD5 C8				iny
  2223 7AD6 B1 6A			lda (hlp),y		; zmiany kolorów podestów
  2224
  2225 7AD8 8D 96 7B			sta OverlayChange
  2226
  2227 7ADB F0 11			beq lvlCol
  2228
  2229 7ADD C8				iny
  2230
  2231 7ADE A2 00			ldx #0
  2232 7AE0 B1 6A		mOvr	lda (hlp),y
  2233 7AE2 9D CB 7E			sta ovrColors,x
  2234 7AE5 C8				iny
  2235 7AE6 E8				inx
  2236 7AE7 E0 2A			cpx #14*3
  2237 7AE9 D0 F5			bne mOvr
  2238
  2239 7AEB 8E 96 7B			stx OverlayChange
  2240
  2241 				// inicjowanie kolorów
  2242 7AEE			lvlCol
  2243 7AEE A2 12			ldx #scrhig-1		; zapisujemy wartoœci domyœlne dla przerwañ DLI0..DLI15 (st? $d01e)
  2244
  2245 7AF0 BD 64 7E 85 6A	iniDLI	mva lDli,x hlp
  2246 7AF5 BD 77 7E 85 6B		mva hDli,x hlp+1
  2247
  2248 7AFA A9 1E			lda <$d01e
  2249 7AFC A0 0B			ldy #@sdli._stx+1
  2250 7AFE 91 6A			sta (hlp),y
  2251 				;	ldy #@sdli._sta2+1
  2252 				;	sta (hlp),y
  2253
  2254 7B00 CA				dex
  2255 7B01 10 ED			bpl iniDLI
  2256
  2257
  2258 7B03 A0 03			ldy #@sdli._ldx+1
  2259 7B05 AD 00 B7 99 BD 80		mva colors dli0,y
  2260 7B0B 8D 5F 7E			sta oldCol
  2261
  2262 7B0E A0 0B			ldy #@sdli._stx+1
  2263 7B10 A9 1A 99 BD 80		mva <colbak dli0,y
  2264
  2265 7B15 AD 01 B7 8D 86 80		mva colors+1 c0
  2266 7B1B 8D 60 7E			sta oldCol+1
  2267
  2268 7B1E AD 02 B7 8D 88 80		mva colors+2 c1
  2269 7B24 8D 61 7E			sta oldCol+2
  2270
  2271 7B27 AD 03 B7 8D 93 80		mva colors+3 c2
  2272 7B2D 8D 62 7E			sta oldCol+3
  2273
  2274 7B30 AD 04 B7 8D 95 80		mva colors+4 c3
  2275 7B36 8D 63 7E			sta oldCol+4
  2276
  2277
  2278 				// zmodyfikujemy przerwanie jesli wystapi³a ró¿nica kolorów
  2279
  2280 7B39 A9 05 8D 52 7B A9 + 	mwa #colors+5 cols
  2281
  2282 7B43 A0 01			ldy #1
  2283 7B45			lpc
  2284 7B45 B9 64 7E 85 6A		mva lDli,y hlp
  2285 7B4A B9 77 7E 85 6B		mva hDli,y hlp+1
  2286
  2287 7B4F A2 04			ldx #4
  2288 7B51 BD 00 B7		nc	lda colors,x
  2289 = 7B52			cols	equ *-2
  2290 7B54 DD 5F 7E			cmp oldCol,x
  2291 7B57 F0 1C			beq nxt
  2292
  2293 7B59 85 00			sta ln0
  2294 7B5B 84 02			sty ln1
  2295
  2296 7B5D A0 0B			ldy #@sdli._stx+1
  2297 7B5F B1 6A			lda (hlp),y
  2298 7B61 C9 1E			cmp <$d01e
  2299 7B63 D0 0E			bne sk0
  2300
  2301 7B65 BD 8A 7E			lda treg,x
  2302 7B68 91 6A			sta (hlp),y
  2303
  2304 7B6A A0 03			ldy #@sdli._ldx+1
  2305 7B6C A5 00			lda ln0
  2306 7B6E 91 6A			sta (hlp),y
  2307 7B70 9D 5F 7E			sta oldCol,x
  2308
  2309 				;	jmp cont
  2310
  2311 7B73			sk0
  2312 				/*	ldy #@sdli._sta2+1
  2313 					lda (hlp),y
  2314 					cmp <$d01e
  2315 					bne cont
  2316
  2317 					lda treg,x
  2318 					sta (hlp),y
  2319
  2320 					ldy #@sdli._lda2+1
  2321 					lda ln0
  2322 					sta (hlp),y
  2323 					sta oldCol,x
  2324 				*/
  2324
  2325 7B73 A4 02		cont	ldy ln1
  2326
  2327 7B75 CA			nxt	dex
  2328 7B76 10 D9			bpl nc
  2329
  2330 7B78 18 AD 52 7B 69 05 + 	adw cols #5
  2331
  2332 7B86 C8				iny
  2333 7B87 C0 13			cpy #scrhig
  2334 7B89 D0 BA			bne lpc
  2335
  2336
  2337 				// -------------------------------------------------------
  2338 				// modyfikacja DLI 0..14
  2339 				// -------------------------------------------------------
  2340
  2341 7B8B 20 E6 98			jsr SetDLI
  2342
  2343 7B8E A2 00			ldx #0
  2344 = 7B8F			OverlayHeight equ *-1
  2345 7B90 F0 29			beq _skp
  2346
  2347 7B92 20 14 99			jsr SetDLI.overlay	; regX musi zostaæ zachowany
  2348
  2349 7B95 A9 00			lda #0
  2350 = 7B96			OverlayChange equ *-1
  2351 7B97 F0 22			beq _skp
  2352
  2353 7B99 A9 CB 8D B1 7D A9 + 	mwa #ovrColors chngOverlay.ovr+1
  2354
  2355 7BA3 A9 12			lda <[colpm0+(pmHero0-$400)/$100]
  2356 7BA5 AC AB 98			ldy OvrCol0+1
  2357 7BA8 20 8E 7D			jsr chngOverlay
  2358 7BAB A9 13			lda <[colpm0+(pmHero1-$400)/$100]
  2359 7BAD AC B0 98			ldy OvrCol1+1
  2360 7BB0 20 8E 7D			jsr chngOverlay
  2361 7BB3 A9 14			lda <[colpm0+(pmHero2-$400)/$100]
  2362 7BB5 AC B5 98			ldy OvrCol2+1
  2363 7BB8 20 8E 7D			jsr chngOverlay
  2364
  2365 				// -------------------------------------------------------
  2366 				// dorysowanie czarnych obwódek wokó³ twardych murków
  2367 				// -------------------------------------------------------
  2368
  2369 7BBB A9 04 85 6A A9 B3 + _skp	mwa #invers+4 hlp
  2370 7BC3 A9 04 85 06 A9 0C + 	mwa #drabin+4 rw3
  2371
  2372 7BCB A2 00			ldx #0
  2373
  2374 7BCD A0 00		tlpS	ldy #0
  2375 7BCF B1 6A		tlp	lda (hlp),y
  2376 7BD1 F0 09			beq tlp_
  2377 7BD3 30 07			bmi tlp_
  2378
  2379 7BD5 C9 78			cmp #120                     // GROUP ID = 120..127
  2380 7BD7 B0 24			bcs solidColor
  2381
  2382 7BD9 4C 46 7C			jmp ramkaU
  2383
  2384 7BDC C8			tlp_	iny
  2385 7BDD C0 28			cpy #40
  2386 7BDF D0 EE			bne tlp
  2387
  2388 7BE1 18 A5 6A 69 30 85 + 	adw hlp #scrwid
  2389 7BEC 18 A5 06 69 30 85 + 	adw rw3 #scrwid
  2390
  2391 7BF7 E8				inx
  2392 7BF8 E0 13			cpx #19
  2393 7BFA D0 D1			bne tlpS
  2394
  2395 7BFC 60				rts
  2396
  2397 				// murki wypelniane jednolitym kolorem
  2398 7BFD			.local	solidColor
  2399 7BFD 8E 0E 7C			stx _x+1
  2400
  2401 7C00 AA				tax
  2402 7C01 BD C0 7B			lda tcol-120,x
  2403 7C04 8D 1E 7C			sta color+1
  2404
  2405 7C07 BD C7 7B			lda teor-120,x
  2406 7C0A 8D 22 7C			sta cleor+1
  2407
  2408 7C0D A2 00		_x	ldx #0
  2409
  2410 7C0F BD 07 7E 85 00		mva lmul40,x ln0
  2411 7C14 BD 1B 7E 85 01		mva hmul40,x ln0+1
  2412
  2413 7C19 A9 01 85 02			mva #1 ln1
  2414
  2415 7C1D A9 00		color	lda #0
  2416 7C1F 91 00			sta (ln0),y
  2417
  2418 7C21 49 00		cleor	eor #0
  2419 7C23 8D 1E 7C			sta color+1
  2420
  2421 7C26 18 A5 00 69 28 85 + 	adw ln0 #40
  2422
  2423 7C31 06 02			asl ln1
  2424 7C33 D0 E8			bne color
  2425
  2426 7C35 4C 46 7C			jmp ramkaU
  2427
  2428 7C38 00 55 AA FF FF 66 + tcol	dta $00,$55,$aa,$ff,$ff,%01100110,%01000100
  2429 7C3F 00 00 00 00 00 FF + teor	dta $00,$00,$00,$00,$00,%01100110^%10011001,%01000100^%00010001
  2430 				.endl
  2431
  2432
  2433 7C46			.local	ramkaU
  2434 7C46 E0 00			cpx #0
  2435 7C48 F0 45			beq ramkaD
  2436
  2437 7C4A 8C 87 7C			sty _y+1
  2438
  2439 7C4D 38 A5 6A E9 30 8D + 	sbw hlp #scrwid tmp+1
  2440 7C5C 38 A5 06 E9 30 8D + 	sbw rw3 #scrwid tmpD+1
  2441
  2442 7C6B B9 FF FF		tmp	lda $ffff,y
  2443 7C6E 30 02			smi			; jeœli murek miêkki to rysuj obwódke
  2444 7C70 D0 1A			bne tlQ
  2445
  2446 7C72 B9 FF FF		tmpD	lda $ffff,y		; jeœli drabinka to nie rysuj obwódki
  2447 7C75 D0 15			bne tlQ
  2448
  2449 7C77 BD 06 7E			lda lmul40-1,x
  2450 7C7A 18 69 18			add <40*7
  2451 7C7D 85 00			sta ln0
  2452 7C7F BD 1A 7E			lda hmul40-1,x
  2453 7C82 69 01			adc >40*7
  2454 7C84 85 01			sta ln0+1
  2455
  2456 7C86 A0 00		_y	ldy #0
  2457
  2458 7C88 A9 AA			lda #$aa
  2459 7C8A 91 00			sta (ln0),y
  2460
  2461 7C8C AC 87 7C		tlQ	ldy _y+1
  2462 				.endl
  2463
  2464
  2465 7C8F			.local	ramkaD
  2466 7C8F E0 13			cpx #19
  2467 7C91 F0 30			beq ramkaL
  2468
  2469 7C93 8C BB 7C			sty _y+1
  2470
  2471 7C96 A5 06 8D AC 7C A5 + 	mwa rw3 tmpD+1
  2472
  2473 7CA0 98				tya
  2474 7CA1 18 69 30			add #48
  2475 7CA4 A8				tay
  2476
  2477 7CA5 B1 6A			lda (hlp),y
  2478 7CA7 30 02			smi
  2479 7CA9 D0 15			bne tlQ
  2480
  2481 7CAB B9 FF FF		tmpD	lda $ffff,y
  2482 7CAE D0 10			bne tlQ
  2483
  2484 7CB0 BD 08 7E 85 00		mva lmul40+1,x	ln0
  2485 7CB5 BD 1C 7E 85 01		mva hmul40+1,x	ln0+1
  2486
  2487 7CBA A0 00		_y	ldy #0
  2488
  2489 7CBC A9 AA			lda #$aa
  2490 7CBE 91 00			sta (ln0),y
  2491
  2492 7CC0 AC BB 7C		tlQ	ldy _y+1
  2493 				.endl
  2494
  2495
  2496 7CC3			.local	ramkaL
  2497 7CC3 C0 00			cpy #0
  2498 7CC5 F0 44			beq ramkaR
  2499 				;	cpx #0
  2500 				;	beq ramkaR
  2501
  2502 7CC7 8C 08 7D			sty _y+1
  2503 7CCA 8E 0A 7D			stx _x+1
  2504
  2505 7CCD 88				dey
  2506
  2507 7CCE B1 6A			lda (hlp),y
  2508 7CD0 30 02			smi
  2509 7CD2 D0 33			bne tlQ
  2510
  2511 7CD4 BD 07 7E			lda lmul40,x
  2512 7CD7 38 E9 28			sub <40
  2513 7CDA 85 00			sta ln0
  2514 7CDC BD 1B 7E			lda hmul40,x
  2515 7CDF E9 00			sbc >40
  2516 7CE1 85 01			sta ln0+1
  2517
  2518 7CE3 A2 09			ldx #7+2	;-1
  2519 7CE5 B1 00		lp	lda (ln0),y
  2520 7CE7 29 FC			and #$fc
  2521 7CE9 09 02			ora #%10
  2522 7CEB 91 00			sta (ln0),y
  2523
  2524 7CED 18 A5 00 69 28 85 + 	adw ln0 #40
  2525
  2526 7CF8 A5 01 C9 B3 D0 04 + 	cpw ln0 #txture+19*(40*8)	; !!! nie mo¿na przekraczaæ dolnej krawêdzi pola gry !!!
  2527 7D02 B0 03			bcs tlQ
  2528
  2529 7D04 CA				dex
  2530 7D05 10 DE			bpl lp
  2531
  2532 7D07			tlQ
  2533 7D07 A0 00		_y	ldy #0
  2534 7D09 A2 00		_x	ldx #0
  2535 				.endl
  2536
  2537
  2538 7D0B			.local	ramkaR
  2539 7D0B C0 27			cpy #40-1
  2540 7D0D F0 55			beq ramkaX
  2541 				;	cpx #0
  2542 				;	beq ramkaX
  2543
  2544 7D0F 8C 61 7D			sty _y+1
  2545 7D12 8E 63 7D			stx _x+1
  2546
  2547 7D15 C8				iny
  2548
  2549 7D16 B1 6A			lda (hlp),y
  2550 7D18 30 02			smi
  2551 7D1A D0 44			bne tlQ
  2552
  2553 7D1C 38 A5 6A E9 00 85 + 	sbw hlp #invers-drabin ln1
  2554
  2555 7D29 B1 02			lda (ln1),y
  2556 7D2B D0 33			bne tlQ
  2557
  2558 7D2D BD 07 7E			lda lmul40,x
  2559 7D30 38 E9 28			sub <40
  2560 7D33 85 00			sta ln0
  2561 7D35 BD 1B 7E			lda hmul40,x
  2562 7D38 E9 00			sbc >40
  2563 7D3A 85 01			sta ln0+1
  2564
  2565 7D3C A2 09			ldx #7+2	;-1
  2566 7D3E B1 00		lp	lda (ln0),y
  2567 7D40 29 3F			and #$3f
  2568 7D42 09 80			ora #$80
  2569 7D44 91 00			sta (ln0),y
  2570
  2571 7D46 18 A5 00 69 28 85 + 	adw ln0 #40
  2572
  2573 7D51 A5 01 C9 B3 D0 04 + 	cpw ln0 #txture+19*(40*8)
  2574 7D5B B0 03			bcs tlQ
  2575
  2576 7D5D CA				dex
  2577 7D5E 10 DE			bpl lp
  2578
  2579 7D60			tlQ
  2580 7D60 A0 00		_y	ldy #0
  2581 7D62 A2 00		_x	ldx #0
  2582 				.endl
  2583
  2584 7D64 4C DC 7B		ramkaX	jmp tlp_
  2585
  2586
  2587 7D67			.local	charAdr
  2588
  2589 7D67				.var tmp .word
  2590
  2591 7D67 8D F5 7E			sta tmp
  2592 7D6A A9 00			lda #0
  2593
  2594 7D6C 0E F5 7E			asl tmp
  2595 7D6F 2A				rol @
  2596 7D70 0E F5 7E			asl tmp
  2597 7D73 2A				rol @
  2598 7D74 0E F5 7E			asl tmp
  2599 7D77 2A				rol @
  2600
  2601 7D78 8D F6 7E			sta tmp+1
  2602
  2603 7D7B A0 01			ldy #1
  2604 7D7D B1 6A			lda (hlp),y
  2605 7D7F A8				tay
  2606
  2607 7D80 AD F6 7E 18 79 9F + 	adb tmp+1 tfonts,y
  2608
  2609 7D8A AE F5 7E			ldx tmp
  2610 7D8D 60				rts
  2611 				.endl
  2612
  2613
  2614 7D8E			.local	chngOverlay
  2615
  2616 7D8E 8E D4 7D			stx rX+1
  2617
  2618 7D91 8D BB 7D			sta pcol+1
  2619
  2620 7D94 8C B4 7D			sty old+1
  2621
  2622 7D97 A9 00 8D 9D 7D		mva #0 loop+1
  2623
  2624 7D9C A0 00		loop	ldy #0
  2625
  2626 7D9E B9 64 7E 85 6A		mva lDli,y hlp
  2627 7DA3 B9 77 7E 85 6B		mva hDli,y hlp+1
  2628
  2629 7DA8 A0 0B			ldy #@sdli._stx+1
  2630 7DAA B1 6A			lda (hlp),y
  2631
  2632 7DAC C9 1E			cmp <$d01e
  2633 7DAE D0 15			bne skip
  2634
  2635 7DB0 AD CB 7E		ovr	lda ovrColors
  2636 7DB3 C9 00		old	cmp #0
  2637 7DB5 F0 0E			beq skip
  2638
  2639 7DB7 8D B4 7D			sta old+1
  2640
  2641 7DBA A9 00 91 6A		pcol	mva #0 (hlp),y
  2642
  2643 7DBE A0 03			ldy #@sdli._ldx+1
  2644 7DC0 AD B4 7D 91 6A		mva old+1 (hlp),y
  2645
  2646 7DC5 EE B1 7D D0 03 EE + skip	inw ovr+1
  2647
  2648 7DCD EE 9D 7D			inc loop+1
  2649 7DD0 CA				dex
  2650 7DD1 D0 C9			bne loop
  2651
  2652 7DD3 A2 00		rX	ldx #0
  2653 7DD5 60				rts
  2654 				.endl
  2655
  2656
  2657 7DD6			.local	fillOverlay
  2658
  2659 7DD6 8E 05 7E			stx rX+1
  2660
  2661 7DD9 8D F3 7D			sta fill1+2
  2662 7DDC 18 69 20			add >[pmgB2-pmgB1]
  2663 7DDF 8D F6 7D			sta fill2+2
  2664
  2665 7DE2 A9 3D			lda #pmg_overlay
  2666 7DE4 8D F2 7D			sta fill1+1
  2667 7DE7 8D F5 7D			sta fill2+1
  2668
  2669 7DEA C8			loop	iny
  2670 7DEB A9 01 85 02			mva #1 ln1
  2671
  2672 7DEF B1 6A			lda (hlp),y
  2673
  2674 7DF1 8D 00 03		fill1	sta pmgB1+$300		; !!! uwaga 'pmgB1' = 0 wiêc bez '+$300' powstanie rozkaz strony zerowej
  2675 7DF4 8D 00 23		fill2	sta pmgB2+$300
  2676
  2677 7DF7 EE F2 7D			inc fill1+1
  2678 7DFA EE F5 7D			inc fill2+1
  2679
  2680 7DFD 06 02			asl ln1
  2681 7DFF D0 F0			bne fill1
  2682
  2683 7E01 CA				dex
  2684 7E02 D0 E6			bne loop
  2685
  2686 7E04 A2 00		rX	ldx #0
  2687 7E06 60				rts
  2688
  2689 				.endl
  2690
  2691
  2692 7E07 40 80 C0 00 40 80 + lmul40	:20 dta l(txture+#*40*8)
  2693 7E1B 9B 9C 9D 9F A0 A1 + hmul40	:20 dta h(txture+#*40*8)
  2694
  2695 7E2F 41 6A 60 60 41 6A + ddrabin	ins 'objects.fnt',55*8,8*3	; kszta³t drabinki
  2696 7E47 00 00 0F 0F 00 00 + mdrabin ins 'objects.fnt',74*8,8*3	; maska drabinki
  2697
  2698 7E5F 00 00 00 00 00	oldCol	:5 brk
  2699
  2700 7E64 BD D4 EB 07 1E 35 + lDli	dta l(dli0, dli1, dli2, dli3, dli4, dli5, dli6, dli7, dli8, dli9, dli10, dli11, dli12, dli13, dli14, dli15, dli16, dli17, dli18)
  2701 7E77 80 80 80 81 81 81 + hDli	dta h(dli0, dli1, dli2, dli3, dli4, dli5, dli6, dli7, dli8, dli9, dli10, dli11, dli12, dli13, dli14, dli15, dli16, dli17, dli18)
  2702
  2703 7E8A 1A 16 17 18 19	treg	dta <colbak, <color0, <color1, <color2, <color3
  2704
  2705 7E8F 34 34 34 34 34 34 + 	:16 dta >tmpINVERS
  2706
  2707 7E9F 10 14 18 1C C0 C4 + tfonts	.sav scrhig
  2708
  2709 7EB2			_ypath	.local
  2710 7EB2 01 02 03 04 06 08 + 	dta 1,2,3,4,6,8,11,14,18,22,26,31,36,42,48,54,61,68,76,84,92,101,110,121,134	; trajektoria lotu kuli
  2711 					.endl
  2712
  2713 7ECB 00 00 00 00 00 00 + ovrColors :3*14 brk
  2714
  2715 = 7EF5 00 00		CHARADR.TMP
  2715 				.endp
  2716
  2717
  2718 				* ---------------------------
  2719 				* ---	PLAYFIELD
  2720 				* ---------------------------
  2721 7EF7			.proc	PLAYFIELD
  2722
  2723 				// tworzymy pole gry, dodatkowo na podstawie tablicy INVERS wprowadzamy 5-ty kolor znaków
  2724
  2725 7EF7 A9 D8			lda >scr1	; wype³niamy pamiec obrazu SCR1
  2726 7EF9 A2 00			ldx #0
  2727 7EFB 20 2D 7F			jsr FIELD
  2728
  2729 7EFE A9 DC			lda >scr2	; wype³niamy pamiec obrazu SCR2
  2730 7F00 A2 40			ldx #$40
  2731 7F02 20 2D 7F			jsr FIELD
  2732
  2733 				// czyœcimy obszar INVERS, informacja o inwersie znaków nie bêdzie nam juz potrzebna
  2734 				// od teraz w tablicy INVERS zapisana bêdzie informacja o obiektach i krawedziach bocznych pola gry
  2735 				// w pliku INIT2.ASM dokonywane jest przepisanie INVERS -> TMPINVERS
  2736
  2737 					CLRPAGES	>invers		#4 #0
  2737 				 LDY >INVERS\ LDX# 4\ LDA# 0\ JSR CLRPAGES
  2737 7F05 A0 B3		 LDY >INVERS
  2737 7F07 A2 04		 LDX# 4
  2737 7F09 A9 00		 LDA# 0
  2737 7F0B 20 14 89		 JSR CLRPAGES
  2738
  2739 7F0E A9 00 85 6A A9 B3 + 	mwa #invers hlp
  2740
  2741 7F16 A2 12			ldx #scrhig-1
  2742
  2743 7F18 A0 2C			ldy #3+40+1
  2744
  2745 7F1A A9 FF		border	lda #$ff	; dodajemy lew¹ i praw¹ krawedŸ pola gry
  2746 				;	ldy #3
  2747 				;	sta (hlp),y
  2748 				;	ldy #3+40
  2749 7F1C 91 6A			sta (hlp),y
  2750
  2751 7F1E 18 A5 6A 69 30 85 + 	adw hlp #scrwid
  2752
  2753 7F29 CA				dex
  2754 7F2A 10 EE			bpl border
  2755
  2756 7F2C 60				rts
  2757
  2758
  2759 7F2D 85 6B		FIELD	sta hlp+1	; wype³niamy pamiêæ zadanym zakresem wartoœci
  2760 							; SCR1 -> znaki w wierszach 0..39
  2761 							; SCR2 -> znaki w wierszach 64..103
  2762
  2763 7F2F A9 03 85 00 A9 B3 + 	mwa #invers+3 ln0
  2764
  2765 7F37 A9 03 85 6A			mva #3 hlp	; zwiêkszamy o 4 bajty, omijaj¹c ramke obrazu
  2766
  2767 7F3B 8E 5B 7F			stx val
  2768
  2769 7F3E A2 12			ldx #scrhig-1
  2770
  2771 7F40 A0 00		l0		ldy #0
  2772 7F42 A9 A9				lda #okalajacy
  2773 7F44 91 6A				sta (hlp),y
  2774
  2775 7F46 E6 6A D0 02 E6 6B			inw hlp
  2776 7F4C E6 00 D0 02 E6 01			inw ln0
  2777
  2778 7F52 B1 00			l1:	lda (ln0),y
  2779 7F54 29 80				and #$80
  2780 7F56 8D 5D 7F				sta inv
  2781
  2782 7F59 98					tya
  2783 7F5A 09 00				ora #0
  2784 = 7F5B				val:	equ *-1
  2785
  2786 7F5C 09 00				ora #0
  2787 = 7F5D				inv:	equ *-1
  2788
  2789 7F5E 91 6A			 	sta (hlp),y
  2790
  2791 7F60 C8					iny
  2792 7F61 C0 28				cpy #40
  2793 7F63 D0 ED				bne l1
  2794
  2795 7F65 A9 A9				lda #okalajacy
  2796 7F67 91 6A				sta (hlp),y
  2797
  2798 7F69 18 A5 6A 69 2F 85 + 	adw hlp #scrwid-1
  2799 7F74 18 A5 00 69 2F 85 + 	adw ln0 #scrwid-1
  2800
  2801 7F7F CA				dex
  2802 7F80 10 BE			bpl l0
  2803 7F82 60				rts
  2804
  2805 				.endp
  2806
  2807
  2808 7F83			.local	GameEnd
  2809
  2810 7F83			TheEnd
  2811 7F83 AD C8 9A			lda reason
  2812 7F86 F0 1C			beq skp
  2813 7F88 C9 04			cmp #deathCode.no_time+1
  2814 7F8A 90 41			bcc restart
  2815 				;	cmp #deathCode.no_power
  2816 				;	beq restart
  2817 7F8C C9 04			cmp #deathCode.panic_stop
  2818 7F8E D0 14			bne skp
  2819
  2820 7F90 EE 85 76			inc INIT.level_panic		; panic level up
  2821 7F93 EE AA 76			inc INIT.ground
  2822
  2823 7F96 A9 00 8D 9A 8D		mva #0 INTRO.nxtLvl
  2824 7F9B AD F6 38 18 69 06 + 	adb level? #6
  2825
  2826 7FA4 A2 2C		skp	ldx #{bit}
  2827 7FA6 AD C8 9A			lda reason
  2828 7FA9 D0 02			sne
  2829 7FAB A2 20			ldx #{jsr}
  2830
  2831 7FAD 8E E4 7F			stx _map
  2832
  2833 7FB0 A9 00 8D C8 9A		mva #0 reason
  2834
  2835 7FB5 20 E7 8F			jsr INIT_VECTORS
  2836
  2837 7FB8 AD 85 76			lda INIT.level_panic
  2838 7FBB C9 0A			cmp #10
  2839 7FBD B0 2E			bcs youWin
  2840
  2841 7FBF AD B3 74			lda INIT.lives
  2842 7FC2 D0 12			bne skp2
  2843
  2844 7FC4 20 AA 8C		again_	jsr DATAMATRIX
  2845 7FC7 20 C6 8C			jsr GAMEOVER			; ekran GAME OVER i potencjalnie wpisanie inicjalow
  2846
  2847 7FCA 4C 80 3B			jmp again
  2848
  2849 7FCD 8D 9A 8D		restart	sta INTRO.nxtLvl
  2850 7FD0 CE B3 74			dec INIT.lives
  2851 7FD3 4C A4 7F			jmp skp
  2852
  2853 7FD6 AD 95 3A		skp2	lda sstage+3
  2854 7FD9 C9 06			cmp #6
  2855 7FDB D0 0A			bne skp3
  2856
  2857 7FDD AD F6 38			lda level?
  2858 7FE0 C9 47			cmp #71
  2859 7FE2 B0 09			bcs youWin
  2860
  2861 7FE4 20 17 8D		_map	jsr MAPTOUR
  2862
  2863 7FE7 20 8E 8D		skp3	jsr INTRO.start
  2864
  2865 7FEA 4C 8C 3B			jmp lets_go
  2866
  2867 7FED 20 8F 8C		youWin	jsr CONGRATS
  2868 7FF0 4C C4 7F			jmp again_
  2869
  2870 				.endl
  2871
  2872 					ert *>$7FFF
  2873
  2874 					.print 'prg_end: ',*,'..$8000'
  2874 				prg_end: $7FF3..$8000
  2875
  2876
  2877
  2878 				// przerwanie DLI, VBL i procedura HERO wywo³ywana z poziomy VBL-a
  2879 				// koniecznie znajduje siê poza obszarem $4000..$7FFF
  2880
  2881 					org $8000
  2882
  2883 				* ---------------------------
  2884 				* ---	MINMAX
  2885 				* ---------------------------
  2886 				; MINMAX realizuje uaktualnienie tablic TMINY, TMAXY i CLRIDX
  2887 				; tablice te s¹ potrzebne podczas czyszczenia obrazu przez procedury CLEARB1, CLEARB2
  2888
  2889 8000				.pages
  2890
  2891 8000-8FAE> A5 83		MINMAX6	lda ymin
  2892 8002 DD 55 17			cmp tminy+5,x
  2893 8005 B0 03			scs
  2894 8007 9D 55 17			sta tminy+5,x
  2895
  2896 800A 98				tya
  2897 800B DD 55 1B			cmp tmaxy+5,x
  2898 800E 90 03			scc
  2899 8010 9D 55 1B			sta tmaxy+5,x
  2900
  2901 8013 9D 55 13			sta clridx+5,x
  2902
  2903 8016 A5 83		MINMAX5	lda ymin
  2904 8018 DD 54 17			cmp tminy+4,x
  2905 801B B0 03			scs
  2906 801D 9D 54 17			sta tminy+4,x
  2907
  2908 8020 98				tya
  2909 8021 DD 54 1B			cmp tmaxy+4,x
  2910 8024 90 03			scc
  2911 8026 9D 54 1B			sta tmaxy+4,x
  2912
  2913 8029 9D 54 13			sta clridx+4,x
  2914
  2915 802C A5 83		MINMAX4	lda ymin
  2916 802E DD 53 17			cmp tminy+3,x
  2917 8031 B0 03			scs
  2918 8033 9D 53 17			sta tminy+3,x
  2919
  2920 8036 98				tya
  2921 8037 DD 53 1B			cmp tmaxy+3,x
  2922 803A 90 03			scc
  2923 803C 9D 53 1B			sta tmaxy+3,x
  2924
  2925 803F 9D 53 13			sta clridx+3,x
  2926
  2927 8042 A5 83		MINMAX3	lda ymin
  2928 8044 DD 52 17			cmp tminy+2,x
  2929 8047 B0 03			scs
  2930 8049 9D 52 17			sta tminy+2,x
  2931
  2932 804C 98				tya
  2933 804D DD 52 1B			cmp tmaxy+2,x
  2934 8050 90 03			scc
  2935 8052 9D 52 1B			sta tmaxy+2,x
  2936
  2937 8055 9D 52 13			sta clridx+2,x
  2938
  2939 8058 A5 83		MINMAX2	lda ymin
  2940 805A DD 51 17			cmp tminy+1,x
  2941 805D B0 03			scs
  2942 805F 9D 51 17			sta tminy+1,x
  2943
  2944 8062 98				tya
  2945 8063 DD 51 1B			cmp tmaxy+1,x
  2946 8066 90 03			scc
  2947 8068 9D 51 1B			sta tmaxy+1,x
  2948
  2949 806B 9D 51 13			sta clridx+1,x
  2950
  2951 806E A5 83		MINMAX1	lda ymin
  2952 8070 DD 50 17			cmp tminy,x
  2953 8073 B0 03			scs
  2954 8075 9D 50 17			sta tminy,x
  2955
  2956 8078 98				tya
  2957 8079 DD 50 1B			cmp tmaxy,x
  2958 807C 90 03			scc
  2959 807E 9D 50 1B			sta tmaxy,x
  2960
  2961 8081 9D 50 13			sta clridx,x
  2962
  2963 8084 60				rts
  2964 8085				.endpg
  2965
  2966
  2967 				* ---------------------------
  2968 				* ---	DLI
  2969 				* ---------------------------
  2970 				// przerwanie DLI u¿ywa tylko rejestrów regA i regX
  2971
  2972 				@sdli	.struct
  2973 = 0000				_lda	.word
  2974 = 0002				_ldx	.word
  2975 = 0004				_d40a	.long
  2976 = 0007				_chbase	.long
  2977 = 000A				_stx	.long
  2978 				;	_lda2	.word
  2979 				;	_sta2	.long
  2980 					.ends
  2981
  2982
  2983 = 8085				?old_dli = *
  2984 				/*
  2985 				dliS	lda #$0e
  2986 					ldx #$00
  2987 					sta wsync		;line=16
  2988 					sta color2
  2989 					stx color1
  2990 					dli_quit dliPly
  2991
  2992
  2993 				pdli0	sty rY
  2994
  2995 				c10	lda #$74
  2996 					ldx #$57
  2997 					ldy #$7D
  2998 					sta wsync		;line=24
  2999 					sta color3
  3000 					stx hposm0
  3001 					sty hposm3
  3002 				c11	lda #$18
  3003 					sta colpm0
  3004 					ldy rY
  3005 					dli_quit pdli1
  3006
  3007
  3008 				pdli1	sty rY
  3009
  3010 					lda >fntPnl+$400
  3011 				c12	ldx #$C8
  3012 					ldy #$79
  3013 					sta wsync		;line=32
  3014 					sta chbase
  3015 					stx color3
  3016 					sty hposm3
  3017 				c13	lda #$18
  3018 					sta colpm1
  3019 					ldy rY
  3020 					dli_quit pdli2
  3021
  3022 				pdli2
  3023 				c14	lda #$F8
  3024 				c15	ldx #$A8
  3025 					sta wsync		;line=40
  3026 					sta color2
  3027 					stx color3
  3028 					dli_quit dliPly
  3029 				*/
  3029
  3030
  3031
  3032 8085 A9 00		dliPly	lda #0		; kolory pola gry
  3033 = 8086			c0	equ *-1
  3034
  3035 8087 A2 00			ldx #0
  3036 = 8088			c1	equ *-1
  3037
  3038 8089 8D 0A D4			sta wsync
  3039 808C 8D 16 D0			sta color0
  3040 808F 8E 17 D0			stx color1
  3041
  3042 8092 A9 00			lda #0
  3043 = 8093			c2	equ *-1
  3044
  3045 8094 A2 00			ldx #0
  3046 = 8095			c3	equ *-1
  3047
  3048 8096 8D 18 D0			sta color2
  3049 8099 8E 19 D0			stx color3
  3050
  3051 809C A9 20 8D 1B D0	gtia	mva	#defaultPrior	gtictl
  3052
  3053 80A1 A9 00			lda #0
  3054 80A3 8D 0B D0			sta sizep0+(pmStar-$400)/$100
  3055
  3056 80A6 A9 00			lda #0
  3057 = 80A7			__hposp3 equ *-1
  3058 80A8 8D 03 D0			sta hposp0+(pmStar-$400)/$100		; pozycja ducha #3 reprezentuj¹cego gwiazdki wybuchu
  3059
  3060 80AB A9 00			lda #0
  3061 = 80AC			__hposm3 equ *-1
  3062 80AD 8D 07 D0			sta hposm0+(pmStar-$400)/$100		; pozycja pocisku #3 podbarwiaj¹cego harpun
  3063
  3064 80B0 A9 08			lda #colm3Harpun			; kolor harpunu / gwiazdek
  3065 = 80B1			__colpm3 equ *-1
  3066 80B2 8D 15 D0			sta colpm0+(pmStar-$400)/$100
  3067
  3068 80B5 A9 3F 8D 00 D4		mva	#scr48	dmactl
  3069
  3070 80BA 4C 4B 98			jmp dliHero
  3071 = 80BB			__dliBegin equ *-2
  3072
  3073
  3074 80BD A9 10 A2 00 8D 0A + dli0	dta @sdli [0] (.get[0]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3075 80CA				dli_quit dli1
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 80CA A9 D4 8D AB 82		mva	<DLI1	NMI.vdli
     8 80CF A5 8D			lda rA
     9 80D1 A6 8E			ldx rX
    10 80D3 40				rti
    12 = 80D4				.def	?old_dli
Source: pang_chars.asm
  3076
  3077 80D4 A9 14 A2 00 8D 0A + dli1	dta @sdli [0] (.get[1]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3078 80E1				dli_quit dli2
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 80E1 A9 EB 8D AB 82		mva	<DLI2	NMI.vdli
     8 80E6 A5 8D			lda rA
     9 80E8 A6 8E			ldx rX
    10 80EA 40				rti
    12 = 80EB				.def	?old_dli
Source: pang_chars.asm
  3079
  3080 80EB A9 18 A2 00 8D 0A + dli2	dta @sdli [0] (.get[2]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3081 80F8				dli_quit dli3
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 80F8 A9 07 8D AB 82		mva	<DLI3	NMI.vdli
     5 80FD A9 81 8D AC 82		mva	>DLI3	NMI.vdli+1
     8 8102 A5 8D			lda rA
     9 8104 A6 8E			ldx rX
    10 8106 40				rti
    12 = 8107				.def	?old_dli
Source: pang_chars.asm
  3082
  3083 8107 A9 1C A2 00 8D 0A + dli3	dta @sdli [0] (.get[3]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3084 8114				dli_quit dli4
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 8114 A9 1E 8D AB 82		mva	<DLI4	NMI.vdli
     8 8119 A5 8D			lda rA
     9 811B A6 8E			ldx rX
    10 811D 40				rti
    12 = 811E				.def	?old_dli
Source: pang_chars.asm
  3085
  3086 811E A9 C0 A2 00 8D 0A + dli4	dta @sdli [0] (.get[4]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3087 812B				dli_quit dli5
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 812B A9 35 8D AB 82		mva	<DLI5	NMI.vdli
     8 8130 A5 8D			lda rA
     9 8132 A6 8E			ldx rX
    10 8134 40				rti
    12 = 8135				.def	?old_dli
Source: pang_chars.asm
  3088
  3089 8135 A9 C4 A2 00 8D 0A + dli5	dta @sdli [0] (.get[5]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3090 8142				dli_quit dli6
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 8142 A9 4C 8D AB 82		mva	<DLI6	NMI.vdli
     8 8147 A5 8D			lda rA
     9 8149 A6 8E			ldx rX
    10 814B 40				rti
    12 = 814C				.def	?old_dli
Source: pang_chars.asm
  3091
  3092 814C A9 C8 A2 00 8D 0A + dli6	dta @sdli [0] (.get[6]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3093 8159				dli_quit dli7
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 8159 A9 63 8D AB 82		mva	<DLI7	NMI.vdli
     8 815E A5 8D			lda rA
     9 8160 A6 8E			ldx rX
    10 8162 40				rti
    12 = 8163				.def	?old_dli
Source: pang_chars.asm
  3094
  3095 8163 A9 CC A2 00 8D 0A + dli7	dta @sdli [0] (.get[7]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3096 8170				dli_quit dli8
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 8170 A9 7A 8D AB 82		mva	<DLI8	NMI.vdli
     8 8175 A5 8D			lda rA
     9 8177 A6 8E			ldx rX
    10 8179 40				rti
    12 = 817A				.def	?old_dli
Source: pang_chars.asm
  3097
  3098 817A A9 E0 A2 00 8D 0A + dli8	dta @sdli [0] (.get[8]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3099 8187				dli_quit dli9
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 8187 A9 91 8D AB 82		mva	<DLI9	NMI.vdli
     8 818C A5 8D			lda rA
     9 818E A6 8E			ldx rX
    10 8190 40				rti
    12 = 8191				.def	?old_dli
Source: pang_chars.asm
  3100
  3101 8191 A9 E4 A2 00 8D 0A + dli9	dta @sdli [0] (.get[9]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3102 819E				dli_quit dli10
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 819E A9 A8 8D AB 82		mva	<DLI10	NMI.vdli
     8 81A3 A5 8D			lda rA
     9 81A5 A6 8E			ldx rX
    10 81A7 40				rti
    12 = 81A8				.def	?old_dli
Source: pang_chars.asm
  3103
  3104 81A8 A9 E8 A2 00 8D 0A + dli10	dta @sdli [0] (.get[10]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3105 81B5				dli_quit dli11
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 81B5 A9 BF 8D AB 82		mva	<DLI11	NMI.vdli
     8 81BA A5 8D			lda rA
     9 81BC A6 8E			ldx rX
    10 81BE 40				rti
    12 = 81BF				.def	?old_dli
Source: pang_chars.asm
  3106
  3107 81BF A9 EC A2 00 8D 0A + dli11	dta @sdli [0] (.get[11]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3108 81CC				dli_quit dli12
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 81CC A9 D6 8D AB 82		mva	<DLI12	NMI.vdli
     8 81D1 A5 8D			lda rA
     9 81D3 A6 8E			ldx rX
    10 81D5 40				rti
    12 = 81D6				.def	?old_dli
Source: pang_chars.asm
  3109
  3110 81D6 A9 F0 A2 00 8D 0A + dli12	dta @sdli [0] (.get[12]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3111 81E3				dli_quit dli13
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 81E3 A9 ED 8D AB 82		mva	<DLI13	NMI.vdli
     8 81E8 A5 8D			lda rA
     9 81EA A6 8E			ldx rX
    10 81EC 40				rti
    12 = 81ED				.def	?old_dli
Source: pang_chars.asm
  3112
  3113 81ED A9 F4 A2 00 8D 0A + dli13	dta @sdli [0] (.get[13]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3114 81FA				dli_quit dli14
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 81FA A9 09 8D AB 82		mva	<DLI14	NMI.vdli
     5 81FF A9 82 8D AC 82		mva	>DLI14	NMI.vdli+1
     8 8204 A5 8D			lda rA
     9 8206 A6 8E			ldx rX
    10 8208 40				rti
    12 = 8209				.def	?old_dli
Source: pang_chars.asm
  3115
  3116 8209 A9 F8 A2 00 8D 0A + dli14	dta @sdli [0] (.get[14]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3117 8216				dli_quit dli15
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 8216 A9 20 8D AB 82		mva	<DLI15	NMI.vdli
     8 821B A5 8D			lda rA
     9 821D A6 8E			ldx rX
    10 821F 40				rti
    12 = 8220				.def	?old_dli
Source: pang_chars.asm
  3118
  3119 8220 A9 FC A2 00 8D 0A + dli15	dta @sdli [0] (.get[15]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3120 822D				dli_quit dli16
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 822D A9 37 8D AB 82		mva	<DLI16	NMI.vdli
     8 8232 A5 8D			lda rA
     9 8234 A6 8E			ldx rX
    10 8236 40				rti
    12 = 8237				.def	?old_dli
Source: pang_chars.asm
  3121
  3122 8237 A9 28 A2 00 8D 0A + dli16	dta @sdli [0] (.get[16]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3123 8244				dli_quit dli17
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 8244 A9 4E 8D AB 82		mva	<DLI17	NMI.vdli
     8 8249 A5 8D			lda rA
     9 824B A6 8E			ldx rX
    10 824D 40				rti
    12 = 824E				.def	?old_dli
Source: pang_chars.asm
  3124
  3125 824E A9 2C A2 00 8D 0A + dli17	dta @sdli [0] (.get[17]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3126 825B				dli_quit dli18
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 825B A9 65 8D AB 82		mva	<DLI18	NMI.vdli
     8 8260 A5 8D			lda rA
     9 8262 A6 8E			ldx rX
    10 8264 40				rti
    12 = 8265				.def	?old_dli
Source: pang_chars.asm
  3127
  3128 8265 A9 30 A2 00 8D 0A + dli18	dta @sdli [0] (.get[18]<<8+{lda#}, {ldx#}, $d40a8d, $d4098d, $d01e8e/*, {lda#}, $d01e8d*/)
  3129 8272				dli_quit dli19
Macro: DLI_QUIT [Source: pang_chars.asm]
     2 8272 A9 7C 8D AB 82		mva	<DLI19	NMI.vdli
     8 8277 A5 8D			lda rA
     9 8279 A6 8E			ldx rX
    10 827B 40				rti
    12 = 827C				.def	?old_dli
Source: pang_chars.asm
  3130
  3131
  3132 827C A9 B8		dli19	lda >fntPnl
  3133 827E 8D 0A D4			sta wsync
  3134 8281 8D 09 D4			sta chbase
  3135
  3136 8284 A9 22 8D 00 D4		mva #@dmactl(normal|dma)	dmactl
  3137 8289 A9 0C 8D 17 D0		mva #$0c color1
  3138
  3139 828E A9 00			lda #0
  3140 8290 8D 1D D0			sta pmcntl
  3141
  3142 8293 8D 1A D0			sta colbak
  3143 8296 8D 18 D0			sta color2
  3144
  3145 8299 20 D3 BB			jsr dliHeroDeath.hpos		; ustawia duchy za lew¹ krawedzi¹ obrazu
  3146
  3147 829C A5 8D			lda rA
  3148 829E A6 8E			ldx rX
  3149 82A0 40				rti
  3150
  3151
  3152 				* ---------------------------
  3153 				* ---	NMI
  3154 				* ---------------------------
  3155 82A1			.proc NMI
  3156 82A1 2C 0F D4			bit $d40f
  3157 82A4 10 07			bpl VBL
  3158
  3159 82A6 85 8D			sta rA
  3160 82A8 86 8E			stx rX
  3161
  3162 82AA 4C BD 80			jmp dli0
  3163 = 82AB			vdli	equ *-2
  3164
  3165
  3166 82AD 85 8D		VBL	sta rA
  3167 82AF 86 8E			stx rX
  3168 82B1 84 8F			sty rY
  3169
  3170 82B3 8D 0F D4			sta	$d40f
  3171
  3172 82B6 E6 79			inc	frame
  3173
  3174 82B8 A5 6E 8D 02 D4 A5 + 	mwa	dlstl	dlptr
  3175
  3176 82C2 A9 3E			lda	#scr40
  3177 = 82C3			_dmactl	equ *-1
  3178 82C4 8D 00 D4			sta 	dmactl
  3179
  3180 82C7 A9 B8 8D 09 D4		mva	>fntPnl	chbase
  3181
  3182 82CC A9 00			lda #$00
  3183 82CE 8D 1A D0			sta colbak
  3184 82D1 8D 18 D0			sta color2
  3185
  3186 82D4 A9 0C			lda #$0c
  3187 82D6 8D 17 D0			sta color1
  3188
  3189 				;	lda #$04
  3190 				;	sta gtictl
  3191
  3192 82D9 A9 85 8D AB 82 A9 + 	mwa	#dliPly	vdli
  3193
  3194 82E3 A9 03 8D 1D D0		mva #@pmcntl(players|missiles) pmcntl		; enable players and missiles
  3195
  3196
  3197 				* ---	READ KEY AND JOY, PLAY RMT
  3198
  3199 82E8 AD 01 D3 8D F8 82		mva $d301 bnkTmp+1
  3200
  3201 82EE AD 04 01 8D 01 D3		mva @TAB_MEM_BANKS+(=rmt2) portb
  3202
  3203 82F4 4C BE 7C			jmp rmt2.read_KeyJoy_playRMT_timer
  3204
  3205 82F7 A9 00 8D 01 D3	bnkTmp	mva #0 portb
  3206
  3207
  3208 				* ---	STARS EXPLOSION
  3209
  3210 82FC A9 00			lda #0
  3211 = 82FD			starsExplosion equ *-1
  3212 82FE F0 19			beq starsExplosionEnd
  3213
  3214 8300 20 C4 8E			jsr stars.anm
  3215
  3216 8303 8C C5 8E			sty stars.anm+1
  3217 8306 8D A7 80			sta __hposp3
  3218
  3219 8309 AD 0A D2			lda $d20a
  3220 830C 09 0F			ora #starsBright
  3221 830E 8D B1 80			sta __colpm3
  3222
  3223 8311 CE FD 82			dec starsExplosion
  3224 8314 D0 03			sne
  3225 8316 20 9E 8E			jsr stars.zeruj
  3226
  3227 8319			starsExplosionEnd
  3228
  3229
  3230 8319 A5 99			lda harp0.hook
  3231 831B C9 60			cmp #hook_time_limit-32		; zaczynamy mrugaæ harpunem z hakiem, zaraz zniknie
  3232 831D 90 09			scc
  3233 831F AD B1 80 18 69 10 + 	adb __colpm3 #$10
  3234
  3235
  3236 8328 AD 2A 86			lda PLAYERB1.blink		; !!! PLAYERB1 koniecznie poza obszarem $4000..$7FFF !!!
  3237 832B F0 1B			beq quit
  3238
  3239 832D AD 7D 98 18 69 10 + 	adb chero0+1 #$10
  3240 8336 AD 82 98 18 69 10 + 	adb chero1+1 #$10
  3241 833F AD 87 98 18 69 10 + 	adb chero2+1 #$10
  3242
  3243 8348 A5 8D		quit	lda rA
  3244 834A A6 8E			ldx rX
  3245 834C A4 8F			ldy rY
  3246 834E 40				rti
  3247
  3248
  3249 834F 00			playmusic	brk
  3250 8350 00			vbltim		brk
  3251 8351 00			old_joy		brk
  3252 8352 00			old_key		brk
  3253 8353 00			key_delay	brk
  3254
  3255 8354 01			delay_joy	dta delay_joy_default_value
  3256 8355 FF			delay_trig	dta delay_trig_default_value
  3257
  3258 8356 00			second	dta 0
  3259
  3260 8357 00 00 00		timer	dta 0,0,0
  3261
  3262 835A FF 00 FF 00		sfx_stack dta $ff,0,$ff,0
  3263
  3264 					.endp
  3265
  3266
  3267 				* ---------------------------
  3268 				* ---	ADD PANIC BALL
  3269 				* ---------------------------
  3270 835E			.proc	ADD_PANIC_BALL
  3271
  3272 835E AD E9 FF			lda select
  3273 8361 D0 01			sne
  3274 8363 60				rts
  3275
  3276 8364 AD 4A 70			lda COLLISIONS.tnt+1		; gdy kule wybuchaj¹
  3277 8367 0D 89 90			ora BALL_COLLISION.stop+1	; gdy kule stoj¹
  3278 836A F0 01			seq
  3279 836C 60				rts
  3280
  3281 836D A4 7A			ldy	explose			; if EXPLOSE <> $FF then RTS
  3282 836F C8				iny
  3283 8370 F0 01			seq
  3284 8372 60				rts
  3285
  3286 8373 CE 16 84			dec delay
  3287 8376 30 01			smi
  3288 8378 60				rts
  3289
  3290 8379 AD 0A D2			lda random
  3291 837C 10 01			spl
  3292 837E 60			quit	rts
  3293
  3294 837F A5 91			lda lbcount		; aktualna liczba kul
  3295 8381 C9 16			cmp #balls_limit
  3296 8383 B0 F9			bcs quit
  3297
  3298 8385 A9 16			lda #balls_limit
  3299 8387 38 E5 91			sub lbcount		; dopuszczalna liczba kuli
  3300
  3301 838A C5 92			cmp lblimit		; limit kul dla tego levelu
  3302 838C 90 02			scc
  3303 838E A5 92			lda lblimit
  3304
  3305 8390 AA				tax
  3306 8391 F0 EB			beq quit
  3307
  3308 8393 A0 00			ldy #0
  3309 8395 B9 B7 00		search	lda active,y
  3310 8398 10 08			bpl found
  3311 839A C8				iny
  3312 839B C0 1E			cpy #mobjects-2
  3313 839D D0 F6			bne search
  3314
  3315 839F 4C 7E 83			jmp quit
  3316
  3317 83A2 09 80		found	ora #$80
  3318 83A4 99 B7 00			sta active,y
  3319
  3320 83A7 BD F1 83 99 00 02		mva ball_no,x	ttype,y
  3321 83AD AA				tax
  3322
  3323 83AE A5 92 38 FD 11 84 + 	sbb lblimit no,x
  3324
  3325 83B6 A5 91 18 7D 11 84 + 	adb lbcount no,x
  3326
  3327 83BE AD 0A D2			lda random
  3328 83C1 29 7F			and #$7f
  3329 83C3 69 08			adc #8
  3330 83C5 99 40 02			sta		posx,y
  3331
  3332 83C8 A9 00 99 80 02		mva #0		posy,y
  3333
  3334 83CD 99 C0 02			sta		maxy,y
  3335
  3336 83D0 A9 FF			lda #$ff
  3337 83D2 AE 0A D2			ldx random
  3338 83D5 10 02			spl
  3339 83D7 A9 01			lda #1
  3340
  3341 83D9 99 60 02			sta		addx,y
  3342
  3343 83DC A9 01 99 A0 02		mva #1		addy,y
  3344
  3345 83E1 99 20 02			sta		switch,y
  3346
  3347 83E4 A9 7F 8D 16 84		mva #127	delay
  3348
  3349 83E9 C8				iny
  3350 83EA C4 7F			cpy objects
  3351 83EC 90 02			scc
  3352 83EE 84 7F			sty objects	; nowa liczba obiektów na liœcie
  3353
  3354 83F0 60				rts
  3355
  3356
  3357 83F1			.array	ball_no	[32] .byte
  3358  [0008] 01 01 01 01 01 + 	[8] = 1,1,1,1,1,1,1,1
  3359  [0004] 02 02 02 02		[4] = 2,2,2,2
  3360  [0002] 03 03			[2] = 3,3
  3361  [0001] 04			[1] = 4
  3362 				.enda
  3363
  3364 8411 10 08 04 02 01	no	dta 16,8,4,2,1
  3365
  3366 8416 7F			delay	dta 127
  3367 				.endp
  3368
  3369
  3370 				* ---------------------------
  3371 				* ---	PLAY SOUND FX
  3372 				* ---------------------------
  3373 				// dopisujemy efekt do listy
  3374
  3375 8417			.proc	PlaySfx (.byte note, fx) .var
  3376
  3377 8417 AD 5A 83			lda	NMI.sfx_stack
  3378 841A 10 0E			bpl	_1
  3379
  3380 841C AD 3E 84			lda	fx
  3381 841F 0A				asl
  3382 8420 8D 5A 83			sta	NMI.sfx_stack
  3383 8423 AD 3D 84 8D 5B 83		mva	note	NMI.sfx_stack+1
  3384 8429 60				rts
  3385 842A			_1
  3386 842A AD 5C 83			lda	NMI.sfx_stack+2
  3387 842D 10 0D			bpl	_rts
  3388
  3389 842F AD 3E 84			lda	fx
  3390 8432 0A				asl
  3391 8433 8D 5C 83			sta	NMI.sfx_stack+2
  3392 8436 AD 3D 84 8D 5D 83		mva	note	NMI.sfx_stack+3
  3393
  3394 843C 60			_rts	rts
  3395
  3396 843D 00			note	brk
  3397 843E 00			fx	brk
  3398
  3399 				.endp
  3400
  3401 				* --------------------------------------------------------------------------------------
  3402 				* --------------------------------------------------------------------------------------
  3403
  3404 843F			zerujLedder
  3405 843F A5 90			lda ledder
  3406 8441 F0 10			beq nLedder
  3407
  3408 8443 A5 7C			lda hposy
  3409 8445 29 F8			and #$f8
  3410 8447 85 7C			sta hposy
  3411
  3412 8449 A9 00 85 90			mva #0 ledder
  3413 844D 8D 23 88			sta PLAYER.updw
  3414 8450 4C 11 85			jmp HERO.zerujDU
  3415
  3416 8453 8A			nLedder	txa
  3417
  3418 8454 4C 9C 85			jmp HERO.skip
  3419
  3420 8457 EA EA EA EA EA EA + 	:8 nop
  3421
  3422 845F FD FD FA FB FD FA + rndMinus	.he FD FD FA FB FD FA FC FB FB FD FD FA FB FB FA FA
  3423
  3424 				* ---------------------------
  3425 				* ---	HERO
  3426 				* ---------------------------
  3427 				// wystêpuj¹ odwo³ania do procedury PLAYER, procedura HERO musi znajdowaæ sie poza obszarem $4000..$7FFF
  3428 846F			.proc	HERO (.byte a) .reg
  3429
  3430 846F 8D 0F 86			sta ofset
  3431
  3432 8472 A9 0F			lda #$0f
  3433 = 8473			r_d300	equ *-1
  3434 8474 8D F9 84			sta joyTMP
  3435
  3436 8477 A9 0F 8D 73 84		mva #$0f r_d300
  3437
  3438 847C				@@testSpadania
Macro: @@TESTSPADANIA [Source: pang_chars.asm]
     6 847C A5 7C			lda hposy
     7 847E C9 78			cmp #scrhig*8-32
     8 8480 F0 6E			beq quit
    10 8482 4A				lsr @
    11 8483 4A				lsr @
    12 8484 4A				lsr @
    13 8485 AA				tax
    15 8486 BD 54 F7 85 00		mva linv+4,x ln0
    16 848B BD 74 F7 85 01		mva hinv+4,x ln0+1
    18 8490 BD 94 F7 85 02		mva ldrabin+4,x ln1
    19 8495 BD B4 F7 85 03		mva hdrabin+4,x ln1+1
    21 849A A6 7B			ldx hposx
    22 849C BC 00 0B			ldy min52div4,x
    24 849F B1 02		v0	lda (ln1),y
    25 84A1 F0 08			beq v1			; nie ma go na drabince, albo nie jest ca³kowicie na drabince
    26 84A3 C8				iny
    29 84A4 C8				iny
    30 84A5 D1 02			cmp (ln1),y
    31 84A7 F0 47			beq quit		; jeœli jest na drabince to nie spada
    32 84A9 D0 0A			bne next
    34 84AB C8			v1	iny
    35 84AC B1 02			lda (ln1),y
    36 84AE F0 05			beq next	;v2
    37 84B0 C8				iny
    38 84B1 D1 02			cmp (ln1),y
    39 84B3 F0 3B			beq quit
    41 84B5 20 A8 89		next	jsr testROW
    42 84B8 F0 0D			beq leciii
    44 84BA A5 7C			lda hposy		; normalizacja pozycji pionowej bohatera
    45 84BC 29 F8			and #%11111000
    46 84BE 85 7C			sta hposy
    48 84C0 A9 00 8D D3 85		mva #$00 blkh0		; odblokuj harpun #0, koniec spadania
    49 84C5 F0 29			beq quit
    51 84C7 A9 FF 8D D3 85	leciii	mva #$ff blkh0		; zablokuj harpun #0
    52 84CC 8D A0 85			sta HERO.r_d010		; skoro spada to nie dzia³a przycisk FIRE
    54 84CF A5 7C 18 69 04 85 + 	adb hposy #4
    55 84D6 C9 78			cmp #scrhig*8-32
    56 84D8 90 09			bcc skp
    58 84DA A9 78 85 7C			mva #scrhig*8-32 hposy
    60 84DE A9 00 8D D3 85		mva #$00 blkh0		; odblokuj harpun #0, spadliœmy na sam dó³ pola gry
    62 84E3 AD F9 84		skp	lda joyTMP
    64 84E6 C9 0B			cmp #_left
    65 84E8 F0 34			beq lhero
    66 84EA C9 07			cmp #_right
    67 84EC F0 4C			beq rhero
    69 84EE D0 21			bne zerujDU
    70 84F0			quit
    71 84F0 BC 00 0B			ldy min52div4,x
    73 84F3 C8				iny
    74 84F4 B1 00			lda (ln0),y		; musimy stac na czyms aby wystrzelic harpun
    75 84F6 11 02			ora (ln1),y
Source: pang_chars.asm
  3439
  3440 84F8 A0 00			ldy #0
  3441 = 84F9			joyTMP	equ *-1
  3442
  3443 84FA B9 50 38 8D 01 85		mva	ljoy,y	jmpJoy+1
  3444 				;	mva	hjoy,y	jmpJoy+2
  3445
  3446 8500				.pages
  3447
  3448 8500 4C 1E 85		jmpJoy	jmp lhero
  3449
  3450 8503 A5 7B		zerujRL	lda hposx		; normalizacja pozycji poziomej bohatera
  3451 8505 29 FC			and #%11111100
  3452 8507 85 7B			sta hposx
  3453
  3454 8509 A9 00 8D 31 88	zeruj	mva #0 PLAYER.klatka
  3455 850E 4C 9F 85			jmp readFire
  3456
  3457 8511 A9 00 8D 31 88	zerujDU	mva #0 PLAYER.klatka
  3458 8516 8D D3 85			sta blkh0
  3459 8519 85 90			sta ledder
  3460 851B 4C 9F 85			jmp readFire
  3461
  3462 				* ---------------------------
  3463 				* ---	LEFT
  3464 				* ---------------------------
  3465 851E			lhero	.local
  3466
  3467 851E A5 7B			lda hposx
  3468 8520 C9 30			cmp #48+4-4
  3469 8522 F0 DF			beq zerujRL
  3470
  3471 8524 38 E9 02			sub #2
  3472 8527 85 7B			sta hposx
  3473
  3474 8529 20 B6 89			jsr testCOL
  3475 852C F0 07			beq l_skp
  3476
  3477 852E E6 7B E6 7B			:2 inc hposx		; !!! przywracamy poprzedni¹ wartoœæ HPOSX !!!
  3478
  3479 8532 4C 03 85			jmp zerujRL
  3480
  3481 8535 A2 01		l_skp	ldx #=frmL
  3482
  3483 8537 4C 3F 84			jmp zerujLedder
  3484 					.end
  3485
  3486
  3487 				* ---------------------------
  3488 				* ---	 RIGHT
  3489 				* ---------------------------
  3490 853A			rhero	.local
  3491
  3492 853A A5 7B			lda hposx
  3493 853C C9 C8			cmp #142+48+2+8
  3494 853E F0 C3			beq zerujRL
  3495
  3496 8540 18 69 02			add #2
  3497 8543 85 7B			sta hposx
  3498
  3499 8545 69 0A			adc #2*4+2
  3500
  3501 8547 20 B6 89			jsr testCOL
  3502 854A F0 07			beq r_skp
  3503
  3504 854C C6 7B C6 7B			:2 dec hposx		; !!! przywracamy poprzedni¹ wartoœæ HPOSX !!!
  3505
  3506 8550 4C 03 85			jmp zerujRL
  3507
  3508 8553 A2 02		r_skp	ldx #=frmR
  3509
  3510 8555 4C 3F 84			jmp zerujLedder
  3511 					.end
  3512
  3513 				* ---------------------------
  3514 				* ---	DOWN
  3515 				* ---------------------------
  3516 8558 A5 7C		dhero	lda hposy
  3517 				;	cmp #scrhig*8-32
  3518 				;	beq zerujDU
  3519
  3520 855A 29 07			and #7
  3521 855C D0 0B			bne d_skp
  3522
  3523 855E 20 26 89			jsr heroDOWN
  3524 8561 D0 AE			bne zerujDU
  3525
  3526 8563 A5 7B			lda hposx
  3527 8565 29 FC			and #3^$ff
  3528 8567 85 7B			sta hposx
  3529
  3530 8569 E6 7C E6 7C		d_skp	:2 inc hposy
  3531 856D EE 23 88			inc PLAYER.updw
  3532
  3533 8570 A9 FF 8D D3 85		mva #$ff blkh0		; blokujemy harpun
  3534 8575 8D A0 85			sta HERO.r_d010		; blokujemy FIRE
  3535
  3536 8578 85 90			sta ledder
  3537
  3538 857A D0 23			bne readFire
  3539
  3540 				* ---------------------------
  3541 				* ---	UP
  3542 				* ---------------------------
  3543 857C A5 7C		uhero	lda hposy
  3544 857E F0 91			beq zerujDU
  3545
  3546 8580				.endpg
  3547
  3548 8580 29 07			and #7
  3549 8582 D0 05			bne u_skp
  3550
  3551 8584 20 8B 89			jsr heroUP
  3552 8587 D0 88			bne zerujDU
  3553
  3554 				;	lda hposx
  3555 				;	and #3^$ff
  3556 				;	sta hposx
  3557
  3558 8589 C6 7C C6 7C		u_skp	:2 dec hposy
  3559 858D EE 23 88			inc PLAYER.updw
  3560
  3561 8590 A9 FF 8D D3 85		mva #$ff blkh0		; blokujemy harpun
  3562 8595 8D A0 85			sta HERO.r_d010		; blokujemy FIRE
  3563
  3564 8598 85 90			sta ledder
  3565
  3566 859A D0 03			bne readFire
  3567
  3568 				* ---------------------------
  3569
  3570 859C 8D 3C 88		skip	sta PLAYER.direct
  3571
  3572 859F			readFire
  3573 859F A9 01			lda #1
  3574 = 85A0			r_d010	equ *-1
  3575 85A1 D0 57			bne harps
  3576
  3577 				;	ldy #dolnakrawedz
  3578
  3579 85A3 A5 7C			lda hposy
  3580 85A5 29 F8			and #%11111000	; /8]*8
  3581 85A7 18				clc
  3582 85A8 69 78		harpY	adc #120
  3583 85AA A8				tay
  3584
  3585 85AB A5 7B			lda hposx
  3586 85AD 18 69 04			add #4
  3587 85B0 AA				tax
  3588
  3589 85B1 A5 99			lda harp0.hook		; IF HARP0.HOOK>=HOOK_DELAY to aktualnie harpun z hakiem gdzies zaczepiony
  3590 85B3 C9 08			cmp #hook_delay
  3591 85B5 90 13			bcc hskp
  3592
  3593 85B7 AD D3 85			lda blkh0
  3594 85BA D0 1A			bne _hps
  3595
  3596 85BC A5 93 85 6C			mva harp0.x harpun	; IF czyœcimy HARPUN #0 na ca³ej wysokoœci ekranu
  3597 85C0 A9 00 85 93			mva #0 harp0.x
  3598 85C4 A9 01 85 99			mva #1 harp0.hook
  3599 85C8 D0 0C			bne _hps
  3600
  3601 85CA A5 93		hskp	lda harp0.x
  3602 85CC 0D F7 88			ora CLRHARP.clrPMB1+1
  3603 85CF 0D 06 89			ora CLRHARP.clrPMB2+1
  3604
  3605 85D2 09 FF			ora #$ff
  3606 = 85D3			blkh0	equ *-1
  3607 85D4 F0 03			beq h0
  3608
  3609 				;	lda harp1.x
  3610 				;	ora #$ff
  3611 				;blkh1	equ *-1
  3612 				;	beq h1
  3613
  3614 85D6 4C FA 85		_hps	jmp harps
  3615
  3616 				;----------------------------
  3617
  3618 85D9 86 93		h0	stx harp0.x
  3619 85DB 84 94			sty harp0.y
  3620
  3621 85DD 98				tya
  3622 85DE 38 E9 58			sub #88
  3623 85E1 85 96			sta harp0.start
  3624 85E3 4A 4A 4A			:3 lsr @
  3625 85E6 85 97			sta harp0.startDIV8
  3626
  3627 					PlaySfx #ton_G4 #sfxHrp		; odg³os harpunu
  3627 				 MVA #TON_G4 PLAYSFX.NOTE\ MVA #SFXHRP PLAYSFX.FX\ JSR PLAYSFX
  3627 85E8 A9 2B 8D 3D 84	 MVA #TON_G4 PLAYSFX.NOTE
  3627 85ED A9 12 8D 3E 84	 MVA #SFXHRP PLAYSFX.FX
  3627 85F2 20 17 84		 JSR PLAYSFX
  3628
  3629 85F5 A9 01 8D A0 85	cont	mva #1 r_d010
  3630
  3631 				; -----------------------------------
  3632
  3633 85FA A4 93		harps	ldy harp0.x
  3634 85FC D0 01			sne
  3635 85FE 60				rts
  3636
  3637 85FF AD 03 01			lda @TAB_MEM_BANKS+(=HARPUNS)
  3638 8602 8D 01 D3			sta portb
  3639
  3640 8605 4C 26 44			jmp HARPUNS
  3641
  3642
  3643 8608 A6 93		return	ldx harp0.x		; ustawiamy czyszczenie harpunu w aktualnym buforze (aktualny bufor w OFSET)
  3644 860A BD 00 0B			lda min52div4,x
  3645 860D 18 69 00			add #0
  3646 = 860F			ofset	equ *-1
  3647 8610 AA				tax
  3648
  3649 8611 A9 FE 8D 01 D3		mva #$fe portb
  3650
  3651 8616 A5 95 38 E9 58 85 + 	sbb harp0.y_old #88 ymin
  3652 861D A4 96			ldy harp0.start
  3653 861F 88				dey
  3654
  3655 8620 4C 6E 80			jmp MINMAX1
  3656
  3657 8623 A9 FE 8D 01 D3	quit	mva #$fe portb
  3658 8628 60				rts
  3659 				.endp
  3660
  3661
  3662 				* ---------------------------
  3663 				* ---	PLAYERB1
  3664 				* ---------------------------
  3665 				// korzysta z banków pamiêci, musi znajdowaæ sie poza obszarem $4000..$7FFF
  3666 8629			.proc	PLAYERB1
  3667
  3668 				; ----------------------------------------------------------------------------
  3669
  3670 					ert *<$8000
  3671
  3672 8629 A9 00			lda #0
  3673 = 862A			blink	equ *-1
  3674 862B F0 31			beq skp
  3675
  3676 862D CE 2A 86			dec blink
  3677 8630 D0 2C			bne skp
  3678
  3679 8632 A9 00			lda #0
  3680 8634 8D 89 90			sta	BALL_COLLISION.stop+1		; przywracamy ruch kul
  3681 8637 8D 11 90			sta	BALL_COLLISION_PANIC.stop+1
  3682 863A 8D 2A 86			sta	blink
  3683 863D 8D 50 83			sta	NMI.vbltim			; przywracamy dzia³anie zegara
  3684
  3685 8640 A9 02 8D 7D 98		mva #colpm0Hero	chero0+1		; przywracamy kolory bohatera
  3686 8645 A9 78 8D 82 98		mva #colpm1Hero	chero1+1		; przywracamy kolory bohatera
  3687 864A A9 18 8D 87 98		mva #colpm2Hero	chero2+1		; przywracamy kolory bohatera
  3688
  3689 864F A9 BD 8D 0D 71		mva #{lda posy,x}	COLLISIONS.DETECT.HERO
  3690 8654 A9 80 8D 0E 71 A9 + 	mwa #posy		COLLISIONS.DETECT.HERO+1
  3691
  3692 				; ----------------------------------------------------------------------------
  3693
  3694 865E A5 7B		skp	lda hposx
  3695 8660 38 E9 30			sub #48+4-4
  3696 8663 4A 4A			:2 lsr @
  3697 				;	tay
  3698
  3699 8665 8D 42 88			sta PLAYER.px
  3700
  3701 8668 8D 4C 88			sta PLAYER.ofset
  3702
  3703
  3704 866B A6 7C			ldx hposy
  3705
  3706 866D BD 6F EF 85 3F BD + 	:32 mva hadr1+31-#,x rw0+31*2-#*2+1
  3707
  3708 870D 4C C2 87			jmp PLAYER
  3709 				.endp
  3710
  3711
  3712 				* ---------------------------
  3713 				* ---	PLAYERB2
  3714 				* ---------------------------
  3715 				// korzysta z banków pamiêci, musi znajdowaæ sie poza obszarem $4000..$7FFF
  3716 8710			.proc	PLAYERB2
  3717
  3718 8710 A5 7B			lda hposx
  3719 8712 38 E9 30			sub #48+4-4
  3720 8715 4A 4A			:2 lsr @
  3721 				;	tay
  3722
  3723 8717 8D 42 88			sta PLAYER.px
  3724
  3725 871A 18 69 28			add #40
  3726 871D 8D 4C 88			sta PLAYER.ofset
  3727
  3728
  3729 8720 A6 7C			ldx hposy
  3730
  3731 8722 BD 6F F3 85 3F BD + 	:32 mva hadr2+31-#,x rw0+31*2-#*2+1
  3732
  3733 				;	jmp PLAYER
  3734 				.endp
  3735
  3736
  3737 				* ---------------------------
  3738 				* ---	PLAYER
  3739 				* ---------------------------
  3740 				// korzysta z banków pamiêci, musi znajdowaæ sie poza obszarem $4000..$7FFF
  3741 87C2			.proc	PLAYER
  3742
  3743 87C2 8A				txa
  3744 87C3 29 07			and #7
  3745 87C5 AA				tax
  3746
  3747 					.rept 8
  3748 					LDA LADR+#,X
  3749 					STA RW0+#*2
  3750 					STA RW8+#*2
  3751 					STA RW16+#*2
  3752 					STA RW24+#*2
  3753 					.endr
Source: REPT
  3748 87C6 BD AB 3A			LDA LADR+#,X
  3748 87C9 85 00			STA RW0+#*2
  3748 87CB 85 10			STA RW8+#*2
  3748 87CD 85 20			STA RW16+#*2
  3748 87CF 85 30			STA RW24+#*2
  3748 87D1 BD AC 3A			LDA LADR+#,X
  3748 87D4 85 02			STA RW0+#*2
  3748 87D6 85 12			STA RW8+#*2
  3748 87D8 85 22			STA RW16+#*2
  3748 87DA 85 32			STA RW24+#*2
  3748 87DC BD AD 3A			LDA LADR+#,X
  3748 87DF 85 04			STA RW0+#*2
  3748 87E1 85 14			STA RW8+#*2
  3748 87E3 85 24			STA RW16+#*2
  3748 87E5 85 34			STA RW24+#*2
  3748 87E7 BD AE 3A			LDA LADR+#,X
  3748 87EA 85 06			STA RW0+#*2
  3748 87EC 85 16			STA RW8+#*2
  3748 87EE 85 26			STA RW16+#*2
  3748 87F0 85 36			STA RW24+#*2
  3748 87F2 BD AF 3A			LDA LADR+#,X
  3748 87F5 85 08			STA RW0+#*2
  3748 87F7 85 18			STA RW8+#*2
  3748 87F9 85 28			STA RW16+#*2
  3748 87FB 85 38			STA RW24+#*2
  3748 87FD BD B0 3A			LDA LADR+#,X
  3748 8800 85 0A			STA RW0+#*2
  3748 8802 85 1A			STA RW8+#*2
  3748 8804 85 2A			STA RW16+#*2
  3748 8806 85 3A			STA RW24+#*2
  3748 8808 BD B1 3A			LDA LADR+#,X
  3748 880B 85 0C			STA RW0+#*2
  3748 880D 85 1C			STA RW8+#*2
  3748 880F 85 2C			STA RW16+#*2
  3748 8811 85 3C			STA RW24+#*2
  3748 8813 BD B2 3A			LDA LADR+#,X
  3748 8816 85 0E			STA RW0+#*2
  3748 8818 85 1E			STA RW8+#*2
  3748 881A 85 2E			STA RW16+#*2
  3748 881C 85 3E			STA RW24+#*2
Source: pang_chars.asm
  3754
  3755 881E A5 90			lda ledder
  3756 8820 F0 0E			beq RIGHT_LEFT
  3757
  3758 				;---------------------------
  3759 8822				UP_DOWN:
  3760 				;---------------------------
  3761 8822 A0 00			ldy #0
  3762 = 8823			updw	equ *-1		; bohater chodzi po drabinie
  3763 				;	cpy #3
  3764 				;	sne
  3765 				;	mvy #0 updw
  3766
  3767
  3768 8824 AD 07 01			lda @TAB_MEM_BANKS+(=frmUD)
  3769 8827 8D 01 D3			sta portb
  3770
  3771 882A AE 42 88			ldx px
  3772 882D 4C 4A 42			jmp frmUD
  3773
  3774 				;---------------------------
  3775 8830				RIGHT_LEFT:
  3776 				;---------------------------
  3777 8830 A0 00			ldy #0
  3778 = 8831			klatka	equ *-1
  3779 8832 C0 07			cpy #7		; 7 ró¿nych klatek animacji bohatera
  3780 8834 90 05			bcc skp
  3781
  3782 8836 A0 01 8C 31 88		mvy #1 klatka
  3783 883B			skp
  3784
  3785 883B AD 01 01			lda @TAB_MEM_BANKS+(=frmL)
  3786 = 883C			direct	equ *-2
  3787 883E 8D 01 D3			sta portb
  3788
  3789 8841 A2 00			ldx #0
  3790 = 8842			px	equ *-1
  3791
  3792 8843 4C E0 44			jmp frmL
  3793
  3794 				; ---
  3795
  3796 8846 A9 FE 8D 01 D3	return	mva #$fe portb
  3797
  3798
  3799 884B A2 00			ldx #0
  3800 = 884C			ofset	equ *-1
  3801
  3802 				;	ldy #127
  3803
  3804 884D A5 7C			lda hposy
  3805 884F 85 83			sta ymin
  3806 8851 18 69 1F			add #31
  3807 8854 A8				tay
  3808
  3809 8855 A5 7B			lda hposx
  3810 8857 29 03			and #3
  3811 8859 D0 03			sne
  3812 885B 4C 42 80			jmp MINMAX3	; zaznaczaczmy obszar do czyszczenie w którym znajduje siê bohater
  3813 885E 4C 2C 80			jmp MINMAX4
  3814
  3815 				.endp
  3816
  3817
  3818 				* ---------------------------
  3819 				* ---	WAIT
  3820 				* ---------------------------
  3821 8861			.proc	WAIT (.byte x,y) .reg
  3822
  3823 8861 A5 79 C5 79 F0 FC	_wai	lda:cmp:req frame
  3824 8867 C9 01			cmp #mframe-1
  3825 8869 90 F6			bcc _wai
  3826
  3827 886B 86 6E			stx dlstl
  3828 886D 8E 02 D4			stx dlptr
  3829
  3830 8870 8C 07 D4			sty pmbase
  3831 8873 84 85			sty pmgB
  3832
  3833 8875 69 00			adc #0
  3834 = 8876			frmPlay equ *-1
  3835 8877 8D 76 88			sta frmPlay
  3836
  3837 887A C9 06			cmp #delay_frame_player_animation
  3838 887C 90 08			bcc skp
  3839
  3840 887E EE 31 88			inc PLAYER.klatka
  3841
  3842 8881 A9 00 8D 76 88		mva #0 frmPlay
  3843 8886			skp
  3844 8886 A9 00			lda #0
  3845 8888 85 79			sta frame
  3846
  3847 888A A9 00			lda #0
  3848 = 888B			hposxOK	equ *-1
  3849 888C 8D 5F 98			sta __hposp0
  3850 888F 8D 64 98			sta __hposp1
  3851
  3852 8892 A9 00			lda #0
  3853 = 8893			hposxOK2 equ *-1
  3854 8894 8D 69 98			sta __hposp2
  3855
  3856 8897 A9 00			lda #0
  3857 = 8898			hmosxOK	equ *-1
  3858 8899 8D 6E 98			sta __hposm0
  3859 889C 8D 73 98			sta __hposm1
  3860
  3861 889F A9 00			lda #0
  3862 = 88A0			hmosxOK2 equ *-1
  3863 88A1 8D 78 98			sta __hposm2
  3864
  3865 88A4 60				rts
  3866 				.endp
  3867
  3868
  3869 				* ---------------------------
  3870 				* ---	CLRHARP
  3871 				* ---------------------------
  3872 				// CLRHARP koniecznie poza obszarem banku pamiêci ($4000..$7FFF)
  3873 88A5			.proc	CLRHARP (.byte a) .reg
  3874
  3875 88A5 A4 6C			ldy harpun		; czy kasowac harpun
  3876 88A7 D0 01			sne
  3877 88A9 60				rts
  3878
  3879 88AA 18 79 00 0B			add min52div4,y		; ustawiamy czyszczenie harpunu w aktualnym buforze
  3880 88AE AA				tax
  3881
  3882 88AF A5 95 38 E9 58 85 + 	sbb harp0.y_old #88 ymin
  3883 88B6 A4 96			ldy harp0.start
  3884 88B8 88				dey
  3885
  3886 88B9 20 6E 80			jsr MINMAX1
  3887
  3888
  3889 				// ustawiamy parametry potrzebne do wyczyszczenia grafiki PM dla harpunu i grotu
  3890 				// harpun i grot zostan¹ wyczyszczony przez procedury CLEARB1 i CLEARB2
  3891
  3892 88BC			setPMClear
  3893 88BC AD 03 01			lda @TAB_MEM_BANKS+(=clrHARP1)
  3894 88BF 8D F7 88			sta clrPMB1+1
  3895 88C2 8D 06 89			sta clrPMB2+1
  3896
  3897 88C5 8D 01 D3			sta portb
  3898
  3899 88C8 A9 D0 8D 3D 44		mva #{bne} hak
  3900
  3901 88CD 20 A2 8E			jsr stars.zeruj2
  3902
  3903 				;	mva	#defaultPrior	gtia+1
  3904 				;	mva	#colm3Harpun	__colpm3	; przywracamy kolor harpunu
  3905
  3906 88D0 A9 00			lda #0
  3907 				;	sta NMI.starsExplosion			; wy³¹czenie gwiazdek
  3908 88D2 85 93			sta harp0.x
  3909 88D4 85 6C			sta harpun
  3910
  3911 88D6 8D AC 80			sta __hposm3		; chowamy pocisk podbarwiaj¹cy harpun za krawêdzi¹ ekranu
  3912
  3913 88D9 A5 99			lda harp0.hook		; zmniejszamy wartosc HARP0.HOOK aby nie mruga³ kolorem harpunu
  3914 88DB F0 04			seq
  3915 88DD A9 01 85 99			mva #1 harp0.hook
  3916
  3917 88E1 A4 95			ldy harp0.y_old
  3918
  3919 88E3 B9 00 42			lda min88div8,y		; dostêp do MIN88DIV8 tylko przy w³¹czonym banku
  3920 88E6 85 70			sta clrHrp.min
  3921
  3922 88E8 A5 97			lda harp0.startDIV8
  3923 88EA 18				clc			; dodatkowe -1
  3924 88EB F9 00 42			sbc min88div8,y
  3925 88EE 85 71			sta clrHrp.max
  3926
  3927 88F0 A9 FE 8D 01 D3	return	mva #$fe portb
  3928 88F5 60				rts
  3929
  3930
  3931 88F6 A9 00		clrPMB1	lda #0
  3932 88F8 F0 F6			beq return
  3933
  3934 				;	lda @TAB_MEM_BANKS+(=clrHARPB1)
  3935 88FA 8D 01 D3			sta portb
  3936
  3937 88FD A9 00 8D F7 88		mva #0 clrPMB1+1
  3938
  3939 8902 4C 74 46			jmp clrHARP1
  3940
  3941
  3942 8905 A9 00		clrPMB2	lda #0
  3943 8907 F0 E7			beq return
  3944
  3945 				;	lda @TAB_MEM_BANKS+(=clrHARPB1)
  3946 8909 8D 01 D3			sta portb
  3947
  3948 890C A9 00 8D 06 89		mva #0 clrPMB2+1
  3949
  3950 8911 4C 84 4A			jmp clrHARP2
  3951
  3952 				.endp
  3953
  3954
  3955 				* ---------------------------
  3956 				* ---	CLRPAGES
  3957 				* ---------------------------
  3958 8914			.proc	CLRPAGES (.byte y .byte x .byte a) .reg
  3959
  3960 8914 8C 1B 89			sty clr+2
  3961
  3962 8917 A0 00			ldy #0
  3963 8919 99 00 FF C8 D0 FA	clr	sta:rne $ff00,y+
  3964 891F EE 1B 89			inc clr+2
  3965 8922 CA				dex
  3966 8923 D0 F4			bne clr
  3967 8925 60				rts
  3968
  3969 				.endp
  3970
  3971
  3972 				* ---------------------------
  3973 				* ---	HERODOWN
  3974 				* ---------------------------
  3975 8926			heroDOWN .local
  3976 8926 A5 7C			lda hposy
  3977 8928 4A 4A 4A			:3 lsr @
  3978 892B AA				tax
  3979
  3980 892C BD 54 F7 85 00		mva linv+4,x ln0
  3981 8931 BD 74 F7 85 01		mva hinv+4,x ln0+1
  3982
  3983 8936 BD 94 F7 85 02		mva ldrabin+4,x ln1
  3984 893B BD B4 F7 85 03		mva hdrabin+4,x ln1+1
  3985
  3986 8940 A6 7B		test	ldx hposx
  3987 8942 BC 00 0B			ldy min52div4,x
  3988
  3989 8945 A2 00			ldx #0
  3990
  3991 8947 B1 02			lda (ln1),y
  3992 8949 C8				iny
  3993 894A D1 02			cmp (ln1),y
  3994 894C D0 06			bne skp0
  3995
  3996 894E C9 00			cmp #0
  3997 8950 F0 02			seq
  3998 8952 A2 02			ldx #2
  3999
  4000 8954 B1 02		skp0	lda (ln1),y
  4001 8956 F0 06			beq skp1
  4002 8958 C8				iny
  4003 8959 D1 02			cmp (ln1),y
  4004 895B D0 01			sne
  4005 895D E8				inx
  4006
  4007 895E E0 03		skp1	cpx #3
  4008 8960 F0 0B			beq ok
  4009 8962 E0 01			cpx #1
  4010 8964 F0 0F			beq okR
  4011 8966 E0 02			cpx #2
  4012 8968 F0 07			beq okL
  4013
  4014 896A A9 FF		quit	lda #$ff
  4015 896C 60				rts
  4016
  4017 896D A9 00		ok	lda #0
  4018 896F F0 06			beq skp
  4019
  4020 8971 A9 FC		okL	lda #-4
  4021 8973 D0 02			sne
  4022
  4023 8975 A9 04		okR	lda #4
  4024 8977 18 65 7B		skp	add hposx
  4025 897A 29 FC			and #3^$ff
  4026 897C 85 7B			sta hposx
  4027
  4028 				;	lda #0
  4029 				;	rts
  4030 897E 20 A8 89			jsr testROW
  4031 8981 F0 05			beq freeWay
  4032 				;	bmi freeWay
  4033
  4034 8983 C9 78			cmp #120
  4035 8985 90 01			scc
  4036 8987 60				rts
  4037
  4038 8988 A9 00		freeWay	lda #0
  4039 898A 60				rts
  4040
  4041 					.end
  4042
  4043
  4044 				* ---------------------------
  4045 				* ---	HEROUP
  4046 				* ---------------------------
  4047 898B			heroUP	.local
  4048 898B A5 7C			lda hposy
  4049 898D 4A 4A 4A			:3 lsr @
  4050 8990 AA				tax
  4051
  4052 8991 BD 4F F7 85 00		mva linv-1,x ln0
  4053 8996 BD 6F F7 85 01		mva hinv-1,x ln0+1
  4054
  4055 899B BD 93 F7 85 02		mva ldrabin+3,x ln1
  4056 89A0 BD B3 F7 85 03		mva hdrabin+3,x ln1+1
  4057
  4058 89A5 4C 40 89			jmp heroDOWN.test
  4059
  4060 					.end
  4061
  4062
  4063 				* ---------------------------
  4064 				* ---	TESTROW
  4065 				* ---------------------------
  4066 89A8 A6 7B		testROW	ldx hposx
  4067 89AA BC 00 0B			ldy min52div4,x
  4068
  4069 89AD B1 00			lda (ln0),y
  4070 89AF C8				iny
  4071 89B0 11 00			ora (ln0),y
  4072 89B2 C8				iny
  4073 89B3 11 00			ora (ln0),y
  4074 89B5 60				rts
  4075
  4076
  4077 				* ---------------------------
  4078 				* ---	TESTCOL
  4079 				* ---------------------------
  4080 89B6 A8			testCOL	tay
  4081
  4082 89B7 A5 7C			lda hposy
  4083 89B9 4A 4A 4A			:3 lsr @
  4084 89BC AA				tax
  4085
  4086 89BD BD 50 F7			lda linv,x
  4087 89C0 18				clc
  4088 89C1 79 00 0B			adc min52div4,y
  4089 89C4 85 00			sta ln0
  4090 89C6 BD 70 F7			lda hinv,x
  4091 89C9 69 00			adc #0
  4092 89CB 85 01			sta ln0+1
  4093
  4094 89CD A0 00			ldy #0
  4095 89CF B1 00			lda (ln0),y
  4096
  4097 89D1 A0 30			ldy #scrwid
  4098 89D3 11 00			ora (ln0),y
  4099
  4100 89D5 A0 60			ldy #scrwid*2
  4101 89D7 11 00			ora (ln0),y
  4102
  4103 89D9 A0 90			ldy #scrwid*3
  4104 89DB 11 00			ora (ln0),y
  4105
  4106 89DD 60				rts
  4107
  4108
  4109 				* ---------------------------
  4110 				* ---	TESTSPADANIA
  4111 				* ---------------------------
  4112 				.macro	@@testSpadania
  4113 				
  4114 				;	lda hposx
  4115 				;	and #3
  4116 				;	bne quit
  4117 				
  4118 					lda hposy
  4119 					cmp #scrhig*8-32
  4120 					beq quit
  4121 				
  4122 					lsr @
  4123 					lsr @
  4124 					lsr @
  4125 					tax
  4126 				
  4127 					mva linv+4,x ln0
  4128 					mva hinv+4,x ln0+1
  4129 				
  4130 					mva ldrabin+4,x ln1
  4131 					mva hdrabin+4,x ln1+1
  4132 				
  4133 					ldx hposx
  4134 					ldy min52div4,x
  4135 				
  4136 				v0	lda (ln1),y
  4137 					beq v1			; nie ma go na drabince, albo nie jest ca³kowicie na drabince
  4138 					iny
  4139 				;	cmp (ln1),y
  4140 				;	beq quit
  4141 					iny
  4142 					cmp (ln1),y
  4143 					beq quit		; jeœli jest na drabince to nie spada
  4144 					bne next
  4145 				
  4146 				v1	iny
  4147 					lda (ln1),y
  4148 					beq next	;v2
  4149 					iny
  4150 					cmp (ln1),y
  4151 					beq quit
  4152 				
  4153 				next	jsr testROW
  4154 					beq leciii
  4155 				
  4156 					lda hposy		; normalizacja pozycji pionowej bohatera
  4157 					and #%11111000
  4158 					sta hposy
  4159 				
  4160 					mva #$00 blkh0		; odblokuj harpun #0, koniec spadania
  4161 					beq quit
  4162 				
  4163 				leciii	mva #$ff blkh0		; zablokuj harpun #0
  4164 					sta HERO.r_d010		; skoro spada to nie dzia³a przycisk FIRE
  4165 				
  4166 					adb hposy #4
  4167 					cmp #scrhig*8-32
  4168 					bcc skp
  4169 				
  4170 					mva #scrhig*8-32 hposy
  4171 				
  4172 					mva #$00 blkh0		; odblokuj harpun #0, spadliœmy na sam dó³ pola gry
  4173 				
  4174 				skp	lda joyTMP
  4175 				
  4176 					cmp #_left
  4177 					beq lhero
  4178 					cmp #_right
  4179 					beq rhero
  4180 				
  4181 					bne zerujDU
  4182 				quit
  4183 					ldy min52div4,x
  4184 				
  4185 					iny
  4186 					lda (ln0),y		; musimy stac na czyms aby wystrzelic harpun
  4187 					ora (ln1),y
  4188 				;	sne
  4189 				;	sty HERO.r_d010		; fireOFF ??? powodowal zablokowanie wystrzelenia harpunu !!!
  4190 				.endm
  4191
  4192
  4193 				* ---------------------------
  4194 				* ---	CLRWALL
  4195 				* ---------------------------
  4196 89DE			.local	clrWALL
  4197
  4198 89DE A9 00		skip	lda #0		; jeœli <>0 to usuwamy murki i czyœcimy clrWallIDX[0..wallIDXold]
  4199 89E0 D0 14			bne CLEAR
  4200
  4201 89E2 A6 81			ldx wallTMP	; jeœli wallTMP<wallIDX to usuwamy murek clrWallPOS[wallTMP]
  4202 89E4 E4 80			cpx wallIDX
  4203 89E6 90 01			scc
  4204 89E8 60				rts
  4205
  4206 89E9 BC 80 08			ldy clrWallPOS,x
  4207 89EC 8C 00 8A			sty LEFT.clr+1
  4208 89EF C8				iny
  4209 89F0 8C 16 8A			sty RIGHT.clr+1
  4210
  4211 89F3 8C DF 89			sty skip+1
  4212
  4213 89F6			CLEAR
  4214 89F6 A9 00		side	lda #0
  4215 89F8 49 01			eor #1
  4216 89FA 8D F7 89			sta side+1
  4217 89FD D0 16			bne RIGHT
  4218
  4219
  4220 89FF			LEFT	.local
  4221 89FF A2 00		clr	ldx #0
  4222 8A01 30 12			bmi RIGHT
  4223
  4224 8A03 20 46 8A			jsr CWALL
  4225
  4226 8A06 A5 82			lda wallHIT
  4227 8A08 F0 05			beq skp
  4228
  4229 8A0A 8D 00 8A			sta clr+1
  4230 8A0D D0 1B			bne TEST
  4231
  4232 8A0F CE 00 8A		skp	dec clr+1
  4233
  4234 8A12 4C 2A 8A			jmp TEST
  4235 					.endl
  4236
  4237
  4238 8A15			RIGHT	.local
  4239 8A15 A2 00		clr	ldx #0
  4240 8A17 E0 28			cpx #40
  4241 8A19 B0 0F			bcs TEST
  4242
  4243 8A1B 20 46 8A			jsr CWALL
  4244
  4245 8A1E A5 82			lda wallHIT
  4246 8A20 F0 05			beq skp
  4247
  4248 8A22 8D 16 8A			sta clr+1
  4249 8A25 D0 03			bne TEST
  4250
  4251 8A27 EE 16 8A		skp	inc clr+1
  4252 					.endl
  4253
  4254 8A2A			TEST
  4255 8A2A AD 00 8A			lda LEFT.clr+1
  4256 8A2D 10 16			bpl quit		; jeszcze nie skoñczy³ testowaæ lewej strony
  4257 8A2F AD 16 8A			lda RIGHT.clr+1
  4258 8A32 C9 28			cmp #40
  4259 8A34 90 0F			bcc quit		; jeszcze nie skoñczy³ testowaæ prawej strony
  4260
  4261 8A36 A9 00			lda #0
  4262 8A38 A6 81			ldx wallTMP
  4263 8A3A BC 00 08			ldy clrWallIDX,x
  4264 8A3D 99 00 09			sta killWall,y		; usuwamy informacje o murze który usun¹æ
  4265
  4266 8A40 8D DF 89			sta skip+1		; SKIP = 0
  4267
  4268 8A43 E6 81			inc wallTMP		; nastepny murek z listy
  4269
  4270 8A45 60			quit	rts
  4271
  4272 8A46 A9 FF 85 82		CWALL	mva #$ff wallHIT
  4273
  4274 8A4A BC 04 B3 B9 00 09 + 	:16 @@cwall #
  4275
  4276 8BFA 60				rts
  4277 				.endl
  4278
  4279
  4280 				.macro	@@cwall
  4281 					ldy invers+4+:1*scrwid,x
  4282 					lda killWall,y
  4283 					beq _skp
  4284 					txa
  4285 					ora tmpINVERS+4+:1*scrwid,x
  4286 					sta scr1+4+:1*scrwid,x		; znaki z przedzia³u 0..37
  4287 					ora #$40
  4288 					sta scr2+4+:1*scrwid,x		; znaki z przedzia³u 64..101
  4289 					lda #0
  4290 					sta invers+4+:1*scrwid,x
  4291 					sta wallHIT
  4292 				_skp
  4293 				.endm
  4294
  4295 				* ---------------------------
  4296
  4297 8BFB			.local	ResetScore
  4298
  4299 8BFB AD 0B 01 8D 01 D3		mva @TAB_MEM_BANKS+(=over) portb
  4300
  4301 8C01 20 B2 7E			jsr UpdateScoreBoard.reset
  4302
  4303 8C04 A9 FE 8D 01 D3		mva #$fe portb
  4304
  4305 8C09 60				rts
  4306 				.endl
  4307
  4308
  4309 8C0A			.local	JingleDeath
  4310
  4311 8C0A AD 04 01 8D 01 D3		mva @TAB_MEM_BANKS+(=rmt2) portb
  4312
  4313 8C10 A9 00 8D 4F 83		mva #$00 NMI.playmusic
  4314 8C15 20 09 78			jsr rmt2.RASTERMUSICTRACKER+9
  4315
  4316 8C18 AD C8 9A			lda GameEnd.reason
  4317 8C1B F0 1A			beq _2
  4318 8C1D C9 04			cmp #deathCode.panic_stop
  4319 8C1F F0 16			beq _2
  4320
  4321 8C21 A9 0C 8D 3C 88		mva #=frmD PLAYER.direct
  4322
  4323 					RMT_MODUL #msxCode.jingle1
  4323 				 LDY# MSXCODE.JINGLE1\ JSR RMT_MODUL
  4323 8C26 A0 08		 LDY# MSXCODE.JINGLE1
  4323 8C28 20 AE 92		 JSR RMT_MODUL
  4324
  4325 8C2B A9 4C 8D 56 98		mva #{jmp} dliDeath
  4326 8C30 A9 00 85 7D			mva #0 yB1old
  4327
  4328 8C34 4C 3C 8C			jmp _skp
  4329
  4330 				_2	RMT_MODUL #msxCode.jingle2
  4330 				 LDY# MSXCODE.JINGLE2\ JSR RMT_MODUL
  4330 8C37 A0 09		 LDY# MSXCODE.JINGLE2
  4330 8C39 20 AE 92		 JSR RMT_MODUL
  4331
  4332 8C3C A9 FE 8D 01 D3	_skp	mva #$fe portb
  4333 8C41 8D 4F 83			sta NMI.playmusic
  4334
  4335 8C44 60				rts
  4336
  4337
  4338 8C45 A9 FF 8D 50 83	prepare	mva #$ff NMI.vbltim		; zatrzymujemy zegar
  4339
  4340 8C4A A9 00 8D 2A 86		mva #0 PLAYERB1.blink		; koniec mrugania kolorem ubranka bohatera
  4341
  4342 8C4F A9 02 8D 7D 98		mva #colpm0Hero	chero0+1	; przywracamy kolory bohatera
  4343 8C54 A9 78 8D 82 98		mva #colpm1Hero	chero1+1	; przywracamy kolory bohatera
  4344 8C59 A9 18 8D 87 98		mva #colpm2Hero	chero2+1	; przywracamy kolory bohatera
  4345
  4346 8C5E AD C8 9A			lda GameEnd.reason		; gdy bohater ginie stoi (frmD), gdy zwycieza kroczy
  4347 8C61 F0 16			beq walk
  4348 8C63 C9 04			cmp #deathCode.panic_stop
  4349 8C65 F0 12			beq walk
  4350
  4351 8C67 A9 00 85 90			mva #0 ledder
  4352 				;	sta NMI.starsExplosion
  4353
  4354 8C6B A9 8D			lda #{sta*}
  4355 8C6D 8D 64 9A			sta GameEnd.klat0
  4356 8C70 8D 86 9A			sta GameEnd.klat1
  4357
  4358 8C73 A9 01 8D 3C 88		mva #=frmL PLAYER.direct
  4359
  4360 8C78 60				rts
  4361
  4362 8C79			walk
  4363 8C79 A9 2C			lda #{bit}
  4364 8C7B 8D 64 9A			sta GameEnd.klat0
  4365 8C7E 8D 86 9A			sta GameEnd.klat1
  4366
  4367 8C81 60				rts
  4368
  4369 				.endl
  4370
  4371
  4372 8C82			.proc	depack (.word xa .byte y) .reg
  4373
  4374 8C82 85 9A			sta inputPointer
  4375 8C84 86 9B			stx inputPointer+1
  4376
  4377 8C86 84 9D			sty outputPointer+1
  4378 8C88 A9 00 85 9C			mva #0 outputPointer
  4379
  4380 8C8C 4C 8D 95			jmp inflate
  4381 				.endp
  4382
  4383
  4384 8C8F			.local	CONGRATS
  4385
  4386 8C8F AD 0B 01			lda @TAB_MEM_BANKS+(=cong)
  4387 8C92 8D 01 D3			sta portb
  4388
  4389 				;	mwa #cong inputPointer
  4390 				;	mwa #$d800 outputPointer
  4391 				;	jsr inflate
  4392 					depack #cong >$d800
  4392 				 LDX> CONG\ LDA< CONG\ LDY >$D800\ JSR DEPACK
  4392 8C95 A2 61		 LDX> CONG
  4392 8C97 A9 32		 LDA< CONG
  4392 8C99 A0 D8		 LDY >$D800
  4392 8C9B 20 82 8C		 JSR DEPACK
  4393 				;
  4394 					RMT_MODUL #msxCode.Congratulations
  4394 				 LDY# MSXCODE.CONGRATULATIONS\ JSR RMT_MODUL
  4394 8C9E A0 02		 LDY# MSXCODE.CONGRATULATIONS
  4394 8CA0 20 AE 92		 JSR RMT_MODUL
  4395 8CA3 A8				tay
  4396
  4397 8CA4 20 E0 FF			jsr mainIntro			; show G2F, fade in
  4398
  4399 8CA7 4C E7 8F			jmp INIT_VECTORS
  4400 				.endl
  4401
  4402
  4403 8CAA			.local	DATAMATRIX
  4404
  4405 8CAA AD 0B 01			lda @TAB_MEM_BANKS+(=dmtx)
  4406 8CAD 8D 01 D3			sta portb
  4407
  4408 				;	mwa #cong inputPointer
  4409 				;	mwa #$d800 outputPointer
  4410 				;	jsr inflate
  4411 					depack #dmtx >$d800
  4411 				 LDX> DMTX\ LDA< DMTX\ LDY >$D800\ JSR DEPACK
  4411 8CB0 A2 78		 LDX> DMTX
  4411 8CB2 A9 35		 LDA< DMTX
  4411 8CB4 A0 D8		 LDY >$D800
  4411 8CB6 20 82 8C		 JSR DEPACK
  4412 				;
  4413
  4414 8CB9 A2 89			ldx <score
  4415 8CBB A0 3A			ldy >score
  4416
  4417 8CBD AD E9 FF			lda select
  4418 8CC0 20 E0 FF			jsr mainIntro			; show G2F, fade in
  4419
  4420 8CC3 4C E7 8F			jmp INIT_VECTORS
  4421 				.endl
  4422
  4423
  4424 8CC6			.local	GAMEOVER
  4425
  4426 8CC6 AD 09 01			lda @TAB_MEM_BANKS+(=over_fnt)
  4427 8CC9 8D 01 D3			sta portb
  4428
  4429 				;	mwa #over_fnt inputPointer
  4430 				;	mwa #$bc00 outputPointer
  4431 				;	jsr inflate
  4432 					depack #over_fnt >$bc00
  4432 				 LDX> OVER_FNT\ LDA< OVER_FNT\ LDY >$BC00\ JSR DEPACK
  4432 8CCC A2 6E		 LDX> OVER_FNT
  4432 8CCE A9 62		 LDA< OVER_FNT
  4432 8CD0 A0 BC		 LDY >$BC00
  4432 8CD2 20 82 8C		 JSR DEPACK
  4433
  4434 8CD5 AD 0B 01			lda @TAB_MEM_BANKS+(=over)
  4435 8CD8 8D 01 D3			sta portb
  4436
  4437 8CDB 20 56 7E			jsr UpdateScoreBoard
  4438
  4439 				;	mwa #over inputPointer
  4440 				;	mwa #$d800 outputPointer
  4441 				;	jsr inflate
  4442 					depack #over >$d800
  4442 				 LDX> OVER\ LDA< OVER\ LDY >$D800\ JSR DEPACK
  4442 8CDE A2 53		 LDX> OVER
  4442 8CE0 A9 C1		 LDA< OVER
  4442 8CE2 A0 D8		 LDY >$D800
  4442 8CE4 20 82 8C		 JSR DEPACK
  4443 				;
  4444 					RMT_MODUL #msxCode.GameOver
  4444 				 LDY# MSXCODE.GAMEOVER\ JSR RMT_MODUL
  4444 8CE7 A0 01		 LDY# MSXCODE.GAMEOVER
  4444 8CE9 20 AE 92		 JSR RMT_MODUL
  4445 8CEC A8				tay
  4446
  4447 8CED AD E9 FF			lda select
  4448 8CF0 20 E0 FF			jsr mainIntro			; show G2F, fade in
  4449
  4450 8CF3 AD 0B 01			lda @TAB_MEM_BANKS+(=over)
  4451 8CF6 8D 01 D3			sta portb
  4452
  4453 8CF9 A2 D2			ldx <hi_tour			; kopiujemy tablice wynikow
  4454 8CFB A0 7D			ldy >hi_tour
  4455 8CFD AD E9 FF			lda select
  4456 8D00 F0 04			beq skp
  4457
  4458 8D02 A2 14			ldx <hi_panic
  4459 8D04 A0 7E			ldy >hi_panic
  4460 8D06			skp
  4461 8D06 86 6A			stx hlp
  4462 8D08 84 6B			sty hlp+1
  4463
  4464 8D0A A0 41			ldy #score_all*6-1
  4465 8D0C B9 00 02 91 6A 88 + 	mva:rpl ScoreBoard,y (hlp),y-
  4466
  4467 8D14 4C E7 8F			jmp INIT_VECTORS
  4468 				.endl
  4469
  4470
  4471 8D17			.local	MAPTOUR
  4472
  4473 8D17 AD E9 FF			lda select
  4474 8D1A F0 01			seq
  4475 8D1C 60				rts
  4476
  4477 8D1D AD 07 01			lda @TAB_MEM_BANKS+(=mapa_fnt)
  4478 8D20 8D 01 D3			sta portb
  4479
  4480 				;	mwa #mapa_fnt inputPointer
  4481 				;	mwa #$bc00 outputPointer
  4482 				;	jsr inflate
  4483 					depack #mapa_fnt >$bc00
  4483 				 LDX> MAPA_FNT\ LDA< MAPA_FNT\ LDY >$BC00\ JSR DEPACK
  4483 8D23 A2 73		 LDX> MAPA_FNT
  4483 8D25 A9 D9		 LDA< MAPA_FNT
  4483 8D27 A0 BC		 LDY >$BC00
  4483 8D29 20 82 8C		 JSR DEPACK
  4484
  4485 8D2C AD 0B 01			lda @TAB_MEM_BANKS+(=mapa)
  4486 8D2F 8D 01 D3			sta portb
  4487
  4488 				;	mwa #mapa inputPointer
  4489 				;	mwa #$d800 outputPointer
  4490 				;	jsr inflate
  4491 					depack #mapa >$d800
  4491 				 LDX> MAPA\ LDA< MAPA\ LDY >$D800\ JSR DEPACK
  4491 8D32 A2 40		 LDX> MAPA
  4491 8D34 A9 00		 LDA< MAPA
  4491 8D36 A0 D8		 LDY >$D800
  4491 8D38 20 82 8C		 JSR DEPACK
  4492 				;
  4493 					RMT_MODUL #msxCode.jingle2
  4493 				 LDY# MSXCODE.JINGLE2\ JSR RMT_MODUL
  4493 8D3B A0 09		 LDY# MSXCODE.JINGLE2
  4493 8D3D 20 AE 92		 JSR RMT_MODUL
  4494 8D40 A8				tay
  4495
  4496 8D41 AD F6 38			lda level?
  4497 8D44 20 E0 FF			jsr mainIntro			; show G2F, fade in
  4498
  4499 8D47 4C E7 8F			jmp INIT_VECTORS
  4500 				.endl
  4501
  4502
  4503 8D4A			INTRO	.local
  4504
  4505 8D4A AD 01 01			lda @TAB_MEM_BANKS+(=intro_kulki)
  4506 8D4D 8D 01 D3			sta portb
  4507
  4508 				;	mwa #intro_kulki inputPointer
  4509 				;	mwa #$c000 outputPointer
  4510 				;	jsr inflate
  4511 					depack #intro_kulki >$c000
  4511 				 LDX> INTRO_KULKI\ LDA< INTRO_KULKI\ LDY >$C000\ JSR DEPACK
  4511 8D50 A2 74		 LDX> INTRO_KULKI
  4511 8D52 A9 21		 LDA< INTRO_KULKI
  4511 8D54 A0 C0		 LDY >$C000
  4511 8D56 20 82 8C		 JSR DEPACK
  4512
  4513 8D59 AD 05 01			lda @TAB_MEM_BANKS+(=intro_logo)
  4514 8D5C 8D 01 D3			sta portb
  4515
  4516 				;	mwa #intro_logo inputPointer
  4517 				;	mwa #$d800 outputPointer
  4518 				;	jsr inflate
  4519 					depack #intro_logo >$d800
  4519 				 LDX> INTRO_LOGO\ LDA< INTRO_LOGO\ LDY >$D800\ JSR DEPACK
  4519 8D5F A2 40		 LDX> INTRO_LOGO
  4519 8D61 A9 00		 LDA< INTRO_LOGO
  4519 8D63 A0 D8		 LDY >$D800
  4519 8D65 20 82 8C		 JSR DEPACK
  4520
  4521 					RMT_MODUL #msxCode.title
  4521 				 LDY# MSXCODE.TITLE\ JSR RMT_MODUL
  4521 8D68 A0 00		 LDY# MSXCODE.TITLE
  4521 8D6A 20 AE 92		 JSR RMT_MODUL
  4522
  4523 8D6D 20 E0 FF			jsr mainIntro			; show G2F, fade in
  4524
  4525 8D70 F0 09			beq next
  4526
  4527 8D72 20 E7 8F			INIT_VECTORS
  4528 8D75 20 C6 8C			jsr GAMEOVER
  4529 8D78 4C 80 3B			jmp again
  4530
  4531 8D7B			next
  4532 8D7B 20 E7 8F			INIT_VECTORS
  4533
  4534 8D7E A0 00 8C AA 76		mvy #0 INIT.ground
  4535 8D83 8C F6 38			sty level?
  4536
  4537 8D86 C8				iny
  4538 8D87 8C 85 76			sty INIT.level_panic		; = 1
  4539
  4540 				;	mva #70  level?
  4541
  4542 8D8A EE 2E 94			inc GROUND_MOVEUP.ground	; zmiana tekstury pod³ogi
  4543
  4544 8D8D 60				rts
  4545
  4546 8D8E			start
  4547
  4548 				* zwiêkszamy SUBLEVEL 0..5, nastêpnie LEVEL 1..12 (ka¿dy nowy level to nowa tekstura t³a)
  4549
  4550 8D8E A0 09			ldy #9
  4551 8D90 B9 EC 38		slop	lda stage_bar,y
  4552 8D93 99 92 3A			sta sstage,y
  4553 8D96 88				dey
  4554 8D97 10 F7			bpl slop
  4555
  4556 8D99 A9 00			lda #0
  4557 = 8D9A			nxtLVL	equ *-1
  4558 8D9B D0 0F			bne skp_
  4559
  4560 8D9D EE F6 38			inc level?
  4561 8DA0 AD F6 38			lda level?
  4562 8DA3 C9 48			cmp #72
  4563 8DA5 D0 05			sne
  4564 8DA7 A9 00 8D F6 38		mva #0 level?
  4565
  4566 8DAC AE F6 38		skp_	ldx level?
  4567
  4568 				.nowarn	div #6
  4568 				 LDA# 6\ JSR DIV
  4568 8DAF A9 06		 LDA# 6
  4568 8DB1 20 03 9A		 JSR DIV
  4569
  4570 8DB4 18 69 01			add #1
  4571 8DB7 8D 95 3A			sta sstage+3
  4572
  4573 8DBA A2 0F			ldx #spacja		; spacja
  4574
  4575 8DBC A5 9A			lda div.ACC
  4576 8DBE 18 69 01			add #1
  4577 8DC1 C9 0A			cmp #10
  4578 8DC3 90 05			bcc lt10
  4579
  4580 8DC5 38 E9 0A			sub #10
  4581 8DC8 A2 01			ldx #1
  4582
  4583 8DCA 8D 93 3A		lt10	sta sstage+1
  4584 8DCD 8E 92 3A			stx sstage
  4585
  4586 8DD0 A9 00 8D 9A 8D	skp	mva #0 nxtLVL
  4587
  4588 8DD5 20 9A 99			jsr DEPACK_LVL
  4589
  4590 8DD8 AE F6 38			ldx level?
  4591 				.nowarn	div #6
  4591 				 LDA# 6\ JSR DIV
  4591 8DDB A9 06		 LDA# 6
  4591 8DDD 20 03 9A		 JSR DIV
  4592
  4593 8DE0 A5 9A			lda div.ACC		; 0..11 !!!
  4594 8DE2 C9 0C		txtLP	cmp #12
  4595 8DE4 90 06			bcc txtOK
  4596
  4597 8DE6 38 E9 0C			sub #12
  4598 8DE9 4C E2 8D			jmp txtLP
  4599
  4600 8DEC A8			txtOK	tay
  4601
  4602 8DED BE C3 8F			ldx txt_bnk,y
  4603 8DF0 BD 00 01			lda @TAB_MEM_BANKS,x
  4604 8DF3 8D 01 D3			sta portb
  4605
  4606 8DF6 B9 CF 8F 85 9A		mva txtLadr,y	inputPointer
  4607 8DFB B9 DB 8F 85 9B		mva txtHadr,y	inputPointer+1
  4608
  4609 8E00 A9 40 85 9C A9 9B + 	mwa #txture	outputPointer
  4610 8E08 20 8D 95			jsr inflate
  4611
  4612 8E0B A9 FE 8D 01 D3		mva #$fe portb
  4613
  4614 8E10 4C FD 73			jmp INIT
  4615
  4616 					.endl
  4617
  4618
  4619 				* ---------------------------
  4620 				* ---	EXPLOSIONS
  4621 				* ---------------------------
  4622 8E13			EXPLOSIONS
  4623
  4624 				;	lda	harp0.x		; synchronizujemy sie z harpunem
  4625 				;	seq			; jeœli nie zosta³ skasowany to nie poka¿emy gwiazdek z wybuchu
  4626 				;	rts
  4627
  4628 8E13 A6 7A			ldx	explose		; pokazujemy pierwsz¹ eksplozjê w kolejnoœci
  4629 8E15 E0 FF			cpx	#$ff
  4630 8E17 D0 01			sne
  4631 8E19 60				rts
  4632
  4633 8E1A A9 FF 85 7A			mva 	#$ff	explose	; wy³¹czamy eksplozje dla tego ducha
  4634
  4635 8E1E A9 00			lda	#0
  4636 8E20 BC 00 02			ldy	ttype,x
  4637 8E23 C0 04			cpy	#4		; wyj¹tkowo dla najmniejszej kuli nie zwiêkszamy pozycji poziomej o jej szerokoœæ
  4638 8E25 F0 03			seq
  4639 8E27 B9 9F 39			lda	twidthm1,y
  4640 8E2A 7D 40 02			adc	posx,x
  4641 8E2D 69 30			adc	#48		; nowa pozycja pozioma gwiazdek
  4642
  4643 8E2F 8D AF 8F			sta	stars.dataStar[0].x
  4644 8E32 8D B4 8F			sta	stars.dataStar[1].x
  4645 8E35 8D B9 8F			sta	stars.dataStar[2].x
  4646 8E38 8D BE 8F			sta	stars.dataStar[3].x
  4647
  4648 8E3B B9 37 38			lda	theight,y
  4649 8E3E 4A				lsr @
  4650 8E3F 7D 80 02			adc	posy,x		; nowa pozycja pionowa gwiazdek
  4651 8E42 69 40			adc	#dolnakrawedz-scrhig*8-24
  4652
  4653 8E44 8D B0 8F			sta	stars.dataStar[0].y
  4654 8E47 8D B5 8F			sta	stars.dataStar[1].y
  4655 8E4A 8D BA 8F			sta	stars.dataStar[2].y
  4656 8E4D 8D BF 8F			sta	stars.dataStar[3].y
  4657
  4658 8E50 A2 0F			ldx	#10+5		; licznik klatek animacji
  4659
  4660 				* ---------------------------
  4661 				* ---	STARS
  4662 				* ---------------------------
  4663 8E52			stars	.local
  4664
  4665 8E52 AD 0A D2			lda $d20a			; star #0
  4666 8E55 29 0F			and #15
  4667 8E57 A8				tay
  4668 8E58 B9 5F 84 8D B2 8F		mva rndMinus,y	dataStar[0].dx
  4669 8E5E B9 5F 84 8D B3 8F		mva rndMinus,y	dataStar[0].dy
  4670
  4671 8E64 AD 0A D2			lda $d20a			; star #2
  4672 8E67 29 0F			and #15
  4673 8E69 A8				tay
  4674 8E6A B9 B4 8E 8D BC 8F		mva rndPlus,y	dataStar[2].dx
  4675 8E70 B9 B4 8E 8D BD 8F		mva rndPlus,y	dataStar[2].dy
  4676
  4677 8E76 AD 0A D2			lda $d20a			; star #1
  4678 8E79 29 0F			and #15
  4679 8E7B A8				tay
  4680 8E7C B9 5F 84 8D B7 8F		mva rndMinus,y	dataStar[1].dx
  4681 8E82 B9 B4 8E 8D B8 8F		mva rndPlus,y	dataStar[1].dy
  4682
  4683 8E88 AD 0A D2			lda $d20a			; star #3
  4684 8E8B 29 0F			and #15
  4685 8E8D A8				tay
  4686 8E8E B9 B4 8E 8D C1 8F		mva rndPlus,y	dataStar[3].dx
  4687 8E94 B9 5F 84 8D C2 8F		mva rndMinus,y	dataStar[3].dy
  4688
  4689 8E9A 8E FD 82			stx NMI.starsExplosion			; licznik klatek animacji, !!! koniecznie na koncu procki !!!
  4690 8E9D 60				rts
  4691
  4692 				* ---------------------------
  4693
  4694 8E9E A9 FF 85 7A		zeruj	mva	#$ff	explose			; czyœæ informacje o eksplozji kul
  4695 8EA2			zeruj2
  4696 8EA2 A9 00 8D FD 82		mva	#$00	NMI.starsExplosion	; zeruj licznik animacji dla gwiazdek (blokada animacji)
  4697
  4698 				;	mva	#defaultPrior	gtia+1
  4699 8EA7 A9 08 8D B1 80		mva	#colm3Harpun	__colpm3	; przywracamy kolor harpunu
  4700
  4701 8EAC A9 C7 8D C5 8E		mva	<frm1	anm+1
  4702
  4703 8EB1 4C 6B 8F			jmp	stars1.clr			; usuwamy ostatni¹ gwiazdkê
  4704
  4705 				// -----------------------------------------------------------------------------------------------------
  4706
  4707 				;	:17 nop
  4708
  4709 8EB4 06 06 02 03 05 03 + rndPlus		.he 06 06 02 03 05 03 04 03 03 06 06 03 03 04 03 05
  4710
  4711 8EC4				.pages
  4712
  4713 8EC4 4C C7 8E		anm	jmp frm1
  4714
  4715 				; -----------------------------------------------------------
  4716 				; -----------------------------------------------------------
  4717
  4718 				frm1	stars1	#.len(@@shape)*0
  4718 				 LDY# .LEN(@@SHAPE)*0\ JSR STARS.STARS1
  4718 8EC7 A0 00		 LDY# .LEN(@@SHAPE)*0
  4718 8EC9 20 F3 8E		 JSR STARS.STARS1
  4719
  4720 8ECC A0 D2			ldy <frm2
  4721 8ECE AD AF 8F			lda dataStar+@@shape.x+.len(@@shape)*0
  4722 8ED1 60				rts
  4723
  4724 				; -----------------------------------------------------------
  4725 				; -----------------------------------------------------------
  4726
  4727 				frm2	stars1	#.len(@@shape)*2
  4727 				 LDY# .LEN(@@SHAPE)*2\ JSR STARS.STARS1
  4727 8ED2 A0 0A		 LDY# .LEN(@@SHAPE)*2
  4727 8ED4 20 F3 8E		 JSR STARS.STARS1
  4728
  4729 8ED7 A0 DD			ldy <frm3
  4730 8ED9 AD B9 8F			lda dataStar+@@shape.x+.len(@@shape)*2
  4731 8EDC 60				rts
  4732
  4733 				; -----------------------------------------------------------
  4734 				; -----------------------------------------------------------
  4735
  4736 				frm3	stars1	#.len(@@shape)*1
  4736 				 LDY# .LEN(@@SHAPE)*1\ JSR STARS.STARS1
  4736 8EDD A0 05		 LDY# .LEN(@@SHAPE)*1
  4736 8EDF 20 F3 8E		 JSR STARS.STARS1
  4737
  4738 8EE2 A0 E8			ldy <frm4
  4739 8EE4 AD B4 8F			lda dataStar+@@shape.x+.len(@@shape)*1
  4740 8EE7 60				rts
  4741
  4742 				; -----------------------------------------------------------
  4743 				; -----------------------------------------------------------
  4744
  4745 				frm4	stars1	#.len(@@shape)*3
  4745 				 LDY# .LEN(@@SHAPE)*3\ JSR STARS.STARS1
  4745 8EE8 A0 0F		 LDY# .LEN(@@SHAPE)*3
  4745 8EEA 20 F3 8E		 JSR STARS.STARS1
  4746
  4747 8EED A0 C7			ldy <frm1
  4748 8EEF AD BE 8F			lda dataStar+@@shape.x+.len(@@shape)*3
  4749 8EF2 60				rts
  4750
  4751 8EF3				.endpg
  4752
  4753 8EF3				icl 'gwiazdki\stars_2.asm'
Source: stars_2.asm
     1
     2 				// w 1 ramce wyswietlana jest tylko jedna gwiazdka
     3
     4 				.struct	@@shape
     5 = 0000			x	.byte
     6 = 0001			y	.byte
     7 = 0002			py	.byte
     8
     9 = 0003			dx	.byte
    10 = 0004			dy	.byte
    11 				.ends
    12
    13
    14 				.macro	@updateXY
    15 					lda dataStar+@@shape.y,y
    16 					tax
    17 					sta dataStar+@@shape.py,y
    18 				
    19 					add dataStar+@@shape.dy,y
    20 				
    21 				;	bcs skp
    22 					cmp #dolnakrawedz-32
    23 					bcs skp
    24 				
    25 					sta dataStar+@@shape.y,y
    26 				
    27 				skp	lda dataStar+@@shape.x,y
    28 					add dataStar+@@shape.dx,y
    29 					sta dataStar+@@shape.x,y
    30 				.endm
    31
    32
    33 8EF3			.proc	stars1 (.byte y) .reg
    34
    35 8EF3 8C FA 8E			sty _y+1
    36
    37 				// ---------------------------------------
    38
    39 8EF6 20 6B 8F			jsr clr
    40
    41 				// ---------------------------------------
    42
    43 8EF9 A0 00		_y	ldy #0
    44 8EFB 8C 6C 8F			sty clr+1
    45
    46 8EFE				@updateXY
Macro: STARS.@UPDATEXY [Source: stars_2.asm]
     1 8EFE B9 B0 8F			lda dataStar+@@shape.y,y
     2 8F01 AA				tax
     3 8F02 99 B1 8F			sta dataStar+@@shape.py,y
     5 8F05 18 79 B3 8F			add dataStar+@@shape.dy,y
     8 8F09 C9 D0			cmp #dolnakrawedz-32
     9 8F0B B0 03			bcs skp
    11 8F0D 99 B0 8F			sta dataStar+@@shape.y,y
    13 8F10 B9 AF 8F		skp	lda dataStar+@@shape.x,y
    14 8F13 18 79 B2 8F			add dataStar+@@shape.dx,y
    15 8F17 99 AF 8F			sta dataStar+@@shape.x,y
Source: stars_2.asm
    47
    48 				;	ldy #0
    49
    50  [0100] 10 10 10 38 FE + .put[$100] = %00010000,%00010000,%00010000,%00111000,%11111110,%00111000,%01111100,%01111100,%11000110,%10000010
    51
    52 					.rept 10
    54 					LDA #.GET[$100+#]
    55 					STA PMGB1+PMSTAR+#,X
    56 					STA PMGB2+PMSTAR+#,X
    57 					.endr
Source: REPT
    53 8F1A A9 10			LDA #.GET[$100+#]
    53 8F1C 9D 00 07			STA PMGB1+PMSTAR+#,X
    53 8F1F 9D 00 27			STA PMGB2+PMSTAR+#,X
    53 8F22 A9 10			LDA #.GET[$100+#]
    53 8F24 9D 01 07			STA PMGB1+PMSTAR+#,X
    53 8F27 9D 01 27			STA PMGB2+PMSTAR+#,X
    53 8F2A A9 10			LDA #.GET[$100+#]
    53 8F2C 9D 02 07			STA PMGB1+PMSTAR+#,X
    53 8F2F 9D 02 27			STA PMGB2+PMSTAR+#,X
    53 8F32 A9 38			LDA #.GET[$100+#]
    53 8F34 9D 03 07			STA PMGB1+PMSTAR+#,X
    53 8F37 9D 03 27			STA PMGB2+PMSTAR+#,X
    53 8F3A A9 FE			LDA #.GET[$100+#]
    53 8F3C 9D 04 07			STA PMGB1+PMSTAR+#,X
    53 8F3F 9D 04 27			STA PMGB2+PMSTAR+#,X
    53 8F42 A9 38			LDA #.GET[$100+#]
    53 8F44 9D 05 07			STA PMGB1+PMSTAR+#,X
    53 8F47 9D 05 27			STA PMGB2+PMSTAR+#,X
    53 8F4A A9 7C			LDA #.GET[$100+#]
    53 8F4C 9D 06 07			STA PMGB1+PMSTAR+#,X
    53 8F4F 9D 06 27			STA PMGB2+PMSTAR+#,X
    53 8F52 A9 7C			LDA #.GET[$100+#]
    53 8F54 9D 07 07			STA PMGB1+PMSTAR+#,X
    53 8F57 9D 07 27			STA PMGB2+PMSTAR+#,X
    53 8F5A A9 C6			LDA #.GET[$100+#]
    53 8F5C 9D 08 07			STA PMGB1+PMSTAR+#,X
    53 8F5F 9D 08 27			STA PMGB2+PMSTAR+#,X
    53 8F62 A9 82			LDA #.GET[$100+#]
    53 8F64 9D 09 07			STA PMGB1+PMSTAR+#,X
    53 8F67 9D 09 27			STA PMGB2+PMSTAR+#,X
Source: stars_2.asm
    58
    59 8F6A 60				rts
    60
    61
    62 8F6B A0 00		clr	ldy #0
    63
    64 8F6D BE B1 8F			ldx dataStar+@@shape.py,y
    65
    66 8F70 A9 00			lda #0
    67
    68 					.rept 10
    69 					STA PMGB1+PMSTAR+#,X
    70 					STA PMGB2+PMSTAR+#,X
    71 					.endr
Source: REPT
    69 8F72 9D 00 07			STA PMGB1+PMSTAR+#,X
    69 8F75 9D 00 27			STA PMGB2+PMSTAR+#,X
    69 8F78 9D 01 07			STA PMGB1+PMSTAR+#,X
    69 8F7B 9D 01 27			STA PMGB2+PMSTAR+#,X
    69 8F7E 9D 02 07			STA PMGB1+PMSTAR+#,X
    69 8F81 9D 02 27			STA PMGB2+PMSTAR+#,X
    69 8F84 9D 03 07			STA PMGB1+PMSTAR+#,X
    69 8F87 9D 03 27			STA PMGB2+PMSTAR+#,X
    69 8F8A 9D 04 07			STA PMGB1+PMSTAR+#,X
    69 8F8D 9D 04 27			STA PMGB2+PMSTAR+#,X
    69 8F90 9D 05 07			STA PMGB1+PMSTAR+#,X
    69 8F93 9D 05 27			STA PMGB2+PMSTAR+#,X
    69 8F96 9D 06 07			STA PMGB1+PMSTAR+#,X
    69 8F99 9D 06 27			STA PMGB2+PMSTAR+#,X
    69 8F9C 9D 07 07			STA PMGB1+PMSTAR+#,X
    69 8F9F 9D 07 27			STA PMGB2+PMSTAR+#,X
    69 8FA2 9D 08 07			STA PMGB1+PMSTAR+#,X
    69 8FA5 9D 08 27			STA PMGB2+PMSTAR+#,X
    69 8FA8 9D 09 07			STA PMGB1+PMSTAR+#,X
    69 8FAB 9D 09 27			STA PMGB2+PMSTAR+#,X
Source: stars_2.asm
    72
    73 8FAE 60				rts
    74
    75 				.endp
    76
    77
    78 				// parametry gwiazdek
    79 8FAF			dataStar	dta @@shape [3]
    80
    81 				/*
    82 				// kszta³t gwiazdki
    83 				shapeStar
    84 					dta %00010000
    85 					dta %00010000
    86 					dta %00010000
    87 					dta %00111000
    88 					dta %11111110
    89 					dta %00111000
    90 					dta %01111100
    91 					dta %01111100
    92 					dta %11000110
    93 					dta %10000010
    94 				*/
    94
  4754
  4755 					.endl
  4756
  4757
  4758 8FC3-9AF8> 07 06 05 06 + txt_bnk	dta l(=texture1, =texture11, =texture10, =texture6, =texture9, =texture12)
  4759 8FC9 07 07 06 05 02 06		dta l(=texture2, =texture8, =texture5, =texture4, =texture3, =texture7)
  4760
  4761 8FCF B6 D4 8E 6F D5 6C	txtLadr	dta l(texture1, texture11, texture10, texture6, texture9, texture12)
  4762 8FD5 DE E2 00 E4 27 6B		dta l(texture2, texture8, texture5, texture4, texture3, texture7)
  4763
  4764 8FDB 53 73 61 4C 67 70	txtHadr	dta h(texture1, texture11, texture10, texture6, texture9, texture12)
  4765 8FE1 5D 68 40 55 74 5A		dta h(texture2, texture8, texture5, texture4, texture3, texture7)
  4766
  4767
  4768 8FE7			.proc	INIT_VECTORS
  4769
  4770 					;lda:cmp:req 20
  4771 8FE7 AD 0B D4 D0 FB		lda:rne vcount
  4772
  4773 8FEC 78 D8			sei:cld
  4774 8FEE A9 00			lda #$00
  4775 8FF0 8D 0E D4			sta nmien
  4776 8FF3 8D 0E D2			sta irqen
  4777 8FF6 8D 00 D4			sta dmactl
  4778 				;	sta 559
  4779
  4780 8FF9 A9 FE 8D 01 D3		mva #$fe portb
  4781
  4782 8FFE A9 00 8D 07 D4		mva >pmgB1 pmbase	; missiles and players data address
  4783
  4784 9003 A9 A1 8D FA FF A9 + 	mwa #nmi nmivec
  4785
  4786 900D 60				rts
  4787 				.endp
  4788
  4789
  4790 				/////////////////////////////////////////////////////////////////////////////////////////////////
  4791 				/////////////////////////////////////////////////////////////////////////////////////////////////
  4792 				//
  4793 				//  detekcja kolizji kul musi sk³adaæ siê z dwóch faz
  4794 				//
  4795 				//  1. modyfikacja pozycji poziomej i pionowej
  4796 				//  2. test przekroczenia zakresu wartoœci dla pozycji poziomej i pionowej
  4797 				//
  4798 				//  jeœli kule zostan¹ zatrzymane i bêdziemy je rozbijaæ PKT1 jest pomijany, PKT2 jest wykonywany
  4799 				//
  4800 				/////////////////////////////////////////////////////////////////////////////////////////////////
  4801 				/////////////////////////////////////////////////////////////////////////////////////////////////
  4802
  4803
  4804 				* ---------------------------
  4805 				* ---	BALL COLLISION PANIC
  4806 				* ---------------------------
  4807 				// !!! regX = IDX !!!
  4808 				; -------------------------------------------------
  4809 				; test pozycji X:Y kul dla rozgrywki typu PANIC
  4810 				; nie jest potrzebna detekcja z murkami
  4811 				; -------------------------------------------------
  4812 900E			.proc	BALL_COLLISION_PANIC
  4813
  4814 900E A6 77			ldx	idx
  4815
  4816 9010 A0 00		stop	ldy	#0
  4817 9012 D0 64			bne	_stop
  4818
  4819 				// ----	test pozycji pionowej kuli
  4820
  4821 9014 BD 80 02			lda	posy,x
  4822 9017 DD C0 02			cmp	maxy,x
  4823 901A 90 02			bcc	_mi		; przekroczony limit ruchu w górê
  4824 901C D0 07			bne	_s
  4825
  4826 901E A9 01 9D A0 02	_mi	mva	#1	addy,x	; kierunek w dó³
  4827 9023 D0 17			bne	plus		; !!! regY = 0
  4828
  4829 9025			_s	;lda	posy,x
  4830 9025 38 FD C0 02			sub	maxy,x
  4831 9029 A8				tay
  4832
  4833 902A BD A0 02			lda	addy,x
  4834 902D 10 0D			bpl	plus
  4835
  4836 				; -----------------------------------
  4837
  4838 902F BD 80 02		minus	lda	posy,x
  4839 9032 38 F9 50 FB			sub	ypath,y
  4840 9036 9D 80 02			sta	posy,x
  4841 9039 4C 6E 90			jmp	_x
  4842
  4843 				; -----------------------------------
  4844
  4845 903C BD 80 02		plus	lda	posy,x
  4846 903F 18 79 50 FB			add	ypath,y
  4847 9043 9D 80 02			sta	posy,x
  4848
  4849 9046 65 76			adc	height
  4850 9048 C9 98		fminY	cmp	#scrhig*8
  4851 904A 90 22			bcc	_x
  4852
  4853 904C AD 49 90			lda	fminY+1		; uwzglêdniamy podnosz¹cy siê grunt
  4854 904F E5 76			sbc	height
  4855 9051 9D 80 02			sta	posy,x
  4856
  4857 9054 A9 FF 9D A0 02		mva	#$ff	addy,x	; kula w górê
  4858
  4859 9059 A4 78			ldy	type		; kula 0 nie ma modyfikowanej si³y odbicia
  4860 905B F0 11			beq	_x
  4861
  4862 905D BD C0 02			lda	maxy,x		; modyfikacja si³y odbicia kuli
  4863 9060 79 8C 39			adc	tenergy,y
  4864
  4865 9063 D9 A4 39			cmp	yPosMAX,Y
  4866 9066 90 03			scc
  4867 9068 B9 A4 39			lda	yPosMAX,Y
  4868
  4869 906B 9D C0 02			sta	maxy,x		; zapisujemy now¹ si³ê odbicia kuli
  4870
  4871 				// ----	modyfikacja pozycji poziomej kuli
  4872
  4873 906E BD 40 02		_x	lda	posx,x
  4874 9071 18 7D 60 02			add	addx,x
  4875 9075 9D 40 02			sta	posx,x
  4876
  4877 9078 4C AE 91		_stop	jmp BALL_COLLISION.testX
  4878 				.endp
  4879
  4880
  4881 				* ---------------------------
  4882 				* ---	BALL COLLISION
  4883 				* ---------------------------
  4884 				// test przekroczenia zakresu wartoœci X,Y kuli koniecznie na koñcu procedury
  4885 				// !!! regX = IDX !!!
  4886 907B			.proc	BALL_COLLISION
  4887
  4888 907B A6 78			ldx	type
  4889
  4890 907D BD 3C 38			lda	tDY,x
  4891 9080 8D AD 90			sta	BALL_COLLISION.dy0+2
  4892 9083 8D B7 90			sta	BALL_COLLISION.dy1+2
  4893
  4894 9086 A6 77			ldx	idx
  4895
  4896 9088 A0 00		stop	ldy	#0
  4897 908A D0 46			bne	_stop
  4898
  4899 				; --------------------------------------------
  4900 				; ------ modyfikacja pozycji pionowej Y ------
  4901 				; --------------------------------------------
  4902
  4903 908C BD 80 02			lda	posy,x
  4904 908F DD C0 02			cmp	maxy,x
  4905 9092 90 02			bcc	_minus		; przekroczony limit ruchu w górê
  4906 9094 D0 07			bne	_s
  4907
  4908 9096 A9 01 9D A0 02	_minus	mva	#1	addy,x	; kierunek w dó³
  4909 909B D0 14			bne	plus		; !!! regY = 0
  4910
  4911 909D			_s	;lda	posy,x
  4912 909D 38 FD C0 02			sub	maxy,x
  4913 90A1 A8				tay
  4914
  4915 90A2 BD A0 02			lda	addy,x
  4916 90A5 10 0A			bpl	plus
  4917
  4918 				;; MINUS - ruch w górê
  4919
  4920 90A7 BD 80 02		minus	lda	posy,x
  4921 90AA 38				sec
  4922 90AB F9 50 FB		dy0	sbc	ypath,y
  4923
  4924 90AE 4C C5 90			jmp	_ny
  4925
  4926 				;; PLUS  - ruch w dó³
  4927
  4928 90B1 BD 80 02		plus	lda	posy,x
  4929 90B4 18				clc
  4930 90B5 79 50 FB		dy1	adc	ypath,y
  4931 90B8 9D 80 02			sta	posy,x
  4932
  4933 90BB 65 76			adc	height
  4934 90BD C9 98			cmp	#scrhig*8
  4935 90BF 90 07			bcc	_x
  4936
  4937 90C1 A9 98			lda	#scrhig*8	; wymuszamy kolizje z dolna krawedzia aby obliczyæ now¹ energiê kuli
  4938 90C3 E5 76			sbc	height
  4939
  4940 90C5 9D 80 02		_ny	sta	posy,x
  4941
  4942 				; --------------------------------------------
  4943 				; ------ modyfikacja pozycji poziomej X ------
  4944 				; --------------------------------------------
  4945
  4946 90C8 BD 40 02		_x	lda	posx,x
  4947 90CB 18 7D 60 02			add	addx,x
  4948 90CF 9D 40 02			sta	posx,x
  4949
  4950 				; ---------------------------
  4951
  4952 90D2 A4 78		_stop	ldy	type
  4953
  4954 90D4 B9 00 38			lda	lckula,y	; adres programu detekcji kolizji
  4955 90D7 8D 15 91			sta	_jck0+1
  4956 90DA 8D 37 91			sta	_jck1+1
  4957 90DD 8D 53 91			sta	_jck2+1
  4958
  4959 90E0 B9 05 38			lda	hckula,y
  4960 90E3 8D 16 91			sta	_jck0+2
  4961 90E6 8D 38 91			sta	_jck1+2
  4962 90E9 8D 54 91			sta	_jck2+2
  4963
  4964 90EC B9 0A 38			lda	bckula,y	; bank z programem detekcji kolizji kuli
  4965 90EF A8				tay
  4966 90F0 B9 00 01			lda	@TAB_MEM_BANKS,y
  4967 90F3 8D 01 D3			sta	portb
  4968
  4969 				// -------------------------------------------------------------------
  4970 				//	test kolizji kul z murkami
  4971 				// -------------------------------------------------------------------
  4972
  4973 90F6 BD 40 02 85 88		mva posx,x	_posx
  4974 90FB BD 80 02 85 89		mva posy,x	_posy
  4975 9100 BD 60 02 85 8A		mva addx,x	_addx
  4976 9105 BD A0 02 85 8B		mva addy,x	_addy
  4977
  4978 910A A5 78			lda	type		// specjalny test dla najmniejszej kuli
  4979 910C C9 04			cmp	#4
  4980 910E D0 04			bne	_jck0
  4981
  4982 9110 A9 00 85 8B			mva	#0	_addy
  4983
  4984 9114 20 FF FF		_jck0	jsr	$ffff		; wyrównaj jedoczeœnie POSX i POSY do krawêdzi murku, !!! koniecznie jednoczeœnie !!!
  4985 								; jeœli wyrównamy oddzielnie POSX i POSY, wówczas kule bêd¹ siê "zacina³y" na murkach
  4986
  4987 9117 A5 8B			lda	_addy		// specjalny test dla najmniejszej kuli
  4988 9119 D0 09			bne	_sk
  4989
  4990 911B 85 8A			sta	_addx
  4991 911D BD A0 02 85 8B		mva	addy,x	_addy
  4992
  4993 9122 D0 F0			bne	_jck0
  4994 9124			_sk
  4995
  4996 				// test zmiany pozycji poziomej
  4997
  4998 9124 BD 40 02			lda	posx,x
  4999 9127 C5 88			cmp	_posx
  5000 9129 F0 2A			beq	_sk1
  5001
  5002 912B 85 88			sta	_posx		; test starej pozycji poziomej
  5003 912D BD 60 02 85 8A		mva	addx,x	_addx	; w³¹cz test pozycji poziomej
  5004 9132 A9 00 85 8B			mva	#0	_addy	; wy³¹cz test pozycji pionowej
  5005 9136 20 FF FF		_jck1	jsr	$ffff
  5006
  5007 9139 A5 88			lda	_posx
  5008 913B DD 40 02			cmp	posx,x
  5009 913E F0 15			beq	_sk1
  5010
  5011 9140			_sk0
  5012
  5013 				// test zmiany pozycji pionowej
  5014
  5015 9140 BD 80 02			lda	posy,x
  5016 9143 C5 89			cmp	_posy
  5017 9145 F0 0E			beq	_sk1
  5018
  5019 9147 85 89			sta	_posy		; test starej pozycji pionowej
  5020 9149 BD A0 02 85 8B		mva	addy,x	_addy	; w³¹cz test pozycji pionowej
  5021 914E A9 00 85 8A			mva	#0	_addx	; wy³¹cz test pozycji poziomej
  5022 9152 20 FF FF		_jck2	jsr	$ffff
  5023
  5024 9155			_sk1
  5025
  5026 				// teraz pozostaje odpowiednio zinterpretowaæ zmiany wartoœci _POSX i _POSY
  5027
  5028 9155 A5 88			lda _posx		; IF _posx <> posx,x then NOWA POZYCJA POZIOMA, ZMIANA KIERUNKU
  5029 9157 DD 40 02			cmp posx,x
  5030 915A F0 0B			beq skp0
  5031
  5032 915C 9D 40 02			sta posx,x
  5033
  5034 915F BD 60 02			lda addx,x
  5035 9162 49 FE			eor #$fe
  5036 9164 9D 60 02			sta addx,x
  5037
  5038 9167 A5 89		skp0	lda _posy		; jeœli pozycja pionowa przekroczy³a limit wysokoœci
  5039 9169 DD C0 02			cmp maxy,x
  5040 916C 90 08			bcc skp1
  5041 				;	lda _posy		; IF _posy <> posy,x then NOWA POZYCJA PIONOWA, ZMIANA KIERUNKU
  5042 916E DD 80 02			cmp posy,x
  5043 9171 F0 3B			beq quit
  5044
  5045 9173 9D 80 02			sta posy,x
  5046
  5047 9176 BD A0 02		skp1	lda addy,x
  5048 9179 49 FE			eor #$fe
  5049 917B 9D A0 02			sta addy,x
  5050
  5051 				// modyfikacja si³y odbicia
  5052
  5053 917E 10 2E			bpl	quit
  5054
  5055 9180 A4 78			ldy	type
  5056 9182 F0 2A			beq	quit
  5057
  5058 9184 B9 A4 39			lda	yPosMAX,y	; domyœlna energia kuli
  5059 9187 DD C0 02			cmp	maxy,x
  5060 918A 90 1F			bcc	_quit
  5061
  5062 918C BD 80 02			lda	posy,x
  5063 918F 18 79 37 38			add	theight,y
  5064 9193 F9 AE 39			sbc	_yPosMAX,y
  5065 9196 30 16			bmi	quit		; jeœli wynik ujemny to koñczymy
  5066
  5067 9198 85 8C			sta	_newMAX		; nowy maksymalny zakres pozycji pionowej kuli
  5068 919A DD C0 02			cmp	maxy,x
  5069 919D 90 0F			bcc	quit		; jeœli jest wiêkszy od dotychczasowego to koñczymy
  5070
  5071 919F BD C0 02			lda	maxy,x		; modyfikujemy aktualny maksymalny zakres pozycji pionowej (si³ê odbicia)
  5072 91A2 79 8C 39			adc	tenergy,y
  5073
  5074 91A5 C5 8C			cmp	_newMAX
  5075 91A7 90 02			scc
  5076 91A9 A5 8C			lda	_newMAX
  5077
  5078 91AB 9D C0 02		_quit	sta	maxy,x		; zapisujemy now¹ si³ê odbicia kuli
  5079
  5080 91AE			quit
  5081
  5082 				; -------------------------------------
  5083 				; ------ test pozycji poziomej X ------
  5084 				; -------------------------------------
  5085
  5086 91AE BD 40 02		testX	lda	posx,x		; test lewej krawedzi
  5087 91B1 C9 F0			cmp	#240
  5088 91B3 90 0C			bcc	_rb
  5089
  5090 91B5 A9 00 9D 40 02		mva	#0	posx,x
  5091 91BA A9 01 9D 60 02		mva	#1	addx,x
  5092 91BF D0 16			bne	testy
  5093
  5094 91C1 A4 78		_rb	ldy	type		; test prawej krawedzi
  5095 91C3 79 9F 39			adc	twidthm1,y
  5096 91C6 C9 A0			cmp	#160
  5097 91C8 90 0D			bcc	testy
  5098
  5099 91CA A9 9F			lda	#160-1
  5100 91CC F9 9F 39			sbc	twidthm1,y
  5101 91CF 9D 40 02			sta	posx,x
  5102
  5103 91D2 A9 FF 9D 60 02		mva	#$ff	addx,x
  5104
  5105 				; -------------------------------------
  5106 				; ------ test pozycji pionowej Y ------
  5107 				; -------------------------------------
  5108
  5109 91D7 BD 80 02		testy	lda	posy,x		; test górnej krawêdzi
  5110 91DA C9 F0			cmp	#240
  5111 91DC 90 0C			bcc	_db
  5112
  5113 91DE A9 00 9D 80 02		mva	#0	posy,x
  5114 91E3 A9 01 9D A0 02		mva	#1	addy,x
  5115 91E8 D0 12			bne	_end
  5116
  5117 91EA 65 76		_db	adc	height		; test dolnej krawêdzi
  5118 91EC C9 98			cmp	#scrhig*8
  5119 91EE 90 0C			bcc	_end
  5120
  5121 91F0 A9 97			lda	#scrhig*8-1
  5122 91F2 E5 76			sbc	height
  5123 91F4 9D 80 02			sta	posy,x
  5124
  5125 91F7 A9 FF 9D A0 02		mva	#$ff	addy,x
  5126
  5127 91FC 4C 23 92		_end	jmp	ENGINE._nxt
  5128 				.endp
  5129
  5130
  5131 				* ---------------------------
  5132 				* ---	ENGINE
  5133 				* ---------------------------
  5134 91FF			.proc	ENGINE (.word xa) .reg
  5135
  5136 91FF 8D 12 3D			sta BALL.bjmp
  5137 9202 8E 13 3D			stx BALL.bjmp+1
  5138
  5139 9205 A6 7F			ldx objects
  5140 9207 CA				dex
  5141
  5142 9208 B5 B7		lp	lda active,x
  5143 920A 10 17			bpl _nxt
  5144
  5145 920C BD 20 02			lda switch,x
  5146 920F D0 12			bne _nxt
  5147
  5148 9211 86 77			stx idx
  5149
  5150 9213 BC 00 02			ldy ttype,x	; typ kuli 0..4
  5151 9216 84 78			sty type
  5152
  5153 9218 B9 37 38			lda theight,y	; wysokoœæ kuli 0..4
  5154 921B 85 76			sta height
  5155
  5156 921D 20 4D 3C			BALL
  5157
  5158 9220 4C 7B 90		mode	jmp BALL_COLLISION
  5159
  5160 				; ---------------------------
  5161
  5162 9223 A9 FE 8D 01 D3	_nxt	mva #$fe portb
  5163
  5164 9228 CA				dex
  5165 9229 10 DD			bpl lp
  5166
  5167 922B 4C 13 8E			jmp EXPLOSIONS
  5168
  5169 				.endp
  5170
  5171
  5172 				* ----------------------
  5173 				* ---	GO BONUS
  5174 				* ----------------------
  5175 922E			.proc	GO_BONUS
  5176
  5177 922E A5 72			lda bonus.x
  5178 9230 D0 01			sne
  5179 9232 60				rts
  5180
  5181 				;	lda bufor
  5182 				;	sne
  5183 				;	rts
  5184
  5185 9233 AD 03 01			lda @TAB_MEM_BANKS+(=BONUS)
  5186 9236 8D 01 D3			sta portb
  5187
  5188 9239 20 71 73			jsr BONUS
  5189
  5190 923C A9 FE 8D 01 D3		mva #$fe portb
  5191
  5192 9241 A5 75			lda bonus.typ
  5193 9243 30 01			smi
  5194 9245 60			_rts	rts
  5195
  5196 9246			.pages
  5197
  5198 9246 29 07			and #7
  5199 				;	asl @
  5200 9248 AA				tax
  5201
  5202 9249 BD 52 92 8D 50 92		mva ebon,x	jbon+1
  5203 				;	mva ebon+1,x	jbon+2
  5204
  5205 924F 4C 5A 92		jbon	jmp exec_bonus_1_heart
  5206
  5207 9252 8D			ebon	dta l(exec_rts)
  5208 9253 5A				dta l(exec_bonus_1_heart)
  5209 9254 6A				dta l(exec_bonus_2_shield)
  5210 9255 5D				dta l(exec_bonus_3_clock)
  5211 9256 8E				dta l(exec_bonus_4_Xharpun)
  5212 9257 93				dta l(exec_bonus_5_harpun)
  5213 9258 98				dta l(exec_bonus_6_tnt)
  5214 9259 8D				dta l(exec_rts)
  5215
  5216 925A			exec_bonus_1_heart
  5217 925A 4C 7B 71			jmp COLLISIONS.DETECT.ENERGY.more
  5218
  5219 925D			exec_bonus_3_clock
  5220 925D 8D 89 90			sta BALL_COLLISION.stop+1
  5221 9260 8D 11 90			sta BALL_COLLISION_PANIC.stop+1
  5222 9263 8D 50 83			sta NMI.vbltim			; zatrzymujemy zegar
  5223
  5224 9266 A9 6E			lda #clock_time_limit
  5225 9268 D0 02			sne
  5226
  5227 926A			exec_bonus_2_shield
  5228
  5229 926A A9 78			lda #shield_time_limit
  5230
  5231 926C 8D 2A 86			sta PLAYERB1.blink		; mrugamy kolorem ubranka bohatera
  5232
  5233 926F A9 02 8D 7D 98		mva #colpm0Hero	chero0+1	; przywracamy kolory bohatera
  5234 9274 A9 78 8D 82 98		mva #colpm1Hero	chero1+1	; przywracamy kolory bohatera
  5235 9279 A9 18 8D 87 98		mva #colpm2Hero	chero2+1	; przywracamy kolory bohatera
  5236
  5237 927E A9 4C 8D 0D 71		mva #{jmp*}				COLLISIONS.DETECT.HERO
  5238 9283 A9 3C 8D 0E 71 A9 + 	mwa #COLLISIONS.DETECT.HERO._nxt	COLLISIONS.DETECT.HERO+1
  5239 928D			exec_rts
  5240 928D 60				rts
  5241
  5242 928E			exec_bonus_4_Xharpun
  5243 928E A9 01 85 99			mva #1 harp0.hook
  5244 9292 60				rts
  5245
  5246 9293			exec_bonus_5_harpun
  5247 9293 A9 00 85 99			mva #0 harp0.hook
  5248 9297 60				rts
  5249
  5250 9298			exec_bonus_6_tnt
  5251 9298 A9 6F 8D 4A 70		mva #128-17	COLLISIONS.tnt+1
  5252 929D 60				rts
  5253
  5254 929E			.endpg
  5255
  5256 				* ---
  5257 				* ---	TEST XY BONUS POSITION
  5258 				* ---
  5259
  5260 929E AD 03 01		testXY	lda @TAB_MEM_BANKS+(=BONUS_TEST)
  5261 92A1 8D 01 D3			sta portb
  5262
  5263 92A4 20 02 74			jsr BONUS_TEST
  5264 92A7 A8				tay
  5265
  5266 92A8 A9 FE 8D 01 D3		mva #$fe portb
  5267 92AD 60				rts
  5268 				.endp
  5269
  5270
  5271 				* ---------------------------
  5272 				* ---	RMT MODUL
  5273 				* ---------------------------
  5274 92AE			.proc	RMT_MODUL (.byte y) .reg
  5275
  5276 92AE AD 04 01 8D 01 D3		mva @TAB_MEM_BANKS+(=rmt2) portb
  5277
  5278 92B4 B9 F3 92 85 9A		mva rmt_l,y	inputPointer
  5279 92B9 B9 FD 92 85 9B		mva rmt_h,y	inputPointer+1
  5280
  5281 92BE A9 00 85 9C A9 40 + 	mwa	#$4000	outputPointer
  5282 92C6 20 8D 95			jsr	inflate
  5283
  5284 92C9 A9 00 8D E4 FF A9 + 	mwa #rmt2.play			msxPlay+1
  5285 92D3 A9 09 8D E7 FF A9 + 	mwa #rmt2.RASTERMUSICTRACKER+9	msxStop+1
  5286
  5287 92DD A2 00			ldx #0
  5288 92DF AD 14 D0			lda pal
  5289 92E2 C9 0F			cmp #15
  5290 92E4 D0 02			sne
  5291 92E6 A2 04			ldx #4
  5292
  5293 92E8 8E 0E 74			stx rmt2.ntsc
  5294
  5295 				;	ldx #<modul_title			;low byte of RMT module to X reg
  5296 				;	ldy #>modul_title			;hi byte of RMT module to Y reg
  5297 92EB A2 00			ldx <$4000
  5298 92ED A0 40			ldy >$4000
  5299 92EF 8A				txa
  5300 				;	lda #0				;starting song line 0-255 to A reg
  5301 92F0 4C 00 78			jmp rmt2.RASTERMUSICTRACKER	;Init
  5302
  5303 92F3 00 C5 10 E0 EA B3 + rmt_l	dta l(rmt_title, rmt_gover, rmt_win, rmt_game_1, rmt_game_2, rmt_game_3, rmt_game_4, jingle_1, jingle_2, jingle_3)
  5304 92FD 52 55 58 5A 61 67 + rmt_h	dta h(rmt_title, rmt_gover, rmt_win, rmt_game_1, rmt_game_2, rmt_game_3, rmt_game_4, jingle_1, jingle_2, jingle_3)
  5305 				.endp
  5306
  5307
  5308 				* ---------------------------
  5309 				* ---	ADD NEW BALL
  5310 				* ---------------------------
  5311 9307			.proc	ADD_NEW_BALL
  5312
  5313 9307 8E 17 93			stx rX+1
  5314 930A 8C 19 93			sty rY+1
  5315
  5316 930D AD 03 01			lda @TAB_MEM_BANKS+(=BALL_TEST)
  5317 9310 8D 01 D3			sta portb
  5318
  5319 9313 20 36 75			jsr BALL_TEST		; w regA wartoœæ #0 lub #? jeœli przesuniêcie kuli w prawo jest mo¿liwe
  5320
  5321 9316 A2 00		rX	ldx #0
  5322 9318 A0 00		rY	ldy #0
  5323
  5324 931A 18 7D 40 02			add	posx,x
  5325 931E 99 40 02			sta	posx,y
  5326
  5327 9321 A9 FE 8D 01 D3		mva	#$fe	portb
  5328
  5329 9326 BD 80 02 99 80 02		mva	posy,x	posy,y
  5330 932C BD 00 02 99 00 02		mva	ttype,x	ttype,y
  5331
  5332 9332 BD 80 02			lda	posy,x
  5333 9335 38				sec
  5334 9336 E9 00		new0	sbc	#0		; dodatkowa energia wybuchu kuli, kula podskakuje wy¿ej
  5335 9338 10 03			spl
  5336 933A BD C0 02			lda	maxy,x
  5337
  5338 933D 9D C0 02			sta	maxy,x
  5339 9340 99 C0 02			sta	maxy,y
  5340
  5341 9343 BD 80 02			lda	posy,x
  5342 9346 E9 00		new1	sbc	#0
  5343 9348 30 03			smi
  5344 934A 99 C0 02			sta	maxy,y
  5345
  5346 934D BD 60 02			lda addx,x
  5347 9350 99 60 02			sta addx,y
  5348 9353 F0 0E			beq ok
  5349
  5350 9355 10 07			bpl right
  5351
  5352 9357 49 FE			eor #$fe
  5353 9359 99 60 02			sta addx,y
  5354 935C D0 05			bne ok
  5355
  5356 935E 49 FE		right	eor #$fe
  5357 9360 9D 60 02			sta addx,x
  5358
  5359 9363 A9 FF		ok	lda #$ff
  5360 9365 9D A0 02			sta addy,x
  5361 9368 99 A0 02			sta addy,y
  5362
  5363 936B 99 20 02			sta switch,y
  5364
  5365 936E B9 B7 00			lda active,y
  5366 9371 09 80			ora #$80
  5367 9373 99 B7 00			sta active,y
  5368
  5369 9376 60				rts
  5370 				.endp
  5371
  5372
  5373 				* ---------------------------
  5374 				* ---	NEW SCORE
  5375 				* ---------------------------
  5376 9377			.proc	NewScore (.byte _10,_1) .var
  5377
  5378 				; jednoœci
  5379 9377 A9 00			lda #0
  5380 = 9378			_1	equ *-1
  5381 9379 F0 11			beq s_10
  5382 937B 18 6D 8E 3A			add score+4+1
  5383 937F C9 0A			cmp #10
  5384 9381 90 06			bcc _1skp
  5385
  5386 9383 38 E9 0A			sub #10
  5387 9386 EE 8D 93			inc _10
  5388
  5389 9389 8D 8E 3A		_1skp	sta score+4+1
  5390
  5391 				; dziesi¹tki
  5392
  5393 938C A9 00		s_10	lda #0
  5394 = 938D			_10	equ *-1
  5395 938E F0 11			beq s_100
  5396 9390 18 6D 8D 3A			add score+3+1
  5397 9394 C9 0A			cmp #10
  5398 9396 90 06			bcc _10skp
  5399
  5400 9398 38 E9 0A			sub #10
  5401 939B EE 8C 3A			inc score+2+1
  5402
  5403 939E 8D 8D 3A		_10skp	sta score+3+1
  5404
  5405 				; setki
  5406 93A1 AD 8C 3A		s_100	lda score+2+1
  5407 93A4 C9 0A			cmp #10
  5408 93A6 90 06			bcc _100skp
  5409
  5410 93A8 38 E9 0A			sub #10
  5411 93AB EE 8B 3A			inc score+1+1
  5412
  5413 93AE 8D 8C 3A		_100skp	sta score+2+1
  5414
  5415 				; tysi¹ce
  5416 93B1 AD 8B 3A			lda score+1+1
  5417 93B4 C9 0A			cmp #10
  5418 93B6 90 06			bcc _1000
  5419
  5420 93B8 38 E9 0A			sub #10
  5421 93BB EE 8A 3A			inc score+1
  5422
  5423 93BE 8D 8B 3A		_1000	sta score+1+1
  5424
  5425 				; dziesi¹tki tysiêcy
  5426 93C1 AD 8A 3A			lda score+1
  5427 93C4 C9 0A			cmp #10
  5428 93C6 90 06			bcc _10000
  5429
  5430 93C8 38 E9 0A			sub #10
  5431 93CB EE 89 3A			inc score
  5432
  5433 93CE 8D 8A 3A		_10000	sta score+1
  5434
  5435
  5436 				// -------------- HI SCORE
  5437
  5438 93D1 38				sec
  5439
  5440 					.rept score_cnt
  5441 					LDA HISCORE+SCORE_CNT-1-#
  5442 					SBC SCORE+SCORE_CNT-1-#
  5443 					.endr
Source: REPT
  5441 93D2 AD A7 3A			LDA HISCORE+SCORE_CNT-1-#
  5441 93D5 ED 8E 3A			SBC SCORE+SCORE_CNT-1-#
  5441 93D8 AD A6 3A			LDA HISCORE+SCORE_CNT-1-#
  5441 93DB ED 8D 3A			SBC SCORE+SCORE_CNT-1-#
  5441 93DE AD A5 3A			LDA HISCORE+SCORE_CNT-1-#
  5441 93E1 ED 8C 3A			SBC SCORE+SCORE_CNT-1-#
  5441 93E4 AD A4 3A			LDA HISCORE+SCORE_CNT-1-#
  5441 93E7 ED 8B 3A			SBC SCORE+SCORE_CNT-1-#
  5441 93EA AD A3 3A			LDA HISCORE+SCORE_CNT-1-#
  5441 93ED ED 8A 3A			SBC SCORE+SCORE_CNT-1-#
  5441 93F0 AD A2 3A			LDA HISCORE+SCORE_CNT-1-#
  5441 93F3 ED 89 3A			SBC SCORE+SCORE_CNT-1-#
Source: pang_chars.asm
  5444
  5445 93F6 30 01			bmi new_hiscore
  5446
  5447 93F8 60				rts
  5448
  5449 93F9			new_hiscore
  5450 93F9 AD 89 3A 8D A2 3A + 	:score_cnt mva score+# hiscore+#
  5451 941D 60				rts
  5452 				.endp
  5453
  5454
  5455 				* ---------------------------
  5456 				* ---	FLOOR MOVE UP
  5457 				* ---------------------------
  5458 941E			.proc	GROUND_MOVEUP (.byte a) .reg
  5459
  5460 941E				.var tmp tmp2  .byte	floor .word
  5461
  5462 941E C9 0A			cmp #10
  5463 9420 90 02			scc
  5464 9422 A9 09			lda #9
  5465
  5466 9424 8D 88 95			sta tmp
  5467 9427 0A 0A 0A			:3 asl @
  5468 942A 8D 89 95			sta tmp2
  5469
  5470 942D A9 03			lda #3
  5471 = 942E			ground	equ *-1
  5472 942F 29 03			and #3
  5473 9431 8D 2E 94			sta ground
  5474
  5475 9434 AA				tax
  5476
  5477 9435 BC 64 3B			ldy tgrnd_b,x
  5478 9438 B9 00 01			lda @TAB_MEM_BANKS,y
  5479 943B 8D 01 D3			sta portb
  5480
  5481 943E BD 68 3B 85 9A		mva tgrnd_l,x	inputPointer
  5482 9443 BD 6C 3B 85 9B		mva tgrnd_h,x	inputPointer+1
  5483
  5484 9448 A9 00			lda <ground_buf
  5485 944A 85 9C			sta outputPointer
  5486 944C 8D 8A 95			sta floor
  5487
  5488 944F A9 40			lda >ground_buf
  5489 9451 85 9D			sta outputPointer+1
  5490 9453 8D 8B 95			sta floor+1
  5491
  5492 9456 20 8D 95			jsr inflate
  5493
  5494 				/*
  5495 					mva tgrnd_l,x	floor
  5496 					add <40*80
  5497 					sta finv+1
  5498 					mva tgrnd_h,x	floor+1
  5499 					adc >40*80
  5500 					sta finv+2
  5501
  5502 					adw finv+1 #48*10 rw3
  5503 				*/
  5503
  5504
  5505 9459 A9 80 8D 45 95 A9 + 	mwa #ground_buf+40*80		finv+1
  5506 9463 A9 60 85 06 A9 4E + 	mwa #ground_buf+40*80+48*10	rw3
  5507
  5508 946B AE 88 95			ldx tmp
  5509
  5510 946E A9 5F			lda <colors+19*5	; adres w tablicy COLORS+[19-tmp]*5
  5511 9470 38 FD 46 38			sub tmul5,x
  5512 9474 85 04			sta rw2
  5513 9476 A9 B7			lda >colors+19*5
  5514 9478 E9 00			sbc #0
  5515 947A 85 05			sta rw2+1
  5516
  5517 947C A9 13			lda #19
  5518 947E 38 ED 88 95			sub tmp
  5519 9482 AA				tax
  5520
  5521 9483 BD 0F 38			lda lmul48,x
  5522 9486 18 69 00			add <scr1
  5523 9489 85 00			sta rw0
  5524 948B 85 02			sta rw1
  5525 948D BD 23 38			lda hmul48,x
  5526 9490 69 D8			adc >scr1
  5527 9492 85 01			sta rw0+1
  5528 9494 69 04			adc #4
  5529 9496 85 03			sta rw1+1
  5530
  5531 9498 BD 0F 38			lda lmul48,x
  5532 949B 18 69 00			add <invers
  5533 949E 8D AE 94			sta dst+1
  5534 94A1 BD 23 38			lda hmul48,x
  5535 94A4 69 B3			adc >invers
  5536 94A6 8D AF 94			sta dst+2
  5537
  5538 94A9 A2 2F			ldx #47
  5539 94AB A9 01			lda #1
  5540 94AD 9D FF FF CA 10 FA	dst	sta:rpl $ffff,x-		; wstawienie murku
  5541
  5542 				;	lda tmp
  5543 				;	:3 asl @
  5544 				;	sta tmp2
  5545
  5546 94B3 A9 78			lda #scrhig*8-32		; nowa pozycja pionowa bohatera
  5547 94B5 38 ED 89 95			sub tmp2
  5548 94B9 85 7C			sta hposy
  5549
  5550 94BB A9 98			lda #scrhig*8			; minimalna pozycja Y kul
  5551 94BD 38 ED 89 95			sub tmp2
  5552 94C1 8D 49 90			sta BALL_COLLISION_PANIC.fminY+1
  5553 				;	sta BALL.fminY_0+1
  5554 				;	sbc #1
  5555 				;	sta BALL.fminY_1+1
  5556
  5557 94C4 A2 04			ldx #4
  5558 94C6 BD A9 39		lp	lda yPosMAX_tmp,x
  5559 94C9 38 ED 89 95			sub tmp2
  5560 94CD 10 02			spl
  5561 94CF A9 00			lda #0
  5562 94D1 9D A4 39			sta yPosMAX,x
  5563 94D4 CA				dex
  5564 94D5 10 EF			bpl lp
  5565
  5566 				; ---	przepisanie textury do odpowiednich zestawów znaków
  5567
  5568 94D7 CE 88 95			dec tmp
  5569 94DA 30 16			bmi quit
  5570
  5571 94DC AE 88 95			ldx tmp
  5572 94DF BC 47 38			ldy tmul5+1,x
  5573 94E2 88				dey
  5574
  5575 94E3 B1 06		lc	lda (rw3),y
  5576 94E5 91 04			sta (rw2),y
  5577 94E7 88				dey
  5578 94E8 10 F9			bpl lc
  5579
  5580 94EA 20 F8 94		_lp	jsr move
  5581 94ED CE 88 95			dec tmp
  5582 94F0 10 F8			bpl _lp
  5583
  5584 94F2 A9 FE 8D 01 D3	quit	mva #$fe portb
  5585 94F7 60				rts
  5586
  5587
  5588 94F8 AE 88 95		move	ldx tmp
  5589
  5590 94FB AD 8A 95 8D 20 95 + 	mwa floor flo+1
  5591
  5592 9507 BD 50 3B 8D 23 95		mva ltxt,x txt+1
  5593 950D BD 5A 3B 8D 24 95		mva htxt,x txt+2
  5594
  5595 9513 A2 00			ldx #0
  5596 9515 A0 00			ldy #0
  5597
  5598 9517 C0 40		loop	cpy <320
  5599 9519 D0 04			bne flo
  5600 951B E0 01			cpx >320
  5601 951D F0 12			beq stop
  5602
  5603 951F B9 FF FF		flo	lda $ffff,y
  5604 9522 99 FF FF		txt	sta $ffff,y
  5605
  5606 9525 C8				iny
  5607 9526 D0 EF			bne loop
  5608
  5609 9528 EE 21 95			inc flo+2
  5610 952B EE 24 95			inc txt+2
  5611
  5612 952E E8				inx
  5613 952F D0 E6			bne loop
  5614
  5615 9531 18 AD 8A 95 69 40 + stop	adw floor #320
  5616
  5617 9542				.var inv .byte
  5618
  5619 				;	ldy #3
  5620 				;;	lda #pustak
  5621 				;	sta (rw0),y
  5622 				;	sta (rw1),y
  5623 				;	iny
  5624
  5625 9542 A0 04			ldy #4
  5626
  5627 9544 AD FF FF		finv	lda $ffff
  5628 9547 29 7F			and #$7f
  5629 9549 8D 8C 95			sta inv
  5630
  5631 954C B1 00			lda (rw0),y
  5632 954E 29 7F			and #$7f
  5633 9550 0D 8C 95			ora inv
  5634 9553 91 00			sta (rw0),y
  5635
  5636 9555 B1 02			lda (rw1),y
  5637 9557 29 7F			and #$7f
  5638 9559 0D 8C 95			ora inv
  5639 955C 91 02			sta (rw1),y
  5640
  5641 955E C8				iny
  5642 955F C0 2C			cpy #44
  5643 9561 D0 E1			bne finv
  5644
  5645 9563 18 A5 00 69 30 85 + 	adw rw0 #48
  5646 956E 18 A5 02 69 30 85 + 	adw rw1 #48
  5647
  5648 9579 18 AD 45 95 69 30 + 	adw finv+1 #48
  5649
  5650 9587 60				rts
  5651 = 9588 00		TMP
  5651 = 9589 00		TMP2
  5651 = 958A 00 00		FLOOR
  5651 = 958C 00		INV
  5651 				.endp
  5652
  5653
  5654 958D			inflate
  5655 958D				icl 'inflate.asm'
Source: inflate.asm
     1 				; inflate - uncompress data stored in the DEFLATE format
     2 				; by Piotr Fusik <fox@scene.pl>
     3 				; Last modified: 2017-02-12
     4
     5 				; Compile with xasm (http://xasm.atari.org/), for example:
     6 				; xasm inflate.asm /l /d:inflate=$b700 /d:inflate_data=$b900 /d:inflate_zp=$f0
     7 				; mads inflate.asm /l /d:inflate=$b700 /d:inflate_data=$b900 /d:inflate_zp=$f0
     8 				; inflate is 499 bytes of code and constants
     9 				; inflate_data is 764 bytes of uninitialized data
    10 				; inflate_zp is 10 bytes on page zero
    11
    12
    13 				; Pointer to compressed data
    14 = 009A			inputPointer                    equ	inflate_zp    ; 2 bytes
    15
    16 				; Pointer to uncompressed data
    17 = 009C			outputPointer                   equ	inflate_zp+2  ; 2 bytes
    18
    19 				; Local variables
    20
    21 = 009E			getBit_buffer                   equ	inflate_zp+4  ; 1 byte
    22
    23 = 009F			getBits_base                    equ	inflate_zp+5  ; 1 byte
    24 = 009F			inflateStored_pageCounter       equ	inflate_zp+5  ; 1 byte
    25
    26 = 00A0			inflateCodes_sourcePointer      equ	inflate_zp+6  ; 2 bytes
    27 = 00A0			inflateDynamic_symbol           equ	inflate_zp+6  ; 1 byte
    28 = 00A1			inflateDynamic_lastLength       equ	inflate_zp+7  ; 1 byte
    29 = 00A1			inflateDynamic_tempCodes        equ	inflate_zp+7  ; 1 byte
    30
    31 = 00A2			inflateCodes_lengthMinus2       equ	inflate_zp+8  ; 1 byte
    32 = 00A2			inflateDynamic_allCodes         equ	inflate_zp+8  ; 1 byte
    33
    34 = 00A3			inflateDynamic_primaryCodes     equ	inflate_zp+9  ; 1 byte
    35
    36
    37 				; Argument values for getBits
    38 = 0081			GET_1_BIT                       equ	$81
    39 = 0082			GET_2_BITS                      equ	$82
    40 = 0084			GET_3_BITS                      equ	$84
    41 = 0088			GET_4_BITS                      equ	$88
    42 = 0090			GET_5_BITS                      equ	$90
    43 = 00A0			GET_6_BITS                      equ	$a0
    44 = 00C0			GET_7_BITS                      equ	$c0
    45
    46 				; Huffman trees
    47 = 0010			TREE_SIZE                       equ	16
    48 = 0000			PRIMARY_TREE                    equ	0
    49 = 0010			DISTANCE_TREE                   equ	TREE_SIZE
    50
    51 				; Alphabet
    52 = 0020			LENGTH_SYMBOLS                  equ	1+29+2
    53 = 001E			DISTANCE_SYMBOLS                equ	30
    54 = 003E			CONTROL_SYMBOLS                 equ	LENGTH_SYMBOLS+DISTANCE_SYMBOLS
    55
    56
    57 				; Uncompress DEFLATE stream starting from the address stored in inputPointer
    58 				; to the memory starting from the address stored in outputPointer
    59
    60 				; inflate
    61
    62 958D A0 00 84 9E			mvy	#0	getBit_buffer
    63 9591			inflate_blockLoop
    64 				; Get a bit of EOF and two bits of block type
    65 				;	ldy	#0
    66 9591 84 9F			sty	getBits_base
    67 9593 A9 84			lda	#GET_3_BITS
    68 9595 20 26 97			jsr	getBits
    69 9598 4A				lsr	@
    70 9599 08				php
    71 959A D0 1D			bne	inflateCompressed
    72
    73 				; Copy uncompressed block
    74 				;	ldy	#0
    75 959C 84 9E			sty	getBit_buffer  ; ignore bits until byte boundary
    76 959E 20 2F 97			jsr	getWord        ; skip the length we don't need
    77 95A1 20 2F 97			jsr	getWord        ; get the two's complement length
    78 95A4 85 9F			sta	inflateStored_pageCounter
    79 				;	jmp	inflateStored_firstByte
    80 95A6 B0 06			bcs	inflateStored_firstByte
    81 95A8			inflateStored_copyByte
    82 95A8 20 33 97			jsr	getByte
    83 95AB 20 55 97			jsr	storeByte
    84 95AE			inflateStored_firstByte
    85 95AE E8				inx
    86 95AF D0 F7			bne	inflateStored_copyByte
    87 95B1 E6 9F			inc	inflateStored_pageCounter
    88 95B3 D0 F3			bne	inflateStored_copyByte
    89
    90 95B5			inflate_nextBlock
    91 95B5 28				plp
    92 95B6 90 D9			bcc	inflate_blockLoop
    93 95B8 60				rts
    94
    95 95B9			inflateCompressed
    96 				; A=1: fixed block, initialize with fixed codes
    97 				; A=2: dynamic block, start by clearing all code lengths
    98 				; A=3: invalid compressed data, not handled in this routine
    99 95B9 49 02			eor	#2
   100
   101 				;	ldy	#0
   102 95BB			inflateCompressed_setCodeLengths
   103 95BB AA				tax
   104 95BC F0 05			beq	inflateCompressed_setLiteralCodeLength
   105 				; fixed Huffman literal codes:
   106 				; :144 dta 8
   107 				; :112 dta 9
   108 95BE A9 04			lda	#4
   109 95C0 C0 90			cpy	#144
   110 95C2 2A				rol	@
   111 95C3			inflateCompressed_setLiteralCodeLength
   112 95C3 99 00 20			sta	literalSymbolCodeLength,y
   113 95C6 F0 0A			beq	inflateCompressed_setControlCodeLength
   114 				; fixed Huffman control codes:
   115 				; :24  dta 7
   116 				; :6   dta 8
   117 				; :2   dta 8 ; meaningless codes
   118 				; :30  dta 5+DISTANCE_TREE
   119 95C8 A9 15			lda	#5+DISTANCE_TREE
   120 95CA C0 20			cpy	#LENGTH_SYMBOLS
   121 95CC B0 04			bcs	inflateCompressed_setControlCodeLength
   122 95CE C0 18			cpy	#24
   123 95D0 69 F2			adc	#2-DISTANCE_TREE
   124 95D2			inflateCompressed_setControlCodeLength
   125 95D2 C0 3E			cpy	#CONTROL_SYMBOLS
   126 95D4 B0 03 99 00 21		scs:sta	controlSymbolCodeLength,y
   127 95D9 C8				iny
   128 95DA D0 DF			bne	inflateCompressed_setCodeLengths
   129
   130 95DC AA				tax
   131 95DD D0 44			bne	inflateCodes
   132
   133 				; Decompress a block reading Huffman trees first
   134
   135 				; Build the tree for temporary codes
   136 95DF 20 83 96			jsr	buildTempHuffmanTree
   137
   138 				; Use temporary codes to get lengths of literal/length and distance codes
   139 				;	ldx	#0
   140 				;	sec
   141 95E2			inflateDynamic_decodeLength
   142 				; C=1: literal codes
   143 				; C=0: control codes
   144 95E2 86 A0			stx	inflateDynamic_symbol
   145 95E4 08				php
   146 				; Fetch a temporary code
   147 95E5 20 F4 96			jsr	fetchPrimaryCode
   148 				; Temporary code 0..15: put this length
   149 95E8 10 13			bpl	inflateDynamic_verbatimLength
   150 				; Temporary code 16: repeat last length 3 + getBits(2) times
   151 				; Temporary code 17: put zero length 3 + getBits(3) times
   152 				; Temporary code 18: put zero length 11 + getBits(7) times
   153 95EA AA				tax
   154 95EB 20 26 97			jsr	getBits
   155 95EE E0 84			cpx	#GET_3_BITS
   156 95F0 90 06			bcc	inflateDynamic_repeatLast
   157 95F2 F0 02 69 07			seq:adc	#7
   158 				;	ldy	#0
   159 95F6 84 A1			sty	inflateDynamic_lastLength
   160 95F8			inflateDynamic_repeatLast
   161 95F8 A8				tay
   162 95F9 A5 A1			lda	inflateDynamic_lastLength
   163 95FB C8 C8			iny:iny
   164 95FD			inflateDynamic_verbatimLength
   165 95FD C8				iny
   166 95FE 28				plp
   167 95FF A6 A0			ldx	inflateDynamic_symbol
   168 9601			inflateDynamic_storeLength
   169 9601 90 0D			bcc	inflateDynamic_controlSymbolCodeLength
   170 9603 9D 00 20 E8			sta	literalSymbolCodeLength,x+
   171 9607 E0 01			cpx	#1
   172 9609			inflateDynamic_storeNext
   173 9609 88				dey
   174 960A D0 F5			bne	inflateDynamic_storeLength
   175 960C 85 A1			sta	inflateDynamic_lastLength
   176 				;	jmp	inflateDynamic_decodeLength
   177 960E F0 D2			beq	inflateDynamic_decodeLength
   178 9610			inflateDynamic_controlSymbolCodeLength
   179 9610 E4 A3			cpx	inflateDynamic_primaryCodes
   180 9612 90 06			bcc	inflateDynamic_storeControl
   181 				; the code lengths we skip here were zero-initialized
   182 				; in inflateCompressed_setControlCodeLength
   183 9614 D0 02 A2 20			sne:ldx	#LENGTH_SYMBOLS
   184 9618 09 10			ora	#DISTANCE_TREE
   185 961A			inflateDynamic_storeControl
   186 961A 9D 00 21 E8			sta	controlSymbolCodeLength,x+
   187 961E E4 A2			cpx	inflateDynamic_allCodes
   188 9620 90 E7			bcc	inflateDynamic_storeNext
   189 9622 88				dey
   190 				;	ldy	#0
   191
   192 				; Decompress a block
   193 9623			inflateCodes
   194 9623 20 A5 96			jsr	buildHuffmanTree
   195 				;	jmp	inflateCodes_loop
   196 9626 F0 03			beq	inflateCodes_loop
   197 9628			inflateCodes_literal
   198 9628 20 55 97			jsr	storeByte
   199 962B			inflateCodes_loop
   200 962B 20 F4 96			jsr	fetchPrimaryCode
   201 962E 90 F8			bcc	inflateCodes_literal
   202 9630 F0 83			beq	inflate_nextBlock
   203 				; Copy sequence from look-behind buffer
   204 				;	ldy	#0
   205 9632 84 9F			sty	getBits_base
   206 9634 C9 09			cmp	#9
   207 9636 90 14			bcc	inflateCodes_setSequenceLength
   208 9638 98				tya
   209 				;	lda	#0
   210 9639 E0 1D			cpx	#1+28
   211 963B B0 0F			bcs	inflateCodes_setSequenceLength
   212 963D CA				dex
   213 963E 8A				txa
   214 963F 4A				lsr	@
   215 9640 66 9F			ror	getBits_base
   216 9642 E6 9F			inc	getBits_base
   217 9644 4A				lsr	@
   218 9645 26 9F			rol	getBits_base
   219 9647 20 1C 97			jsr	getAMinus1BitsMax8
   220 				;	sec
   221 964A 69 00			adc	#0
   222 964C			inflateCodes_setSequenceLength
   223 964C 85 A2			sta	inflateCodes_lengthMinus2
   224 964E A2 10			ldx	#DISTANCE_TREE
   225 9650 20 F6 96			jsr	fetchCode
   226 9653 C9 04			cmp	#4
   227 9655 90 06			bcc	inflateCodes_setOffsetLowByte
   228 9657 E6 9F			inc	getBits_base
   229 9659 4A				lsr	@
   230 965A 20 1C 97			jsr	getAMinus1BitsMax8
   231 965D			inflateCodes_setOffsetLowByte
   232 965D 49 FF			eor	#$ff
   233 965F 85 A0			sta	inflateCodes_sourcePointer
   234 9661 A5 9F			lda	getBits_base
   235 9663 E0 0A			cpx	#10
   236 9665 90 07			bcc	inflateCodes_setOffsetHighByte
   237 9667 BD 56 97			lda	getNPlus1Bits_mask-10,x
   238 966A 20 26 97			jsr	getBits
   239 966D 18				clc
   240 966E			inflateCodes_setOffsetHighByte
   241 966E 49 FF			eor	#$ff
   242 				;	clc
   243 9670 65 9D			adc	outputPointer+1
   244 9672 85 A1			sta	inflateCodes_sourcePointer+1
   245 9674 20 4F 97			jsr	copyByte
   246 9677 20 4F 97			jsr	copyByte
   247 967A			inflateCodes_copyByte
   248 967A 20 4F 97			jsr	copyByte
   249 967D C6 A2			dec	inflateCodes_lengthMinus2
   250 967F D0 F9			bne	inflateCodes_copyByte
   251 				;	jmp	inflateCodes_loop
   252 9681 F0 A8			beq	inflateCodes_loop
   253
   254 				; Get dynamic block header and use it to build the temporary tree
   255 9683			buildTempHuffmanTree
   256 				;	ldy	#0
   257 				; numberOfPrimaryCodes = 257 + getBits(5)
   258 				; numberOfDistanceCodes = 1 + getBits(5)
   259 				; numberOfTemporaryCodes = 4 + getBits(4)
   260 9683 A2 03			ldx	#3
   261 9685			inflateDynamic_getHeader
   262 9685 BD 79 97			lda	inflateDynamic_headerBits-1,x
   263 9688 20 26 97			jsr	getBits
   264 				;	sec
   265 968B 7D 7C 97			adc	inflateDynamic_headerBase-1,x
   266 968E 95 A0			sta	inflateDynamic_tempCodes-1,x
   267 9690 CA				dex
   268 9691 D0 F2			bne	inflateDynamic_getHeader
   269
   270 				; Get lengths of temporary codes in the order stored in inflateDynamic_tempSymbols
   271 				;	ldx	#0
   272 9693			inflateDynamic_getTempCodeLengths
   273 9693 A9 84			lda	#GET_3_BITS
   274 9695 20 26 97			jsr	getBits
   275 9698 BC 67 97			ldy	inflateDynamic_tempSymbols,x
   276 969B 99 00 20			sta	literalSymbolCodeLength,y
   277 969E A0 00			ldy	#0
   278 96A0 E8				inx
   279 96A1 E4 A1			cpx	inflateDynamic_tempCodes
   280 96A3 90 EE			bcc	inflateDynamic_getTempCodeLengths
   281
   282 				; Build Huffman trees basing on code lengths (in bits)
   283 				; stored in the *SymbolCodeLength arrays
   284 96A5			buildHuffmanTree
   285 				; Clear nBitCode_totalCount, nBitCode_literalCount, nBitCode_controlCount
   286 96A5 98				tya
   287 				;	lda	#0
   288 96A6 99 3E 21 C8 D0 FA		sta:rne	nBitCode_clearFrom,y+
   289 				; Count number of codes of each length
   290 				;	ldy	#0
   291 96AC			buildHuffmanTree_countCodeLengths
   292 96AC BE 00 20			ldx	literalSymbolCodeLength,y
   293 96AF FE 5E 21			inc	nBitCode_literalCount,x
   294 96B2 FE 3E 21			inc	nBitCode_totalCount,x
   295 96B5 C0 3E			cpy	#CONTROL_SYMBOLS
   296 96B7 B0 09			bcs	buildHuffmanTree_noControlSymbol
   297 96B9 BE 00 21			ldx	controlSymbolCodeLength,y
   298 96BC FE 6E 21			inc	nBitCode_controlCount,x
   299 96BF FE 3E 21			inc	nBitCode_totalCount,x
   300 96C2			buildHuffmanTree_noControlSymbol
   301 96C2 C8				iny
   302 96C3 D0 E7			bne	buildHuffmanTree_countCodeLengths
   303 				; Calculate offsets of symbols sorted by code length
   304 				;	lda	#0
   305 96C5 A2 D0			ldx	#-3*TREE_SIZE
   306 96C7			buildHuffmanTree_calculateOffsets
   307 96C7 9D BE 20			sta	nBitCode_literalOffset+3*TREE_SIZE-$100,x
   308 96CA 18 7D 8E 20			add	nBitCode_literalCount+3*TREE_SIZE-$100,x
   309 96CE E8				inx
   310 96CF D0 F6			bne	buildHuffmanTree_calculateOffsets
   311 				; Put symbols in their place in the sorted array
   312 				;	ldy	#0
   313 96D1			buildHuffmanTree_assignCode
   314 96D1 98				tya
   315 96D2 BE 00 20			ldx	literalSymbolCodeLength,y
   316 96D5 BC 8E 21 FE 8E 21		ldy:inc	nBitCode_literalOffset,x
   317 96DB 99 BE 21			sta	codeToLiteralSymbol,y
   318 96DE A8				tay
   319 96DF C0 3E			cpy	#CONTROL_SYMBOLS
   320 96E1 B0 0D			bcs	buildHuffmanTree_noControlSymbol2
   321 96E3 BE 00 21			ldx	controlSymbolCodeLength,y
   322 96E6 BC 9E 21 FE 9E 21		ldy:inc	nBitCode_controlOffset,x
   323 96EC 99 BE 22			sta	codeToControlSymbol,y
   324 96EF A8				tay
   325 96F0			buildHuffmanTree_noControlSymbol2
   326 96F0 C8				iny
   327 96F1 D0 DE			bne	buildHuffmanTree_assignCode
   328 96F3 60				rts
   329
   330 				; Read Huffman code using the primary tree
   331 96F4			fetchPrimaryCode
   332 96F4 A2 00			ldx	#PRIMARY_TREE
   333 				; Read a code from input using the tree specified in X,
   334 				; return low byte of this code in A,
   335 				; return C flag reset for literal code, set for length code
   336 96F6			fetchCode
   337 				;	ldy	#0
   338 96F6 98				tya
   339 96F7			fetchCode_nextBit
   340 96F7 20 3C 97			jsr	getBit
   341 96FA 2A				rol	@
   342 96FB E8				inx
   343 96FC 38 FD 3E 21			sub	nBitCode_totalCount,x
   344 9700 B0 F5			bcs	fetchCode_nextBit
   345 				;	clc
   346 9702 7D 6E 21			adc	nBitCode_controlCount,x
   347 9705 B0 09			bcs	fetchCode_control
   348 				;	clc
   349 9707 7D 8E 21			adc	nBitCode_literalOffset,x
   350 970A AA				tax
   351 970B BD BE 21			lda	codeToLiteralSymbol,x
   352 970E 18				clc
   353 970F 60				rts
   354 9710			fetchCode_control
   355 				;	sec
   356 9710 7D 9D 21			adc	nBitCode_controlOffset-1,x
   357 9713 AA				tax
   358 9714 BD BD 22			lda	codeToControlSymbol-1,x
   359 9717 29 1F			and	#$1f	; make distance symbols zero-based
   360 9719 AA				tax
   361 971A 38				sec
   362 971B 60				rts
   363
   364 				; Read A minus 1 bits, but no more than 8
   365 971C			getAMinus1BitsMax8
   366 971C 26 9F			rol	getBits_base
   367 971E AA				tax
   368 971F C9 09			cmp	#9
   369 9721 B0 10			bcs	getByte
   370 9723 BD 5E 97			lda	getNPlus1Bits_mask-2,x
   371 9726			getBits
   372 9726 20 35 97			jsr	getBits_loop
   373 9729			getBits_normalizeLoop
   374 9729 46 9F			lsr	getBits_base
   375 972B 6A				ror	@
   376 972C 90 FB			bcc	getBits_normalizeLoop
   377 972E 60				rts
   378
   379 				; Read 16 bits
   380 972F			getWord
   381 972F 20 33 97			jsr	getByte
   382 9732 AA				tax
   383 				; Read 8 bits
   384 9733			getByte
   385 9733 A9 80			lda	#$80
   386 9735			getBits_loop
   387 9735 20 3C 97			jsr	getBit
   388 9738 6A				ror	@
   389 9739 90 FA			bcc	getBits_loop
   390 973B 60				rts
   391
   392 				; Read one bit, return in the C flag
   393 973C			getBit
   394 973C 46 9E			lsr	getBit_buffer
   395 973E D0 0E			bne	getBit_return
   396 9740 48				pha
   397 				;	ldy	#0
   398 9741 B1 9A			lda	(inputPointer),y
   399 9743 E6 9A D0 02 E6 9B		inw	inputPointer
   400 9749 38				sec
   401 974A 6A				ror	@
   402 974B 85 9E			sta	getBit_buffer
   403 974D 68				pla
   404 974E			getBit_return
   405 974E 60				rts
   406
   407 				; Copy a previously written byte
   408 974F			copyByte
   409 974F A4 9C			ldy	outputPointer
   410 9751 B1 A0			lda	(inflateCodes_sourcePointer),y
   411 9753 A0 00			ldy	#0
   412 				; Write a byte
   413 9755			storeByte
   414 				;	ldy	#0
   415 9755 91 9C			sta	(outputPointer),y
   416 9757 E6 9C			inc	outputPointer
   417 9759 D0 04			bne	storeByte_return
   418 975B E6 9D			inc	outputPointer+1
   419 975D E6 A1			inc	inflateCodes_sourcePointer+1
   420 975F			storeByte_return
   421 975F 60				rts
   422
   423 9760			getNPlus1Bits_mask
   424 9760 81 82 84 88 90 A0 + 	dta	GET_1_BIT,GET_2_BITS,GET_3_BITS,GET_4_BITS,GET_5_BITS,GET_6_BITS,GET_7_BITS
   425
   426 9767			inflateDynamic_tempSymbols
   427 9767 82 84 C0 00 08 07 + 	dta	GET_2_BITS,GET_3_BITS,GET_7_BITS,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15
   428
   429 977A			inflateDynamic_headerBits
   430 977A 88 90 90			dta	GET_4_BITS,GET_5_BITS,GET_5_BITS
   431 977D			inflateDynamic_headerBase
   432 977D 03 20 00			dta	3,LENGTH_SYMBOLS,0
   433
  5656
  5657
  5658 				* ---------------------------
  5659 				* ---	WAIT AND BLINK
  5660 				* ---------------------------
  5661 9780			.proc	wait_AND_blink (.word xa) .reg
  5662
  5663 9780 8D 92 97			sta src+1
  5664 9783 8E 93 97			stx src+2
  5665
  5666 9786 8E 50 83			stx NMI.vbltim		; zatrzymujemy zegar
  5667
  5668 9789 A2 0A			ldx #10
  5669 978B BD 91 3A 9D 01 98	copy	mva	status+14,x stage,x
  5670 9791 BD FF FF 9D 91 3A	src	mva	$ffff,x status+14,x
  5671 9797 CA				dex
  5672 9798 10 F1			bpl copy
  5673
  5674 979A AD 09 D2			lda $d209
  5675 979D 8D D9 97			sta get_key
  5676 97A0 8D 52 83			sta NMI.old_key
  5677 97A3 8D DB 97			sta _key
  5678
  5679 97A6 A9 00 85 79			mva #0 frame
  5680
  5681 97AA A9 06 8D 53 83		mva #6 NMI.key_delay
  5682
  5683 97AF A5 79 C5 79 F0 FC	wait	lda:cmp:req frame
  5684
  5685 97B5 AD 1F D0			lda consol		; START
  5686 97B8 29 01			and #1
  5687 97BA F0 22			beq quit
  5688 97BC AD 10 D0			lda trig0		; FIRE
  5689 97BF F0 1D			beq quit
  5690
  5691 97C1 AD 0F D2			lda $d20f
  5692 97C4 29 08			and #8
  5693 97C6 F0 16			beq quit
  5694
  5695 97C8 A5 79			lda frame
  5696 97CA 29 07			and #7
  5697 97CC D0 0A			bne skip
  5698
  5699 97CE A9 02			lda #2
  5700 = 97CF			inv	equ *-1
  5701 97D0 49 02			eor #2
  5702 97D2 8D CF 97			sta inv
  5703 97D5 8D 01 D4			sta chrctl
  5704
  5705 97D8 A9 00		skip	lda #0
  5706 = 97D9			get_key	equ *-1
  5707 97DA C9 FF			cmp #$ff
  5708 = 97DB			_key	equ *-1
  5709 97DC F0 D1			beq wait
  5710
  5711 97DE A2 0A		quit	ldx #10
  5712 97E0 BD 01 98 9D 91 3A + 	mva:rpl stage,x status+14,x-
  5713
  5714 97E9 A9 B0 8D 1D 3C A9 + 	mwa #LOOP LOOP.napisy
  5715 97F3 8D A0 85			sta HERO.r_d010
  5716
  5717 97F6 A9 00 8D 50 83		mva #0	NMI.vbltim		; wznawiamy zegar
  5718
  5719 97FB A9 0F 8D 53 83		mva #15 NMI.key_delay
  5720
  5721 9800 60				rts
  5722
  5723 9801 00 00 00 00 00 00 + stage	:11 brk
  5724 				.endp
  5725
  5726
  5727 				* ---------------------------
  5728 				* ---	INIT 2
  5729 				* ---------------------------
  5730 				; czêœæ kodu inicjalizuj¹cego przeniesiona do dodatkowego banku
  5731 				; m.in. kszta³ty klocków
  5732 980C			init2	.local
  5733
  5734 980C AD 09 01 8D 01 D3		mva @TAB_MEM_BANKS+(=init_2) portb
  5735
  5736 9812 20 03 79			jsr init_2
  5737
  5738 9815 A9 FE 8D 01 D3		mva #$fe portb
  5739 981A 60				rts
  5740 				.endl
  5741
  5742
  5743 				* ---------------------------
  5744 				* ---	PAUSE
  5745 				* ---------------------------
  5746 981B			.local	napis_pause
  5747
  5748 					wait_AND_blink #pause
  5748 				 LDX> PAUSE\ LDA< PAUSE\ JSR WAIT_AND_BLINK
  5748 981B A2 98		 LDX> PAUSE
  5748 981D A9 25		 LDA< PAUSE
  5748 981F 20 80 97		 JSR WAIT_AND_BLINK
  5749
  5750 9822 4C B0 3B			jmp LOOP
  5751
  5752 9825 8F 8F 8F 96 92 97 + pause	ins 'panel\liczniki2.scr'*,1*48+24,11
  5753 				.endl
  5754
  5755 				* ---------------------------
  5756 				* ---	TIME OUT
  5757 				* ---------------------------
  5758 9830			.local	napis_timeout
  5759
  5760 9830 A9 01			lda #1
  5761 9832 85 7F			sta objects		; wymuszamy koniec dzia³ania silnika
  5762 9834 85 B7			sta active
  5763
  5764 				;	lda #0
  5765 				;	sta INIT.lives
  5766
  5767 					wait_AND_blink #timeout
  5767 				 LDX> TIMEOUT\ LDA< TIMEOUT\ JSR WAIT_AND_BLINK
  5767 9836 A2 98		 LDX> TIMEOUT
  5767 9838 A9 40		 LDA< TIMEOUT
  5767 983A 20 80 97		 JSR WAIT_AND_BLINK
  5768
  5769 983D 4C B0 3B			jmp LOOP
  5770
  5771 9840 8F 91 95 98 8E 8F + timeout	ins 'panel\liczniki2.scr'*,2*48+24,11
  5772 				.endl
  5773
  5774
  5775 				* ---------------------------
  5776 				* ---	DLI HERO
  5777 				* ---------------------------
  5778 				// !!! tylko rejestry A,X
  5779 984B			dliHero
  5780 984B A9 00			lda #$00
  5781 984D 8D 08 D0			sta sizep0+(pmHero0-$400)/$100
  5782 9850 8D 09 D0			sta sizep0+(pmHero1-$400)/$100
  5783 9853 8D 0A D0			sta sizep0+(pmHero2-$400)/$100
  5784
  5785 9856 2C B0 BB		dliDeath bit dliHeroDeath
  5786
  5787 9859 A9 40			lda #%01000000
  5788 985B 8D 0C D0			sta sizem
  5789
  5790 985E A9 00			lda #0
  5791 = 985F			__hposp0 equ *-1
  5792 9860 8D 00 D0			sta hposp0+(pmHero0-$400)/$100
  5793
  5794 9863 A9 00			lda #0
  5795 = 9864			__hposp1 equ *-1
  5796 9865 8D 01 D0			sta hposp0+(pmHero1-$400)/$100
  5797
  5798 9868 A9 00			lda #0
  5799 = 9869			__hposp2 equ *-1
  5800 986A 8D 02 D0			sta hposp0+(pmHero2-$400)/$100
  5801
  5802
  5803 986D A9 00			lda #0
  5804 = 986E			__hposm0 equ *-1
  5805 986F 8D 04 D0			sta hposm0+(pmHero0-$400)/$100
  5806
  5807 9872 A9 00			lda #0
  5808 = 9873			__hposm1 equ *-1
  5809 9874 8D 05 D0			sta hposm0+(pmHero1-$400)/$100
  5810
  5811 9877 A9 00			lda #0
  5812 = 9878			__hposm2 equ *-1
  5813 9879 8D 06 D0			sta hposm0+(pmHero2-$400)/$100
  5814
  5815 987C A9 02 8D 12 D0	chero0	mva #colpm0Hero	colpm0+(pmHero0-$400)/$100	; kolory bohatera
  5816 9881 A9 78 8D 13 D0	chero1	mva #colpm1Hero	colpm0+(pmHero1-$400)/$100
  5817 9886 A9 18 8D 14 D0	chero2	mva #colpm2Hero	colpm0+(pmHero2-$400)/$100
  5818
  5819 988B A9 BD 8D AB 82	ldliHero mva <dli0 NMI.vdli
  5820 9890 A9 80 8D AC 82	hdliHero mva >dli0 NMI.vdli+1
  5821
  5822 9895 A5 8D			lda rA
  5823 9897 A6 8E			ldx rX
  5824 9899 40				rti
  5825
  5826
  5827 				* ---------------------------
  5828 				* ---	DLI OVERLAY
  5829 				* ---------------------------
  5830 				// !!! tylko rejestry A,X
  5831 989A			dliOverlay
  5832 989A A9 03			lda #3
  5833 989C 8D 08 D0			sta sizep0+(pmHero0-$400)/$100
  5834 989F 8D 09 D0			sta sizep0+(pmHero1-$400)/$100
  5835 98A2 8D 0A D0			sta sizep0+(pmHero2-$400)/$100
  5836
  5837 98A5 A9 7F			lda #%01111111
  5838 98A7 8D 0C D0			sta sizem
  5839
  5840 98AA A9 00 8D 12 D0	OvrCol0	mva #0 colpm0+(pmHero0-$400)/$100
  5841 98AF A9 00 8D 13 D0	OvrCol1	mva #0 colpm0+(pmHero1-$400)/$100
  5842 98B4 A9 00 8D 14 D0	OvrCol2	mva #0 colpm0+(pmHero2-$400)/$100
  5843
  5844 98B9 A9 00 8D 00 D0	OvrPly0	mva #0 hposp0+(pmHero0-$400)/$100
  5845 98BE A9 00 8D 01 D0	OvrPly1	mva #0 hposp0+(pmHero1-$400)/$100
  5846 98C3 A9 00 8D 02 D0	OvrPly2	mva #0 hposp0+(pmHero2-$400)/$100
  5847
  5848 98C8 A9 00 8D 04 D0	OvrMis0	mva #0 hposm0+(pmHero0-$400)/$100
  5849 98CD A9 00 8D 05 D0	OvrMis1	mva #0 hposm0+(pmHero1-$400)/$100
  5850 98D2 A9 00 8D 06 D0	OvrMis2	mva #0 hposm0+(pmHero2-$400)/$100
  5851
  5852 98D7 A9 BD 8D AB 82	ldliOvr	mva <dli0 NMI.vdli
  5853 98DC A9 80 8D AC 82	hdliOvr	mva >dli0 NMI.vdli+1
  5854
  5855 98E1 A5 8D			lda rA
  5856 98E3 A6 8E			ldx rX
  5857 98E5 40				rti
  5858
  5859
  5860 98E6			.local	SetDLI
  5861
  5862 98E6 A2 00			ldx #0
  5863
  5864 98E8 20 46 99		loop	jsr setHlp
  5865
  5866 98EB A9 A9 91 6A			mva #{lda<0} (hlp),y
  5867 98EF C8				iny
  5868 98F0 BD 65 7E 91 6A		mva INIT.ldli+1,x (hlp),y
  5869 98F5 C8				iny
  5870 98F6 A9 8D 91 6A			mva #{sta*} (hlp),y
  5871
  5872 98FA E8				inx
  5873 98FB E0 0F			cpx #15
  5874 98FD D0 E9			bne loop
  5875
  5876 98FF A9 BD 8D 8C 98		mva <dli0 ldliHero+1
  5877 9904 A9 80 8D 91 98		mva >dli0 hdliHero+1
  5878
  5879 9909 A9 4B 8D BB 80 A9 + init	mwa #dliHero __dliBegin
  5880 9913 60				rts
  5881
  5882
  5883 9914 20 46 99		overlay	jsr setHlp
  5884
  5885 9917 BD 65 7E 8D 8C 98		mva INIT.ldli+1,x ldliHero+1
  5886 991D BD 78 7E 8D 91 98		mva INIT.hdli+1,x hdliHero+1
  5887
  5888 9923 A9 4C 91 6A			mva #{jmp*} (hlp),y
  5889 9927 C8				iny
  5890 9928 A9 4B 91 6A C8 A9 + 	mwa #dliHero (hlp),y
  5891
  5892 9931 A9 BD 8D D8 98		mva <dli0 ldliOvr+1
  5893 9936 A9 80 8D DD 98		mva >dli0 hdliOvr+1
  5894
  5895 993B A9 9A 8D BB 80 A9 + 	mwa #dliOverlay __dliBegin
  5896 9945 60				rts
  5897
  5898
  5899 9946 BD 64 7E 85 6A	setHlp	mva INIT.ldli,x hlp
  5900 994B BD 77 7E 85 6B		mva INIT.hdli,x hlp+1
  5901
  5902 9950 A0 0D			ldy #.len(@sdli)
  5903 9952 60				rts
  5904 				.endl
  5905
  5906
  5907 				* ---------------------------
  5908 				* ---	GET LEVEL
  5909 				* ---------------------------
  5910 				// kopiuje dane levelu z banku pod adres INFLATE_DATA
  5911 9953			.proc	GET_LEVEL
  5912
  5913 9953 AD E9 FF			lda select
  5914 9956 D0 0C			bne panic
  5915
  5916 9958 AD 0A 01 8D 01 D3		mva @TAB_MEM_BANKS+(=lvl_temp) portb
  5917
  5918 995E A9 00			lda <lvl_temp
  5919 9960 A2 40			ldx >lvl_temp
  5920
  5921 9962 D0 0A			bne copy
  5922
  5923 9964 AD 01 01 8D 01 D3	panic	mva @TAB_MEM_BANKS+(=lvl0) portb
  5924
  5925 996A A9 7C			lda <lvl0
  5926 996C A2 7D			ldx >lvl0
  5927
  5928 996E 8D 83 99		copy	sta src+1
  5929 9971 8E 84 99			stx src+2
  5930
  5931 9974 A9 00 8D 86 99 A9 + 	mwa #inflate_data dst+1
  5932
  5933 997E A2 03			ldx #3
  5934 9980 A0 00			ldy #0
  5935 9982 B9 FF FF		src	lda $ffff,y
  5936 9985 99 FF FF		dst	sta $ffff,y		; inflate_data
  5937 9988 C8				iny
  5938 9989 D0 F7			bne src
  5939
  5940 998B EE 84 99			inc src+2
  5941 998E EE 87 99			inc dst+2
  5942 9991 CA				dex
  5943 9992 D0 EE			bne src
  5944
  5945 9994 A9 FE 8D 01 D3		mva #$fe portb
  5946
  5947 9999 60				rts
  5948
  5949 				.endp
  5950
  5951
  5952 999A			.proc	DEPACK_LVL	; trzy paczki po 24 levele kazda
  5953
  5954 999A AE F6 38			ldx level?
  5955
  5956 				.nowarn	div #24		; nLvl / 24
  5956 				 LDA# 24\ JSR DIV
  5956 999D A9 18		 LDA# 24
  5956 999F 20 03 9A		 JSR DIV
  5957 99A2 8D C9 99			sta mod24
  5958
  5959 99A5 AD 0A 01 8D 01 D3		mva @TAB_MEM_BANKS+(=lvla) portb
  5960
  5961 99AB A6 9A			ldx div.ACC	; 0..2 !!!
  5962 99AD E0 03			cpx #3
  5963 99AF 90 02			scc
  5964 99B1 A2 00			ldx #0
  5965
  5966 99B3 BD F7 38 85 9A		mva l_lvl,x inputPointer
  5967 99B8 BD FA 38 85 9B		mva h_lvl,x inputPointer+1
  5968
  5969 99BD A9 40 85 9C A9 9B + 	mwa #txture outputPointer
  5970
  5971 99C5 20 8D 95			jsr inflate
  5972
  5973 99C8 A9 00			lda #0		; nLvl mod 24
  5974 = 99C9			mod24	equ *-1
  5975 99CA 0A				asl @
  5976 99CB AA				tax
  5977
  5978 99CC BD 40 9B			lda txture,x
  5979 99CF 18 69 70			add <txture+48
  5980 99D2 8D EC 99			sta src+1
  5981 99D5 BD 41 9B			lda txture+1,x
  5982 99D8 69 9B			adc >txture+48
  5983 99DA 8D ED 99			sta src+2
  5984
  5985 99DD A9 00 8D EF 99 A9 + 	mwa #lvl_temp dst+1
  5986
  5987 99E7 A2 03			ldx #3
  5988 99E9 A0 00			ldy #0
  5989 99EB B9 FF FF		src	lda $ffff,y
  5990 99EE 99 FF FF		dst	sta $ffff,y
  5991 99F1 C8				iny
  5992 99F2 D0 F7			bne src
  5993
  5994 99F4 EE ED 99			inc src+2
  5995 99F7 EE F0 99			inc dst+2
  5996 99FA CA				dex
  5997 99FB D0 EE			bne src
  5998
  5999 99FD A9 FE 8D 01 D3		mva #$fe portb
  6000 9A02 60				rts
  6001 				.endp
  6002
  6003
  6004
  6005 				/*
  6006 				 DIVIDE ROUTINE
  6007 				 ACC/AUX -> ACC, remainder in EXT
  6008 				*/
  6008
  6009
  6010 9A03			.proc	div  (.byte a,x) .reg
  6011
  6012 = 009A			ACC	= inflate_zp	; A
  6013 = 009B			AUX	= ACC+1		; X
  6014
  6015 9A03 86 9A			stx ACC
  6016 9A05 85 9B			sta AUX
  6017
  6018 9A07 A9 00			LDA #0
  6019 9A09 A0 08			LDY #$08
  6020 9A0B 06 9A		LOOP	ASL ACC
  6021 9A0D 2A				ROL @
  6022 9A0E C5 9B			CMP AUX
  6023 9A10 90 04			BCC DIV2
  6024 9A12 E5 9B			SBC AUX
  6025 9A14 E6 9A			INC ACC
  6026 9A16			DIV2
  6027 9A16 88				DEY
  6028 9A17 D0 F2			BNE LOOP
  6029 				;	STA EXT
  6030 9A19 60				RTS
  6031
  6032 				.endp
  6033
  6034
  6035 9A1A			.local	Digit
  6036
  6037 9A1A 8D 20 9A			sta _add
  6038 9A1D 0A				asl @
  6039 9A1E 18 69 00			add #0
  6040 = 9A20			_add	equ *-1
  6041 9A21 AA				tax
  6042
  6043 9A22 20 28 9A			jsr digit
  6044 9A25 20 28 9A			jsr digit
  6045 9A28			digit
  6046 9A28 BD 60 38 99 14 39		mva Digits0,x	panel,y
  6047 9A2E BD 7E 38 99 3C 39		mva Digits1,x	panel+40,y
  6048 9A34 BD 9C 38 99 64 39		mva Digits2,x	panel+80,y
  6049
  6050 9A3A E8				inx
  6051 9A3B C8				iny
  6052 9A3C 60				rts
  6053
  6054 				;	mva Digits0+1,x	panel+1,y
  6055 				;	mva Digits1+1,x	panel+40+1,y
  6056 				;	mva Digits2+1,x	panel+80+1,y
  6057 				;
  6058 				;	mva Digits0+2,x	panel+2,y
  6059 				;	mva Digits1+2,x	panel+40+2,y
  6060 				;	mva Digits2+2,x	panel+80+2,y
  6061 				;
  6062 9A3D 60				rts
  6063 				.endl
  6064
  6065 9A3E			.proc	CLRMISSILE
  6066
  6067 9A3E A2 3C			ldx #60
  6068 9A40 BD 00 03		loop	lda pmgB1+$300,x
  6069 9A43 29 3F			and #missile_mask^$ff
  6070 9A45 9D 00 03			sta pmgB1+$300,x
  6071
  6072 9A48 BD 00 23			lda pmgB2+$300,x
  6073 9A4B 29 3F			and #missile_mask^$ff
  6074 9A4D 9D 00 23			sta pmgB2+$300,x
  6075
  6076 9A50 E8				inx
  6077 9A51 E0 D4			cpx #212
  6078 9A53 D0 EB			bne loop
  6079 9A55 60				rts
  6080 				.endp
  6081
  6082
  6083 9A56			.local	GameEnd
  6084
  6085 				gamEnd2	WAIT <dlist2 >pmgB2
  6085 				 LDX <DLIST2\ LDY >PMGB2\ JSR WAIT
  6085 9A56 A2 2A		 LDX <DLIST2
  6085 9A58 A0 20		 LDY >PMGB2
  6085 9A5A 20 61 88		 JSR WAIT
  6086
  6087 9A5D 20 51 4C			CLEARB1
  6088 9A60 A9 00 85 86			mva #0 bufor
  6089
  6090 9A64 8D 31 88		klat0	sta PLAYER.klatka
  6091
  6092 					ENGINE #BALL.BALLB1
  6092 				 LDX> BALL.BALLB1\ LDA< BALL.BALLB1\ JSR ENGINE
  6092 9A67 A2 3D		 LDX> BALL.BALLB1
  6092 9A69 A9 19		 LDA< BALL.BALLB1
  6092 9A6B 20 FF 91		 JSR ENGINE
  6093
  6094 					CLRHARP	#0^40
  6094 				 LDA# 0^40\ JSR CLRHARP
  6094 9A6E A9 28		 LDA# 0^40
  6094 9A70 20 A5 88		 JSR CLRHARP
  6095
  6096 				;	HERO	#0
  6097 9A73 20 29 86			PLAYERB1
  6098
  6099
  6100 				gamEnd0	WAIT <dlist1 >pmgB1
  6100 				 LDX <DLIST1\ LDY >PMGB1\ JSR WAIT
  6100 9A76 A2 00		 LDX <DLIST1
  6100 9A78 A0 00		 LDY >PMGB1
  6100 9A7A 20 61 88		 JSR WAIT
  6101
  6102 9A7D 20 0D 54			CLEARB2
  6103 9A80 A9 02 85 86		 	mva #2 bufor
  6104
  6105 9A84 A9 00			lda #0
  6106 9A86 8D 31 88		klat1	sta PLAYER.klatka
  6107
  6108 					ENGINE #BALL.BALLB2
  6108 				 LDX> BALL.BALLB2\ LDA< BALL.BALLB2\ JSR ENGINE
  6108 9A89 A2 3E		 LDX> BALL.BALLB2
  6108 9A8B A9 0D		 LDA< BALL.BALLB2
  6108 9A8D 20 FF 91		 JSR ENGINE
  6109
  6110 					CLRHARP	#40^40
  6110 				 LDA# 40^40\ JSR CLRHARP
  6110 9A90 A9 00		 LDA# 40^40
  6110 9A92 20 A5 88		 JSR CLRHARP
  6111
  6112 				;	HERO	#40
  6113 9A95 20 10 87			PLAYERB2
  6114
  6115 9A98 20 2E 92			GO_BONUS
  6116
  6117 9A9B AD F8 9A			lda end_delay
  6118 9A9E C9 26			cmp #@end_delay-10
  6119 9AA0 D0 03			sne
  6120 9AA2 20 0A 8C			jsr JingleDeath
  6121
  6122 9AA5 AD FD 82			lda NMI.starsExplosion
  6123 9AA8 D0 AC			bne gamEnd2
  6124
  6125 9AAA CE F8 9A			dec end_delay
  6126 9AAD 10 A7			bpl gamEnd2
  6127
  6128 9AAF A9 30 8D F8 9A		mva #@end_delay end_delay
  6129
  6130 9AB4 AD 04 01			lda @TAB_MEM_BANKS+(=rmt2)
  6131 9AB7 8D 01 D3			sta portb
  6132
  6133 9ABA A9 00 8D 4F 83		mva #$00 NMI.playmusic
  6134 9ABF 20 09 78			jsr rmt2.RASTERMUSICTRACKER+9
  6135
  6136 9AC2 AD E9 FF			lda select
  6137 9AC5 D0 29			bne skip			; dla PANIC nie mamy naliczania bonusu
  6138 					
  6139 9AC7 A9 00			lda #0
  6140 = 9AC8			reason	equ *-1
  6141 9AC9 D0 03			bne skip_no
  6142
  6143 9ACB A9 E5			lda #$ff-(_bpl-adScore)-1
  6144 9ACD 2C				dta {bit*}
  6145 9ACE			skip_no
  6146 9ACE A9 F8			lda #$ff-(_bpl-noScore)-1
  6147
  6148 9AD0 8D EF 9A			sta _bpl+1
  6149
  6150 9AD3 D0 16			bne sclp
  6151
  6152 9AD5 A5 79 C5 79 F0 FC	adScore	lda:cmp:req frame
  6153
  6154 					NewScore #0 #5			; dodatkowe punkty za pozostaly czas
  6154 				 MVA #0 NEWSCORE._10\ MVA #5 NEWSCORE._1\ JSR NEWSCORE
  6154 9ADB A9 00 8D 8D 93	 MVA #0 NEWSCORE._10
  6154 9AE0 A9 05 8D 78 93	 MVA #5 NEWSCORE._1
  6154 9AE5 20 77 93		 JSR NEWSCORE
  6155
  6156 9AE8 20 57 7E		noScore	jsr rmt2.TimeUpdate
  6157
  6158 9AEB AD 57 83		sclp	lda NMI.timer
  6159 9AEE 10 E5		_bpl	bpl adScore
  6160
  6161
  6162 9AF0 A9 FE 8D 01 D3	skip	mva #$fe portb
  6163
  6164 9AF5 4C 83 7F			jmp GameEnd.TheEnd
  6165
  6166 9AF8 30			end_delay dta @end_delay
  6167 				.endl
  6168
  6169
  6170 					.print 'prg_end: ',*,'..',txture-40
  6170 				prg_end: $9AF9..$9B18
  6171
  6172 					ert *>=txture-40, '> ',txture-40
  6173
  6174 				//**********************************************************************
  6175
  6176 					org fntPnl
  6177 B800-BBF5> 3E 63 63 6B + 	ins 'panel/liczniki2.fnt',0,118*8
  6178
  6179
  6180 BBB0			.local	dliHeroDeath
  6181
  6182 BBB0 8D 0B D0			sta sizep0+(pmHero3-$400)/$100
  6183
  6184 BBB3 8D 0C D0			sta sizem
  6185
  6186 BBB6 A9 21 8D 1B D0		mva #$21 gtictl
  6187
  6188 BBBB A5 7B			lda hposx
  6189 BBBD 20 D3 BB			jsr hpos
  6190
  6191 BBC0 A9 14			lda #$14
  6192 = BBC1			c0	equ *-1
  6193 BBC2 8D 12 D0			sta colpm0
  6194 BBC5 8D 14 D0			sta colpm2
  6195
  6196 BBC8 A9 18			lda #$18
  6197 = BBC9			c1	equ *-1
  6198 BBCA 8D 13 D0			sta colpm1
  6199 BBCD 8D 15 D0			sta colpm3
  6200
  6201 BBD0 4C 8B 98			jmp ldliHero
  6202
  6203
  6204 BBD3 38 E9 05		hpos	sub #5
  6205
  6206 BBD6 8D 00 D0			sta hposp0
  6207 BBD9 8D 01 D0			sta hposp1
  6208
  6209 BBDC 18 69 08			add #8
  6210 BBDF 8D 02 D0			sta hposp2
  6211 BBE2 8D 03 D0			sta hposp3
  6212
  6213 BBE5 69 08			adc #8
  6214 BBE7 8D 04 D0			sta hposm0
  6215 BBEA 8D 05 D0			sta hposm1
  6216
  6217 BBED 69 02			adc #2
  6218 BBEF 8D 06 D0			sta hposm2
  6219 BBF2 8D 07 D0			sta hposm3
  6220
  6221 BBF5 60				rts
  6222
  6223 				.endl
  6224
  6225 					ert *>fntPnl+$400,*
  6226
  6227 				//**********************************************************************
  6228
  6229 02E0-02E1> 70 3B			run main
  6230
  6231
  6232 				* ---------------------------
  6233 				* ---	MACRO definitions
  6234 				* ---------------------------
  6235
