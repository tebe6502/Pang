program pang_asm;

{$APPTYPE CONSOLE}

uses
  SysUtils;

type

 tablica = array [0..32*240] of byte;

var
 tb0, tb1, tb2, tb3: tablica;

 tora: array [0..255] of Boolean;

 tmsk, tshp: array [0..255] of byte;

 f: file;
 t: textfile;
 err: integer;

 kula: string;


procedure zapisz(x,y: byte; b: byte; var tb: tablica);
var v: byte;
    i, j, k, rx: integer;
    a, r, iny: Boolean;
begin

 r:=false;  iny:=false;

 writeln(t, '_',b);

 inc(y,x);

 rx:=0;

 for j:=0 to 7 do begin

  v:=$ff;
  for i:=x to y-1 do v:=v and tb[j+i*32];

  if v<>$ff then begin

   if iny then writeln(t, #9'@@INC ',kula);


   for k:=0 to 254 do
   if tora[k] then begin       // jesli TORA = TRUE to jest to krawedz kuli

    for i:=x to y-1 do
     if tb[j+i*32]=k then begin

      writeln(t, #9'lda (ln',i-x,'),y');
      writeln(t, #9'and #$',IntToHex(tmsk[k],2));
      writeln(t, #9'ora #$',IntToHex(tshp[k],2));  if tshp[k]=0 then writeln('blee');
      writeln(t, #9'sta (ln',i-x,'),y');

      r:=true;
     end;
   end;


   for k:=0 to 254 do
   if not(tora[k]) then begin

    a:=false;
    for i:=x to y-1 do
     if tb[j+i*32]=k then begin

      if not(a) then begin
       writeln(t, #9'lda #$',IntToHex(k,2));
       a:=true;
      end;

      writeln(t, #9'sta (ln',i-x,'),y');

      r:=false;
     end;
   end;

  iny:=true;

//  if r then
//   writeln(t, #9'mva #$ff clridx,y')
//  else
//   writeln(t, #9'sta clridx,y');

//  writeln(t, #9'MIN_MAX_Y ',rx);

//  writeln(t, #9'iny');
  end;

  inc(rx);
 end;

 //writeln(t, #9'jmp BALL.testXY');
 writeln(t, #9'rts');
end;


procedure init;
var i: integer;
    v: byte;
begin

 fillchar(tora, sizeof(tora), false);

 // TORA - jesli jest przynajmniej jeden pixel koloru 11 oraz inne pixle
 for i:=0 to 255-1 do
  if (i and $c0=$C0) or (i and $30=$30) or (i and $c=$c) or (i and $3=3) then tora[i]:=true;


 for i:=0 to 255 do begin
  v:=i;

  if v and $c0=$c0 then v:=v or $c0 else v:=v and ($c0 xor $ff);
  if v and $30=$30 then v:=v or $30 else v:=v and ($30 xor $ff);
  if v and $0c=$0c then v:=v or $0c else v:=v and ($0c xor $ff);
  if v and $03=$03 then v:=v or $03 else v:=v and ($03 xor $ff);

  tmsk[i]:=v;
 end;

 for i:=0 to 255 do begin
  v:=i;

  if v and $c0=$c0 then v:=v and ($c0 xor $ff);
  if v and $30=$30 then v:=v and ($30 xor $ff);
  if v and $0c=$0c then v:=v and ($0c xor $ff);
  if v and $03=$03 then v:=v and ($03 xor $ff);

  tshp[i]:=v;
 end;


 assignfile(f, 'mic\kula_0.mic'); reset(f,1);
 blockread(f, tb0, sizeof(tb0), err);
 closefile(f);

 assignfile(f, 'mic\kula_1.mic'); reset(f,1);
 blockread(f, tb1, sizeof(tb1), err);
 closefile(f);

 assignfile(f, 'mic\kula_2.mic'); reset(f,1);
 blockread(f, tb2, sizeof(tb2), err);
 closefile(f);

 assignfile(f, 'mic\kula_3.mic'); reset(f,1);
 blockread(f, tb3, sizeof(tb3), err);
 closefile(f);

end;


procedure detekcja(siz: byte);
var row, s: byte;
begin

 for row:=0 to 15+2 do begin

  writeln(t,'* ---------------------------------------------------');
  writeln(t,'r',row,#9,'.local'#9#9#9#9'; ROW = ',row);

//  writeln(t,#9'bne up'#13#10);   

  writeln(t,'left'{#9'lda addx,x'});
	writeln(t,#9'beq up');
	writeln(t,#9'bpl right'#13#10);

	writeln(t,#9'lda ?invers-1+48*0+',row*48,',y');
  for s:=1 to siz-1 do
   if row+s<18 then writeln(t,#9'ora ?invers-1+48*',s,'+',row*48,',y');

//	writeln(t,#9'and #$7f');
	writeln(t,#9'jmp eox'#13#10);

  writeln(t,'right'#9'lda ?invers+48*0+',siz,'+',row*48,',y');
  for s:=1 to siz-1 do
   if row+s<18 then writeln(t,#9'ora ?invers+48*',s,'+',siz,'+',row*48,',y');
  
//	writeln(t,#9'and #$7f');
	writeln(t,'eox'#9'beq up'#13#10);

	writeln(t,#9'lda addx,x');
  writeln(t,#9'eor #$fe');
  writeln(t,#9'sta addx,x'#13#10);

//  writeln(t,#9'jmp BALL_COLLISION.return_newX'#13#10);

  writeln(t,'up'#9'lda addy,x');
	writeln(t,#9'bpl down'#13#10);

  if row=0 then
//   writeln(t,#9,'rts'#13#10)
   writeln(t,#9'jmp BALL_COLLISION.returnX'#13#10)
  else begin
 	 writeln(t,#9'lda ?invers-48+',row*48,',y');		// dla R0 wyj¹tkowo nie istnieje Y-1
	 for s:=1 to siz-1 do writeln(t,#9'ora ?invers-48+',s,'+',row*48,',y');

//	 writeln(t,#9'and #$7f');
//   writeln(t,#9'seq');
//   writeln(t,#9'sta _eorY');

   writeln(t,#9'jmp BALL_COLLISION.return'#13#10);
  end;


  if row+siz>15+2 then
   writeln(t,'down'#9'jmp BALL_COLLISION.returnX')
  else begin
   writeln(t,'down',#9,'lda ?invers+',48*siz,'+',row*48,',y');	// dla R15 wyj¹tkowo nie istnieje Y+1
	 for s:=1 to siz-1 do writeln(t,#9'ora ?invers+',s,'+',48*siz,'+',row*48,',y');

//	 writeln(t,#9'and #$7f');
//	 writeln(t,#9'seq');
//	 writeln(t,'eoy'#9'sta _eorY');
   writeln(t,#9,'jmp BALL_COLLISION.return'#13#10);

  end;

  writeln(t,#9,'.endl'#13#10);

 end;

 writeln(t,'.endl');

end;


begin
 init;

 kula:='inck0';
 assignfile(t, 'kula0.asm'); rewrite(t);
 writeln(t, '.local'#9'k0');
 zapisz(0,40, 0, tb0);
 zapisz(0,40, 1, tb1);
 zapisz(0,40, 2, tb2);
 zapisz(0,40, 3, tb3);
 writeln(t, '.end');
 closefile(t);

 kula:='inck1';
 assignfile(t, 'kula1.asm'); rewrite(t);
 writeln(t, '.local'#9'k1');
 zapisz(40,32, 0, tb0);
 zapisz(40,32, 1, tb1);
 zapisz(40,32, 2, tb2);
 zapisz(40,32, 3, tb3);
 writeln(t, '.end');
 closefile(t);

 kula:='inck2';
 assignfile(t, 'kula2.asm'); rewrite(t);
 writeln(t, '.local'#9'k2');
 zapisz(72,24, 0, tb0);
 zapisz(72,24, 1, tb1);
 zapisz(72,24, 2, tb2);
 zapisz(72,24, 3, tb3);
 writeln(t, '.end');
 closefile(t);

 kula:='inck3';
 assignfile(t, 'kula3.asm'); rewrite(t);
 writeln(t, '.local'#9'k3');
 zapisz(96,16, 0, tb0);
 zapisz(96,16, 1, tb1);
 zapisz(96,16, 2, tb2);
 zapisz(96,16, 3, tb3);
 writeln(t, '.end');
 closefile(t);

 kula:='inck4';
 assignfile(t, 'kula4.asm'); rewrite(t);
 writeln(t, '.local'#9'k4');
 zapisz(112,8, 0, tb0);
 zapisz(112,8, 1, tb1);
 zapisz(112,8, 2, tb2);
 zapisz(112,8, 3, tb3);
 writeln(t, '.end');
 closefile(t);

//*****************************************

 assignfile(t, 'ckula0.asm'); rewrite(t);
 writeln(t, '.local'#9'ck0');
 detekcja(5);
 closefile(t);

 assignfile(t, 'ckula1.asm'); rewrite(t);
 writeln(t, '.local'#9'ck1');
 detekcja(4);
 closefile(t);

 assignfile(t, 'ckula2.asm'); rewrite(t);
 writeln(t, '.local'#9'ck2');
 detekcja(3);
 closefile(t);

 assignfile(t, 'ckula3.asm'); rewrite(t);
 writeln(t, '.local'#9'ck3');
 detekcja(2);
 closefile(t);

 assignfile(t, 'ckula4.asm'); rewrite(t);
 writeln(t, '.local'#9'ck4');
 detekcja(1);
 closefile(t);

end.

